
HomeSecuritySystem_Group10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a148  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a0  0800a9a0  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9a8  0800a9a8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200001fc  0800abac  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800abac  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4d8  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c23  00000000  00000000  0003b704  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003f328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00040690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aaa3  00000000  00000000  00041810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014426  00000000  00000000  0005c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094cd1  00000000  00000000  000706d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001053aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005308  00000000  00000000  00105428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2d0 	.word	0x0800a2d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800a2d0 	.word	0x0800a2d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_ADC1_Init+0x98>)
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_ADC1_Init+0xa0>)
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <MX_ADC1_Init+0x98>)
 8000610:	f002 fd28 	bl	8003064 <HAL_ADC_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800061a:	f001 fa0f 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_ADC1_Init+0x98>)
 8000630:	f002 ffd8 	bl	80035e4 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800063a:	f001 f9ff 	bl	8001a3c <Error_Handler>
  }

}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000238 	.word	0x20000238
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a32      	ldr	r2, [pc, #200]	; (800073c <HAL_ADC_MspInit+0xe8>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d15e      	bne.n	8000734 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_ADC_MspInit+0xec>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a30      	ldr	r2, [pc, #192]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <HAL_ADC_MspInit+0xec>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <HAL_ADC_MspInit+0xec>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <HAL_ADC_MspInit+0xf0>)
 80006c2:	f003 ff65 	bl	8004590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 800070a:	f003 fb27 	bl	8003d5c <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000714:	f001 f992 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2012      	movs	r0, #18
 800072a:	f003 fae0 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800072e:	2012      	movs	r0, #18
 8000730:	f003 faf9 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40012000 	.word	0x40012000
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	20000280 	.word	0x20000280
 800074c:	40026410 	.word	0x40026410

08000750 <check_date>:
* @brief        check if the data inserted by the user is valid
* @param[in]    uint8_t months[12] it is used to read the number of days for each month
* @return       true if the data is valid, false otherwise
*/

bool check_date(int date, int month, int year) {
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	uint8_t months[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <check_date+0x94>)
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	ca07      	ldmia	r2, {r0, r1, r2}
 8000764:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (month < 0 || month > 12) {
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db02      	blt.n	8000774 <check_date+0x24>
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b0c      	cmp	r3, #12
 8000772:	dd01      	ble.n	8000778 <check_date+0x28>
		return false;
 8000774:	2300      	movs	r3, #0
 8000776:	e02f      	b.n	80007d8 <check_date+0x88>
	}

	if (date < 0 || date > 31) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	db02      	blt.n	8000784 <check_date+0x34>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b1f      	cmp	r3, #31
 8000782:	dd01      	ble.n	8000788 <check_date+0x38>
		return false;
 8000784:	2300      	movs	r3, #0
 8000786:	e027      	b.n	80007d8 <check_date+0x88>
	}

	// data is valid if year > 2020
	if (year < 20) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b13      	cmp	r3, #19
 800078c:	dc01      	bgt.n	8000792 <check_date+0x42>
		return false;
 800078e:	2300      	movs	r3, #0
 8000790:	e022      	b.n	80007d8 <check_date+0x88>
	}

	if (year % 4 == 0 && month == 2) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f003 0303 	and.w	r3, r3, #3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10f      	bne.n	80007bc <check_date+0x6c>
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d10c      	bne.n	80007bc <check_date+0x6c>
		if (date <= months[month - 1] + 1) {
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	f107 0220 	add.w	r2, r7, #32
 80007aa:	4413      	add	r3, r2
 80007ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dc01      	bgt.n	80007bc <check_date+0x6c>
			return true;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e00d      	b.n	80007d8 <check_date+0x88>
		}
	}

	if (date <= months[month - 1]) {
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f107 0220 	add.w	r2, r7, #32
 80007c4:	4413      	add	r3, r2
 80007c6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4293      	cmp	r3, r2
 80007d0:	dc01      	bgt.n	80007d6 <check_date+0x86>
		return true;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <check_date+0x88>
	}

	return false;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3724      	adds	r7, #36	; 0x24
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	0800a2e8 	.word	0x0800a2e8

080007e8 <check_time>:
* @brief        check if the time inserted by the user is valid
* @param[in]    seconds, minutes, hours
* @return       true if the time is valid, false otherwise
*/

bool check_time(int seconds, int minutes, int hours) {
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]

	if (seconds >= 0 && seconds <= 59 && minutes >= 0 && minutes <= 59
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db10      	blt.n	800081c <check_time+0x34>
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b3b      	cmp	r3, #59	; 0x3b
 80007fe:	dc0d      	bgt.n	800081c <check_time+0x34>
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0a      	blt.n	800081c <check_time+0x34>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b3b      	cmp	r3, #59	; 0x3b
 800080a:	dc07      	bgt.n	800081c <check_time+0x34>
			&& hours >= 0 && hours <= 23) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db04      	blt.n	800081c <check_time+0x34>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b17      	cmp	r3, #23
 8000816:	dc01      	bgt.n	800081c <check_time+0x34>
		return true;
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <check_time+0x36>
	} else {
		return false;
 800081c:	2300      	movs	r3, #0
	}

}
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <check_alarm_delay>:
* @brief        check if the alarm delay for each sensor is valid
* @param[in]    alarm_delay
* @return       true if the alarm delay for each sensor is valid, false otherwise
*/

bool check_alarm_delay(int alarm_delay) {
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]

	if (alarm_delay >= 0 && alarm_delay <= 30) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db04      	blt.n	8000842 <check_alarm_delay+0x18>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b1e      	cmp	r3, #30
 800083c:	dc01      	bgt.n	8000842 <check_alarm_delay+0x18>
		return true;
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <check_alarm_delay+0x1a>
	} else {
		return false;
 8000842:	2300      	movs	r3, #0
	}
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <check_alarm_duration>:
* @brief        check if the alarm duration for each sensor is valid
* @param[in]    alarm_duration
* @return       true if the alarm duration for each sensor is valid, false otherwise
*/

bool check_alarm_duration(int alarm_duration) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	if (alarm_duration >= 1 && alarm_duration <= 60) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	dd04      	ble.n	8000868 <check_alarm_duration+0x18>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b3c      	cmp	r3, #60	; 0x3c
 8000862:	dc01      	bgt.n	8000868 <check_alarm_duration+0x18>
		return true;
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <check_alarm_duration+0x1a>
	} else {
		return false;
 8000868:	2300      	movs	r3, #0
	}
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <is_number>:
* @brief        check if the data inserted by the user (except the pin) are numbers
* @param[in]    buffer
* @return       true if the data in the buffer are number, false otherwise
*/

bool is_number() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

	for (int i = 0; i < BUFFER_SIZE; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e012      	b.n	80008aa <is_number+0x32>
		if (isdigit((char)buffer[i]) == 0) {
 8000884:	f009 f836 	bl	80098f4 <__locale_ctype_ptr>
 8000888:	4601      	mov	r1, r0
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <is_number+0x44>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	2b00      	cmp	r3, #0
 800089e:	d101      	bne.n	80008a4 <is_number+0x2c>
			return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e006      	b.n	80008b2 <is_number+0x3a>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	dde9      	ble.n	8000884 <is_number+0xc>
		}
	}
	return true;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000370 	.word	0x20000370

080008c0 <check_user_pin>:
* @brief        check if the user pin entered by the user has 4 digits
* @param[in]    USER_PIN is the dimension of the pin and user_pin is the buffer where the pin is stored
* @return       true if the pin is correct, false otherwise
*/

bool check_user_pin() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

	for (int i = 0; i < USER_PIN; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	e012      	b.n	80008f2 <check_user_pin+0x32>
		if (isdigit((char)user_pin[i]) == 0) {
 80008cc:	f009 f812 	bl	80098f4 <__locale_ctype_ptr>
 80008d0:	4601      	mov	r1, r0
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <check_user_pin+0x44>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	440b      	add	r3, r1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <check_user_pin+0x2c>
			return false;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e006      	b.n	80008fa <check_user_pin+0x3a>
	for (int i = 0; i < USER_PIN; i++) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	dde9      	ble.n	80008cc <check_user_pin+0xc>
		}
	}
	return true;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002f4 	.word	0x200002f4

08000908 <configuration_rejected>:
* @brief        print a message on putty indicating rejected data entered
* @param[in]    msg is the message to print on putty
* @return       void function
*/

void configuration_rejected(char *msg) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fc6f 	bl	80001f4 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29b      	uxth	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <configuration_rejected+0x24>)
 8000920:	f008 f88a 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000062c 	.word	0x2000062c

08000930 <configuration_accepted>:
* @brief        print a message on putty indicating accepted data entered
* @param[in]    msg is the message to print on putty
* @return       void function
*/

void configuration_accepted(char *msg){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fc5b 	bl	80001f4 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <configuration_accepted+0x24>)
 8000948:	f008 f876 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000062c 	.word	0x2000062c

08000958 <command_rejected>:
* @brief        print a message on putty that indicates an invalid sequence
* @param[in]    msg
* @return       void function
*/

void command_rejected(char *msg) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fc47 	bl	80001f4 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <command_rejected+0x24>)
 8000970:	f008 f862 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000062c 	.word	0x2000062c

08000980 <command_accepted>:
* @brief        print a message on putty that indicates a valid sequence
* @param[in]    msg
* @return       void function
*/

void command_accepted(char *msg) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc33 	bl	80001f4 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29b      	uxth	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <command_accepted+0x24>)
 8000998:	f008 f84e 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000062c 	.word	0x2000062c

080009a8 <user_pin_rejected>:
* @brief        print a message on putty indicating that the inserted pin is not valid
* @param[in]    msg
* @return       void function
*/

void user_pin_rejected(char *msg){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc1f 	bl	80001f4 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <user_pin_rejected+0x24>)
 80009c0:	f008 f83a 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000062c 	.word	0x2000062c

080009d0 <matchPin>:
* @brief        check if pin and pin2 are equal or not
* @param[in]    pin, pin2
* @return       true if pin and pin2 are equal, false otherwise
*/

bool matchPin(char *pin, char *pin2) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	if (strcmp(pin, pin2) == 0)
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fbff 	bl	80001e0 <strcmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <matchPin+0x1c>
		return true;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <matchPin+0x1e>
	else
		return false;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <setup>:
* @brief        set the attributes of the system_config structure to -1 before the configuration
* @param[in]    delay_pr, delay_barrier and alarm_duration are the attribute of the system_config structure
* @return       void function
*/

void setup(void){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	system_config.delay_pir = VALUE_NOT_ASSIGNED;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <setup+0x28>)
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	609a      	str	r2, [r3, #8]
	system_config.delay_barrier = VALUE_NOT_ASSIGNED;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <setup+0x28>)
 8000a06:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0a:	60da      	str	r2, [r3, #12]
	system_config.alarm_duration = VALUE_NOT_ASSIGNED;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <setup+0x28>)
 8000a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a12:	611a      	str	r2, [r3, #16]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200002e0 	.word	0x200002e0

08000a24 <default_configuration>:
* @brief        If the user doesn't provide any configuration, save the default configuration
* @param[in]    pin, delay_pir, delay_barrier, alarm_duration and date and time are set to default values
* @return       void function
*/

void default_configuration(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e007      	b.n	8000a40 <default_configuration+0x1c>
		system_config.pin[i] = '0';
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <default_configuration+0x6c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	ddf4      	ble.n	8000a30 <default_configuration+0xc>
	}
	system_config.pin[4] = '\0';
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <default_configuration+0x6c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	711a      	strb	r2, [r3, #4]

	system_config.delay_pir = 0;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <default_configuration+0x6c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
	system_config.delay_barrier = 0;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <default_configuration+0x6c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
	system_config.alarm_duration = 5;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <default_configuration+0x6c>)
 8000a5a:	2205      	movs	r2, #5
 8000a5c:	611a      	str	r2, [r3, #16]

	count_rec = 3;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <default_configuration+0x70>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	601a      	str	r2, [r3, #0]
	sprintf(message, "%s", "\n\rSystem Configuration Rejected! ---- Default Configuration Loaded! ----");
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <default_configuration+0x74>)
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <default_configuration+0x78>)
 8000a68:	4610      	mov	r0, r2
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2349      	movs	r3, #73	; 0x49
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f008 ff68 	bl	8009944 <memcpy>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) message, strlen(message));
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <default_configuration+0x74>)
 8000a76:	f7ff fbbd 	bl	80001f4 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4905      	ldr	r1, [pc, #20]	; (8000a98 <default_configuration+0x74>)
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <default_configuration+0x7c>)
 8000a84:	f007 ffd8 	bl	8008a38 <HAL_UART_Transmit_DMA>

}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200002e0 	.word	0x200002e0
 8000a94:	2000021c 	.word	0x2000021c
 8000a98:	200002f8 	.word	0x200002f8
 8000a9c:	0800a2f4 	.word	0x0800a2f4
 8000aa0:	2000062c 	.word	0x2000062c

08000aa4 <user_configuration>:
* @brief        start the communication with user through putty
* @param[in]    message param is the message to be printed on putty,
* @return       void function
*/

void user_configuration(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	setup();
 8000aa8:	f7ff ffa6 	bl	80009f8 <setup>
	sprintf(message,"%s","\n\r\n\r\n\r\n\r\n\r############### HOME SECURITY SYSTEM ###############\n\r-------- SYSTEM BOOT --------"
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <user_configuration+0x30>)
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <user_configuration+0x34>)
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	2378      	movs	r3, #120	; 0x78
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f008 ff44 	bl	8009944 <memcpy>
			"\n\rInsert User Pin [XXXX]: ");
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) message, strlen(message));
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <user_configuration+0x30>)
 8000abe:	f7ff fb99 	bl	80001f4 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4902      	ldr	r1, [pc, #8]	; (8000ad4 <user_configuration+0x30>)
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <user_configuration+0x38>)
 8000acc:	f007 ffb4 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200002f8 	.word	0x200002f8
 8000ad8:	0800a340 	.word	0x0800a340
 8000adc:	2000062c 	.word	0x2000062c

08000ae0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	switch (count) {
 8000ae8:	4bae      	ldr	r3, [pc, #696]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b09      	cmp	r3, #9
 8000aee:	f200 8193 	bhi.w	8000e18 <HAL_UART_RxCpltCallback+0x338>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <HAL_UART_RxCpltCallback+0x18>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b21 	.word	0x08000b21
 8000afc:	08000b75 	.word	0x08000b75
 8000b00:	08000bbd 	.word	0x08000bbd
 8000b04:	08000c05 	.word	0x08000c05
 8000b08:	08000c4d 	.word	0x08000c4d
 8000b0c:	08000c79 	.word	0x08000c79
 8000b10:	08000ca5 	.word	0x08000ca5
 8000b14:	08000cfb 	.word	0x08000cfb
 8000b18:	08000d27 	.word	0x08000d27
 8000b1c:	08000d51 	.word	0x08000d51
	case 0:
		if (check_user_pin()) {
 8000b20:	f7ff fece 	bl	80008c0 <check_user_pin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d020      	beq.n	8000b6c <HAL_UART_RxCpltCallback+0x8c>
			count = count + 1;
 8000b2a:	4b9e      	ldr	r3, [pc, #632]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a9c      	ldr	r2, [pc, #624]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b32:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 4; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e00b      	b.n	8000b52 <HAL_UART_RxCpltCallback+0x72>
				system_config.pin[i] = user_pin[i];
 8000b3a:	4a9b      	ldr	r2, [pc, #620]	; (8000da8 <HAL_UART_RxCpltCallback+0x2c8>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	7819      	ldrb	r1, [r3, #0]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	460a      	mov	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	ddf0      	ble.n	8000b3a <HAL_UART_RxCpltCallback+0x5a>
			}
			system_config.pin[4] = '\0';
 8000b58:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	711a      	strb	r2, [r3, #4]
			count_rec = 1;
 8000b5e:	4b94      	ldr	r3, [pc, #592]	; (8000db0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
			configuration_accepted("\n\rUser Pin accepted! - Insert Pir Delay [max 30 sec]:");
 8000b64:	4893      	ldr	r0, [pc, #588]	; (8000db4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000b66:	f7ff fee3 	bl	8000930 <configuration_accepted>
		} else {
			configuration_rejected(USER_PIN_ERROR);
		}
		break;
 8000b6a:	e155      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
			configuration_rejected(USER_PIN_ERROR);
 8000b6c:	4892      	ldr	r0, [pc, #584]	; (8000db8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000b6e:	f7ff fecb 	bl	8000908 <configuration_rejected>
		break;
 8000b72:	e151      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>

	case 1:
		if (is_number()) {
 8000b74:	f7ff fe80 	bl	8000878 <is_number>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01a      	beq.n	8000bb4 <HAL_UART_RxCpltCallback+0xd4>
			system_config.delay_pir = atoi((const char*) buffer);
 8000b7e:	488f      	ldr	r0, [pc, #572]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000b80:	f008 fe86 	bl	8009890 <atoi>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b89      	ldr	r3, [pc, #548]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000b88:	609a      	str	r2, [r3, #8]
			if (check_alarm_delay(system_config.delay_pir)) {
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe4b 	bl	800082a <check_alarm_delay>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <HAL_UART_RxCpltCallback+0xcc>
				count = count + 1;
 8000b9a:	4b82      	ldr	r3, [pc, #520]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a80      	ldr	r2, [pc, #512]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000ba2:	6013      	str	r3, [r2, #0]
				configuration_accepted("\n\rPir Delay accepted! - Insert Barrier Delay [max 30 sec]: ");
 8000ba4:	4886      	ldr	r0, [pc, #536]	; (8000dc0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000ba6:	f7ff fec3 	bl	8000930 <configuration_accepted>
				configuration_rejected(ALARM_DELAY_NOT_VALID);
			}
		} else {
			configuration_rejected(ALARM_DELAY_NOT_VALID);
		}
		break;
 8000baa:	e135      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
				configuration_rejected(ALARM_DELAY_NOT_VALID);
 8000bac:	4885      	ldr	r0, [pc, #532]	; (8000dc4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000bae:	f7ff feab 	bl	8000908 <configuration_rejected>
		break;
 8000bb2:	e131      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
			configuration_rejected(ALARM_DELAY_NOT_VALID);
 8000bb4:	4883      	ldr	r0, [pc, #524]	; (8000dc4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000bb6:	f7ff fea7 	bl	8000908 <configuration_rejected>
		break;
 8000bba:	e12d      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>

	case 2:
		if (is_number()) {
 8000bbc:	f7ff fe5c 	bl	8000878 <is_number>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d01a      	beq.n	8000bfc <HAL_UART_RxCpltCallback+0x11c>
			system_config.delay_barrier = atoi((const char*) buffer);
 8000bc6:	487d      	ldr	r0, [pc, #500]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000bc8:	f008 fe62 	bl	8009890 <atoi>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b77      	ldr	r3, [pc, #476]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000bd0:	60da      	str	r2, [r3, #12]
			if (check_alarm_delay(system_config.delay_barrier)) {
 8000bd2:	4b76      	ldr	r3, [pc, #472]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe27 	bl	800082a <check_alarm_delay>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d008      	beq.n	8000bf4 <HAL_UART_RxCpltCallback+0x114>
				count = count + 1;
 8000be2:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a6e      	ldr	r2, [pc, #440]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000bea:	6013      	str	r3, [r2, #0]
				configuration_accepted("\n\rBarrier Delay accepted! - Insert Alarms Duration [max 60 sec]: ");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bee:	f7ff fe9f 	bl	8000930 <configuration_accepted>
				configuration_rejected(ALARM_DELAY_NOT_VALID);
			}
		} else {
			configuration_rejected(ALARM_DELAY_NOT_VALID);
		}
		break;
 8000bf2:	e111      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
				configuration_rejected(ALARM_DELAY_NOT_VALID);
 8000bf4:	4873      	ldr	r0, [pc, #460]	; (8000dc4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000bf6:	f7ff fe87 	bl	8000908 <configuration_rejected>
		break;
 8000bfa:	e10d      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
			configuration_rejected(ALARM_DELAY_NOT_VALID);
 8000bfc:	4871      	ldr	r0, [pc, #452]	; (8000dc4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000bfe:	f7ff fe83 	bl	8000908 <configuration_rejected>
		break;
 8000c02:	e109      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>

	case 3:
		if (is_number()) {
 8000c04:	f7ff fe38 	bl	8000878 <is_number>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01a      	beq.n	8000c44 <HAL_UART_RxCpltCallback+0x164>
			system_config.alarm_duration = atoi((const char*) buffer);
 8000c0e:	486b      	ldr	r0, [pc, #428]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000c10:	f008 fe3e 	bl	8009890 <atoi>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b65      	ldr	r3, [pc, #404]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000c18:	611a      	str	r2, [r3, #16]
			if (check_alarm_duration(system_config.alarm_duration)) {
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_UART_RxCpltCallback+0x2cc>)
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe16 	bl	8000850 <check_alarm_duration>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <HAL_UART_RxCpltCallback+0x15c>
				count = count + 1;
 8000c2a:	4b5e      	ldr	r3, [pc, #376]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c32:	6013      	str	r3, [r2, #0]
				configuration_accepted("\n\rAlarm Duration accepted!\n\r---Date and Time---\n\rInsert Seconds:");
 8000c34:	4865      	ldr	r0, [pc, #404]	; (8000dcc <HAL_UART_RxCpltCallback+0x2ec>)
 8000c36:	f7ff fe7b 	bl	8000930 <configuration_accepted>
				configuration_rejected(ALARM_DURATION_NOT_VALID);
			}
		} else {
			configuration_rejected(ALARM_DURATION_NOT_VALID);
		}
		break;
 8000c3a:	e0ed      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
				configuration_rejected(ALARM_DURATION_NOT_VALID);
 8000c3c:	4864      	ldr	r0, [pc, #400]	; (8000dd0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000c3e:	f7ff fe63 	bl	8000908 <configuration_rejected>
		break;
 8000c42:	e0e9      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
			configuration_rejected(ALARM_DURATION_NOT_VALID);
 8000c44:	4862      	ldr	r0, [pc, #392]	; (8000dd0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000c46:	f7ff fe5f 	bl	8000908 <configuration_rejected>
		break;
 8000c4a:	e0e5      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>

	case 4:
		if (is_number()) {
 8000c4c:	f7ff fe14 	bl	8000878 <is_number>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80d5 	beq.w	8000e02 <HAL_UART_RxCpltCallback+0x322>
			datetime.seconds = (uint8_t) (atoi((const char*) buffer));
 8000c58:	4858      	ldr	r0, [pc, #352]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000c5a:	f008 fe19 	bl	8009890 <atoi>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000c64:	701a      	strb	r2, [r3, #0]
			count = count + 1;
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a4d      	ldr	r2, [pc, #308]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c6e:	6013      	str	r3, [r2, #0]
			configuration_accepted("\n\rInsert Minutes: ");
 8000c70:	4859      	ldr	r0, [pc, #356]	; (8000dd8 <HAL_UART_RxCpltCallback+0x2f8>)
 8000c72:	f7ff fe5d 	bl	8000930 <configuration_accepted>
		}
		break;
 8000c76:	e0c4      	b.n	8000e02 <HAL_UART_RxCpltCallback+0x322>
	case 5:
		if (is_number()) {
 8000c78:	f7ff fdfe 	bl	8000878 <is_number>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80c1 	beq.w	8000e06 <HAL_UART_RxCpltCallback+0x326>
			datetime.minutes = (uint8_t) (atoi((const char*) buffer));
 8000c84:	484d      	ldr	r0, [pc, #308]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000c86:	f008 fe03 	bl	8009890 <atoi>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000c90:	705a      	strb	r2, [r3, #1]
			count = count + 1;
 8000c92:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a42      	ldr	r2, [pc, #264]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000c9a:	6013      	str	r3, [r2, #0]
			configuration_accepted("\n\rInsert Hours: ");
 8000c9c:	484f      	ldr	r0, [pc, #316]	; (8000ddc <HAL_UART_RxCpltCallback+0x2fc>)
 8000c9e:	f7ff fe47 	bl	8000930 <configuration_accepted>
		}
		break;
 8000ca2:	e0b0      	b.n	8000e06 <HAL_UART_RxCpltCallback+0x326>
	case 6:
		if (is_number()) {
 8000ca4:	f7ff fde8 	bl	8000878 <is_number>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 80ad 	beq.w	8000e0a <HAL_UART_RxCpltCallback+0x32a>
			datetime.hours = (uint8_t) (atoi((const char*) buffer));
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000cb2:	f008 fded 	bl	8009890 <atoi>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000cbc:	709a      	strb	r2, [r3, #2]
			if (check_time((int) datetime.seconds, (int) datetime.minutes,
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	4619      	mov	r1, r3
					(int) datetime.hours)) {
 8000cca:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
			if (check_time((int) datetime.seconds, (int) datetime.minutes,
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f7ff fd8a 	bl	80007e8 <check_time>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <HAL_UART_RxCpltCallback+0x20c>
				count = count + 1;
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a30      	ldr	r2, [pc, #192]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000ce2:	6013      	str	r3, [r2, #0]
				configuration_accepted("\n\rTime accepted! - Insert the Day of Month: ");
 8000ce4:	483e      	ldr	r0, [pc, #248]	; (8000de0 <HAL_UART_RxCpltCallback+0x300>)
 8000ce6:	f7ff fe23 	bl	8000930 <configuration_accepted>
			} else {
				count = 4;
				configuration_rejected(TIME_NOT_VALID);
			}
		}
		break;
 8000cea:	e08e      	b.n	8000e0a <HAL_UART_RxCpltCallback+0x32a>
				count = 4;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
				configuration_rejected(TIME_NOT_VALID);
 8000cf2:	483c      	ldr	r0, [pc, #240]	; (8000de4 <HAL_UART_RxCpltCallback+0x304>)
 8000cf4:	f7ff fe08 	bl	8000908 <configuration_rejected>
		break;
 8000cf8:	e087      	b.n	8000e0a <HAL_UART_RxCpltCallback+0x32a>

	case 7:
		if (is_number()) {
 8000cfa:	f7ff fdbd 	bl	8000878 <is_number>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 8084 	beq.w	8000e0e <HAL_UART_RxCpltCallback+0x32e>
			datetime.date = (uint8_t) (atoi((const char*) buffer));
 8000d06:	482d      	ldr	r0, [pc, #180]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000d08:	f008 fdc2 	bl	8009890 <atoi>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d12:	711a      	strb	r2, [r3, #4]
			count = count + 1;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d1c:	6013      	str	r3, [r2, #0]
			configuration_accepted("\n\rDay of Month accepted! - Insert Month: ");
 8000d1e:	4832      	ldr	r0, [pc, #200]	; (8000de8 <HAL_UART_RxCpltCallback+0x308>)
 8000d20:	f7ff fe06 	bl	8000930 <configuration_accepted>
		}
		break;
 8000d24:	e073      	b.n	8000e0e <HAL_UART_RxCpltCallback+0x32e>

	case 8:
		if (is_number()) {
 8000d26:	f7ff fda7 	bl	8000878 <is_number>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d070      	beq.n	8000e12 <HAL_UART_RxCpltCallback+0x332>
			datetime.month = (uint8_t) (atoi((const char*) buffer));
 8000d30:	4822      	ldr	r0, [pc, #136]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000d32:	f008 fdad 	bl	8009890 <atoi>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d3c:	715a      	strb	r2, [r3, #5]
			count = count + 1;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d46:	6013      	str	r3, [r2, #0]
			configuration_accepted("\n\rMonth accepted! -  Insert Year: ");
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <HAL_UART_RxCpltCallback+0x30c>)
 8000d4a:	f7ff fdf1 	bl	8000930 <configuration_accepted>
		}
		break;
 8000d4e:	e060      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x332>

	case 9:
		if (is_number()) {
 8000d50:	f7ff fd92 	bl	8000878 <is_number>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d05d      	beq.n	8000e16 <HAL_UART_RxCpltCallback+0x336>
			datetime.year = (uint8_t) (atoi((const char*) buffer));
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <HAL_UART_RxCpltCallback+0x2dc>)
 8000d5c:	f008 fd98 	bl	8009890 <atoi>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d68:	80da      	strh	r2, [r3, #6]
			if (check_date((int) datetime.date, (int) datetime.month,
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	4619      	mov	r1, r3
					(int) datetime.year)) {
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000d78:	88db      	ldrh	r3, [r3, #6]
			if (check_date((int) datetime.date, (int) datetime.month,
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fce8 	bl	8000750 <check_date>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d036      	beq.n	8000df4 <HAL_UART_RxCpltCallback+0x314>
				ds1307rtc_set_date_time();
 8000d86:	f000 f96f 	bl	8001068 <ds1307rtc_set_date_time>
				count = count + 1;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000d92:	6013      	str	r3, [r2, #0]
				count_rec = 4;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	601a      	str	r2, [r3, #0]
				configuration_accepted("\n\r--------- System Configuration Loaded! ---------");
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <HAL_UART_RxCpltCallback+0x310>)
 8000d9c:	f7ff fdc8 	bl	8000930 <configuration_accepted>
			} else {
				count = 7;
				configuration_rejected(DATE_NOT_VALID);
			}
		}
		break;
 8000da0:	e039      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x336>
 8000da2:	bf00      	nop
 8000da4:	20000218 	.word	0x20000218
 8000da8:	200002f4 	.word	0x200002f4
 8000dac:	200002e0 	.word	0x200002e0
 8000db0:	2000021c 	.word	0x2000021c
 8000db4:	0800a3b8 	.word	0x0800a3b8
 8000db8:	0800a3f0 	.word	0x0800a3f0
 8000dbc:	20000370 	.word	0x20000370
 8000dc0:	0800a418 	.word	0x0800a418
 8000dc4:	0800a454 	.word	0x0800a454
 8000dc8:	0800a484 	.word	0x0800a484
 8000dcc:	0800a4c8 	.word	0x0800a4c8
 8000dd0:	0800a50c 	.word	0x0800a50c
 8000dd4:	2000037c 	.word	0x2000037c
 8000dd8:	0800a53c 	.word	0x0800a53c
 8000ddc:	0800a550 	.word	0x0800a550
 8000de0:	0800a564 	.word	0x0800a564
 8000de4:	0800a594 	.word	0x0800a594
 8000de8:	0800a5cc 	.word	0x0800a5cc
 8000dec:	0800a5f8 	.word	0x0800a5f8
 8000df0:	0800a61c 	.word	0x0800a61c
				count = 7;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_UART_RxCpltCallback+0x340>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	601a      	str	r2, [r3, #0]
				configuration_rejected(DATE_NOT_VALID);
 8000dfa:	480a      	ldr	r0, [pc, #40]	; (8000e24 <HAL_UART_RxCpltCallback+0x344>)
 8000dfc:	f7ff fd84 	bl	8000908 <configuration_rejected>
		break;
 8000e00:	e009      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x336>
		break;
 8000e02:	bf00      	nop
 8000e04:	e008      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
		break;
 8000e06:	bf00      	nop
 8000e08:	e006      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
		break;
 8000e0a:	bf00      	nop
 8000e0c:	e004      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
		break;
 8000e0e:	bf00      	nop
 8000e10:	e002      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
		break;
 8000e12:	bf00      	nop
 8000e14:	e000      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x338>
		break;
 8000e16:	bf00      	nop
	}
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000218 	.word	0x20000218
 8000e24:	0800a650 	.word	0x0800a650

08000e28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	switch (count_rec) {
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_UART_TxCpltCallback+0xc0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d852      	bhi.n	8000ede <HAL_UART_TxCpltCallback+0xb6>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <HAL_UART_TxCpltCallback+0x18>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e55 	.word	0x08000e55
 8000e44:	08000e61 	.word	0x08000e61
 8000e48:	08000edf 	.word	0x08000edf
 8000e4c:	08000e6d 	.word	0x08000e6d
 8000e50:	08000ea3 	.word	0x08000ea3

	case 0:
		HAL_UART_Receive_IT(&huart2, user_pin, USER_PIN);
 8000e54:	2204      	movs	r2, #4
 8000e56:	4925      	ldr	r1, [pc, #148]	; (8000eec <HAL_UART_TxCpltCallback+0xc4>)
 8000e58:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <HAL_UART_TxCpltCallback+0xc8>)
 8000e5a:	f007 fd98 	bl	800898e <HAL_UART_Receive_IT>
		break;
 8000e5e:	e03e      	b.n	8000ede <HAL_UART_TxCpltCallback+0xb6>
	case 1:
		HAL_UART_Receive_IT(&huart2, buffer, BUFFER_SIZE);
 8000e60:	2202      	movs	r2, #2
 8000e62:	4924      	ldr	r1, [pc, #144]	; (8000ef4 <HAL_UART_TxCpltCallback+0xcc>)
 8000e64:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <HAL_UART_TxCpltCallback+0xc8>)
 8000e66:	f007 fd92 	bl	800898e <HAL_UART_Receive_IT>
		break;
 8000e6a:	e038      	b.n	8000ede <HAL_UART_TxCpltCallback+0xb6>
	case 3: // Default configuration loaded
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <HAL_UART_TxCpltCallback+0xd0>)
 8000e72:	f003 fd27 	bl	80048c4 <HAL_GPIO_WritePin>
		KeyPad_Init();
 8000e76:	f000 fb15 	bl	80014a4 <KeyPad_Init>
		// Start TIM10 for system log
		MX_TIM10_Init();
 8000e7a:	f001 fd0d 	bl	8002898 <MX_TIM10_Init>
		__HAL_TIM_SET_AUTORELOAD(&htim10,9999);
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000e8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8e:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim10);
 8000e90:	481a      	ldr	r0, [pc, #104]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000e92:	f006 fd6e 	bl	8007972 <HAL_TIM_Base_Start_IT>
		// At first all the alarms are disabled
		boot_system();
 8000e96:	f000 fe8b 	bl	8001bb0 <boot_system>
		count_rec = 5;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_UART_TxCpltCallback+0xc0>)
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	601a      	str	r2, [r3, #0]
		break;
 8000ea0:	e01d      	b.n	8000ede <HAL_UART_TxCpltCallback+0xb6>
	case 4: // User configuration loaded
		HAL_TIM_Base_Stop_IT(&htim10);
 8000ea2:	4816      	ldr	r0, [pc, #88]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000ea4:	f006 fd89 	bl	80079ba <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_UART_TxCpltCallback+0xd0>)
 8000eae:	f003 fd09 	bl	80048c4 <HAL_GPIO_WritePin>
		KeyPad_Init();
 8000eb2:	f000 faf7 	bl	80014a4 <KeyPad_Init>
		// Start TIM10 for system log
		MX_TIM10_Init();
 8000eb6:	f001 fcef 	bl	8002898 <MX_TIM10_Init>
		__HAL_TIM_SET_AUTORELOAD(&htim10,9999);
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000ec6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eca:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim10);
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_UART_TxCpltCallback+0xd4>)
 8000ece:	f006 fd50 	bl	8007972 <HAL_TIM_Base_Start_IT>
		// At first all the alarms are disabled
		boot_system();
 8000ed2:	f000 fe6d 	bl	8001bb0 <boot_system>
		count_rec = 5;
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_UART_TxCpltCallback+0xc0>)
 8000ed8:	2205      	movs	r2, #5
 8000eda:	601a      	str	r2, [r3, #0]
		break;
 8000edc:	bf00      	nop

	}
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000021c 	.word	0x2000021c
 8000eec:	200002f4 	.word	0x200002f4
 8000ef0:	2000062c 	.word	0x2000062c
 8000ef4:	20000370 	.word	0x20000370
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	2000048c 	.word	0x2000048c

08000f00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200b      	movs	r0, #11
 8000f44:	f002 fed3 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f002 feec 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2011      	movs	r0, #17
 8000f54:	f002 fecb 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f58:	2011      	movs	r0, #17
 8000f5a:	f002 fee4 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2038      	movs	r0, #56	; 0x38
 8000f64:	f002 fec3 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f68:	2038      	movs	r0, #56	; 0x38
 8000f6a:	f002 fedc 	bl	8003d26 <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <bcd2Dec>:
 * @fn          static uint8_t bcd2Dec ( uint8_t val )
 * @brief       Convert BCD to Decimal
 * @param[in]   val value to convert from BCD to Decimal
 * @return      res Converted value
 */
uint8_t bcd2Dec(uint8_t val) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t res = ((val / 16 * 10) + (val % 16));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	73fb      	strb	r3, [r7, #15]
	return res;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <dec2Bcd>:
 * @fn           static uint8_t dec2Bcd ( uint8_t val )
 * @brief        Convert Decimal to BCD
 * @param[in]    val value to convert from Decimal to BCD
 * @return       res Converted value
 */
uint8_t dec2Bcd(uint8_t val) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t res = ((val / 10 * 16) + (val % 10));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <dec2Bcd+0x44>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <dec2Bcd+0x44>)
 8000fce:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd2:	08d9      	lsrs	r1, r3, #3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4403      	add	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	return res;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	cccccccd 	.word	0xcccccccd

08000ff8 <ds1307rtc_init>:

int8_t ds1307rtc_init() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_IsDeviceReady(&hi2c1, DS1307_ADDRESS, MAX_RETRY,
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2203      	movs	r2, #3
 8001004:	21d0      	movs	r1, #208	; 0xd0
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <ds1307rtc_init+0x30>)
 8001008:	f004 f826 	bl	8005058 <HAL_I2C_IsDeviceReady>
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (returnValue != HAL_OK) {
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <ds1307rtc_init+0x24>
		return DS1307_ERR;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e000      	b.n	800101e <ds1307rtc_init+0x26>
	}
	return DS1307_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000384 	.word	0x20000384

0800102c <ds1307rtc_get_date_time>:
 * @brief        it takes rtc data, converts them in decimal and saves them in datetime structure
 * @param[in]    out_buff is a buffer where the data are stored
 * @return       the operation status
 */

int8_t ds1307rtc_get_date_time() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef returnValue;

	returnValue = HAL_I2C_Mem_Read_DMA(&hi2c1, DS1307_ADDRESS, DS1307_SECONDS,
 8001032:	2307      	movs	r3, #7
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <ds1307rtc_get_date_time+0x34>)
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2200      	movs	r2, #0
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <ds1307rtc_get_date_time+0x38>)
 8001042:	f003 febd 	bl	8004dc0 <HAL_I2C_Mem_Read_DMA>
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
			ADDRESS_SIZE, out_buff, DATA_SIZE);

	if (returnValue != HAL_OK) {
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <ds1307rtc_get_date_time+0x2a>
		return DS1307_IC2_ERR;
 8001050:	f06f 0301 	mvn.w	r3, #1
 8001054:	e000      	b.n	8001058 <ds1307rtc_get_date_time+0x2c>
	}

	return DS1307_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000374 	.word	0x20000374
 8001064:	20000384 	.word	0x20000384

08001068 <ds1307rtc_set_date_time>:
 * @brief        it takes datetime structure data, converts them in bcd and loads them in rtc
 * @param[in]    out_buff is a buffer where the data are stored
 * @return       the operation status
 */

int8_t ds1307rtc_set_date_time() {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef returnValue;
	uint8_t in_buff[7];

	in_buff[0] = dec2Bcd(datetime.seconds);
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff9c 	bl	8000fb0 <dec2Bcd>
 8001078:	4603      	mov	r3, r0
 800107a:	703b      	strb	r3, [r7, #0]
	in_buff[1] = dec2Bcd(datetime.minutes);
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff95 	bl	8000fb0 <dec2Bcd>
 8001086:	4603      	mov	r3, r0
 8001088:	707b      	strb	r3, [r7, #1]
	in_buff[2] = dec2Bcd(datetime.hours);
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 800108c:	789b      	ldrb	r3, [r3, #2]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff8e 	bl	8000fb0 <dec2Bcd>
 8001094:	4603      	mov	r3, r0
 8001096:	70bb      	strb	r3, [r7, #2]
	in_buff[3] = dec2Bcd(datetime.day);
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff87 	bl	8000fb0 <dec2Bcd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	70fb      	strb	r3, [r7, #3]
	in_buff[4] = dec2Bcd(datetime.date);
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 80010a8:	791b      	ldrb	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff80 	bl	8000fb0 <dec2Bcd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	713b      	strb	r3, [r7, #4]
	in_buff[5] = dec2Bcd(datetime.month);
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 80010b6:	795b      	ldrb	r3, [r3, #5]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff79 	bl	8000fb0 <dec2Bcd>
 80010be:	4603      	mov	r3, r0
 80010c0:	717b      	strb	r3, [r7, #5]
	in_buff[6] = dec2Bcd(datetime.year);
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <ds1307rtc_set_date_time+0xa0>)
 80010c4:	88db      	ldrh	r3, [r3, #6]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff71 	bl	8000fb0 <dec2Bcd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]

	returnValue = HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDRESS, DS1307_SECONDS,
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2307      	movs	r3, #7
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	463b      	mov	r3, r7
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2200      	movs	r2, #0
 80010e4:	21d0      	movs	r1, #208	; 0xd0
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <ds1307rtc_set_date_time+0xa4>)
 80010e8:	f003 fd70 	bl	8004bcc <HAL_I2C_Mem_Write>
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
	ADDRESS_SIZE, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);

	if (returnValue != HAL_OK) {
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <ds1307rtc_set_date_time+0x94>
		return DS1307_IC2_ERR;
 80010f6:	f06f 0301 	mvn.w	r3, #1
 80010fa:	e000      	b.n	80010fe <ds1307rtc_set_date_time+0x96>
	}

	return DS1307_OK;
 80010fc:	2300      	movs	r3, #0

}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000037c 	.word	0x2000037c
 800110c:	20000384 	.word	0x20000384

08001110 <HAL_I2C_MemTxCpltCallback>:

int8_t ds1307rtc_dispose() {
	return DS1307_OK;
}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	if (hi2c->Instance == I2C1) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d140      	bne.n	80011b8 <HAL_I2C_MemRxCpltCallback+0x94>

		datetime.seconds = bcd2Dec(out_buff[0]);
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff1e 	bl	8000f7c <bcd2Dec>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 8001146:	701a      	strb	r2, [r3, #0]
		datetime.minutes = bcd2Dec(out_buff[1]);
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff15 	bl	8000f7c <bcd2Dec>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 8001158:	705a      	strb	r2, [r3, #1]
		datetime.hours = bcd2Dec(out_buff[2]);
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff0c 	bl	8000f7c <bcd2Dec>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 800116a:	709a      	strb	r2, [r3, #2]
		datetime.day = bcd2Dec(out_buff[3]);
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff03 	bl	8000f7c <bcd2Dec>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 800117c:	70da      	strb	r2, [r3, #3]
		datetime.date = bcd2Dec(out_buff[4]);
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fefa 	bl	8000f7c <bcd2Dec>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 800118e:	711a      	strb	r2, [r3, #4]
		datetime.month = bcd2Dec(out_buff[5]);
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001192:	795b      	ldrb	r3, [r3, #5]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fef1 	bl	8000f7c <bcd2Dec>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 80011a0:	715a      	strb	r2, [r3, #5]
		datetime.year = bcd2Dec(out_buff[6]);
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MemRxCpltCallback+0xa0>)
 80011a4:	799b      	ldrb	r3, [r3, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fee8 	bl	8000f7c <bcd2Dec>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_I2C_MemRxCpltCallback+0xa4>)
 80011b2:	80da      	strh	r2, [r3, #6]

		// Start log after receiving date and time from rtc
		period_log();
 80011b4:	f001 f8f6 	bl	80023a4 <period_log>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	20000374 	.word	0x20000374
 80011c8:	2000037c 	.word	0x2000037c

080011cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <MX_GPIO_Init+0x164>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <MX_GPIO_Init+0x164>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MX_GPIO_Init+0x164>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <MX_GPIO_Init+0x164>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <MX_GPIO_Init+0x164>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <MX_GPIO_Init+0x164>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <MX_GPIO_Init+0x164>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a43      	ldr	r2, [pc, #268]	; (8001330 <MX_GPIO_Init+0x164>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <MX_GPIO_Init+0x164>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7148 	mov.w	r1, #800	; 0x320
 800123c:	483d      	ldr	r0, [pc, #244]	; (8001334 <MX_GPIO_Init+0x168>)
 800123e:	f003 fb41 	bl	80048c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	483c      	ldr	r0, [pc, #240]	; (8001338 <MX_GPIO_Init+0x16c>)
 8001248:	f003 fb3c 	bl	80048c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4 
 800124c:	2200      	movs	r2, #0
 800124e:	f24a 0134 	movw	r1, #41012	; 0xa034
 8001252:	483a      	ldr	r0, [pc, #232]	; (800133c <MX_GPIO_Init+0x170>)
 8001254:	f003 fb36 	bl	80048c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001258:	f44f 7348 	mov.w	r3, #800	; 0x320
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4830      	ldr	r0, [pc, #192]	; (8001334 <MX_GPIO_Init+0x168>)
 8001272:	f003 f98d 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001276:	2310      	movs	r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <MX_GPIO_Init+0x16c>)
 800128e:	f003 f97f 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001292:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	4824      	ldr	r0, [pc, #144]	; (8001338 <MX_GPIO_Init+0x16c>)
 80012a8:	f003 f972 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB15 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4 
 80012ac:	f24a 0334 	movw	r3, #41012	; 0xa034
 80012b0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	481d      	ldr	r0, [pc, #116]	; (800133c <MX_GPIO_Init+0x170>)
 80012c6:	f003 f963 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <MX_GPIO_Init+0x170>)
 80012e0:	f003 f956 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_GPIO_Init+0x168>)
 80012fa:	f003 f949 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fe:	2308      	movs	r3, #8
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_GPIO_Init+0x174>)
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <MX_GPIO_Init+0x170>)
 8001312:	f003 f93d 	bl	8004590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2009      	movs	r0, #9
 800131c:	f002 fce7 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001320:	2009      	movs	r0, #9
 8001322:	f002 fd00 	bl	8003d26 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020800 	.word	0x40020800
 800133c:	40020400 	.word	0x40020400
 8001340:	10110000 	.word	0x10110000

08001344 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C1_Init+0x50>)
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_I2C1_Init+0x54>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C1_Init+0x50>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_I2C1_Init+0x58>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_I2C1_Init+0x50>)
 8001362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_I2C1_Init+0x50>)
 8001382:	f003 faeb 	bl	800495c <HAL_I2C_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800138c:	f000 fb56 	bl	8001a3c <Error_Handler>
  }

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000384 	.word	0x20000384
 8001398:	40005400 	.word	0x40005400
 800139c:	000186a0 	.word	0x000186a0

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_I2C_MspInit+0xf0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d161      	bne.n	8001486 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013de:	23c0      	movs	r3, #192	; 0xc0
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2312      	movs	r3, #18
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ee:	2304      	movs	r3, #4
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4827      	ldr	r0, [pc, #156]	; (8001498 <HAL_I2C_MspInit+0xf8>)
 80013fa:	f003 f8c9 	bl	8004590 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 8001408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_I2C_MspInit+0xf4>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_I2C_MspInit+0x100>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001426:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800145c:	f002 fc7e 	bl	8003d5c <HAL_DMA_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001466:	f000 fae9 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_I2C_MspInit+0xfc>)
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_I2C_MspInit+0xfc>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201f      	movs	r0, #31
 800147c:	f002 fc37 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001480:	201f      	movs	r0, #31
 8001482:	f002 fc50 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	200003d8 	.word	0x200003d8
 80014a0:	40026010 	.word	0x40026010

080014a4 <KeyPad_Init>:
/*
 * Initializes the keyboard structure, including its size and
 * defining the structure of the GPIO Pins on the board.
 */

void KeyPad_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;
	KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <KeyPad_Init+0xb4>)
 80014ac:	2204      	movs	r2, #4
 80014ae:	701a      	strb	r2, [r3, #0]
	KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <KeyPad_Init+0xb4>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < KeyPad.ColumnSize; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
 80014ba:	e022      	b.n	8001502 <KeyPad_Init+0x5e>
		gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
		gpio.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
		gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
		gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	4a24      	ldr	r2, [pc, #144]	; (800155c <KeyPad_Init+0xb8>)
 80014cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_Init((GPIO_TypeDef*) _KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <KeyPad_Init+0xbc>)
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	463a      	mov	r2, r7
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f856 	bl	8004590 <HAL_GPIO_Init>
		HAL_GPIO_WritePin((GPIO_TypeDef*) _KEYPAD_COLUMN_GPIO_PORT[i],
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <KeyPad_Init+0xbc>)
 80014e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <KeyPad_Init+0xb8>)
 80014f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	f003 f9e4 	bl	80048c4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < KeyPad.ColumnSize; i++) {
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <KeyPad_Init+0xb4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	7dfa      	ldrb	r2, [r7, #23]
 8001508:	429a      	cmp	r2, r3
 800150a:	d3d7      	bcc.n	80014bc <KeyPad_Init+0x18>
				_KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
	}
	for (uint8_t i = 0; i < KeyPad.RowSize; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	75bb      	strb	r3, [r7, #22]
 8001510:	e016      	b.n	8001540 <KeyPad_Init+0x9c>
		gpio.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
		gpio.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
		gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
		gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <KeyPad_Init+0xc0>)
 8001522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001526:	603b      	str	r3, [r7, #0]
		HAL_GPIO_Init((GPIO_TypeDef*) _KEYPAD_ROW_GPIO_PORT[i], &gpio);
 8001528:	7dbb      	ldrb	r3, [r7, #22]
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <KeyPad_Init+0xc4>)
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	463a      	mov	r2, r7
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f82b 	bl	8004590 <HAL_GPIO_Init>
	for (uint8_t i = 0; i < KeyPad.RowSize; i++) {
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	3301      	adds	r3, #1
 800153e:	75bb      	strb	r3, [r7, #22]
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <KeyPad_Init+0xb4>)
 8001542:	785b      	ldrb	r3, [r3, #1]
 8001544:	7dba      	ldrb	r2, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3e3      	bcc.n	8001512 <KeyPad_Init+0x6e>
	}
	keypad_active = true;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <KeyPad_Init+0xc8>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000438 	.word	0x20000438
 800155c:	0800a830 	.word	0x0800a830
 8001560:	20000000 	.word	0x20000000
 8001564:	0800a838 	.word	0x0800a838
 8001568:	20000010 	.word	0x20000010
 800156c:	20000220 	.word	0x20000220

08001570 <KeyPad_Scan>:
//#############################################################################################
uint16_t KeyPad_Scan(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	uint16_t key = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	807b      	strh	r3, [r7, #2]
	for (uint8_t c = 0; c < KeyPad.ColumnSize; c++) {
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	e07b      	b.n	8001678 <KeyPad_Scan+0x108>
		for (uint8_t i = 0; i < KeyPad.ColumnSize; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	71bb      	strb	r3, [r7, #6]
 8001584:	e00e      	b.n	80015a4 <KeyPad_Scan+0x34>
			HAL_GPIO_WritePin((GPIO_TypeDef*) _KEYPAD_COLUMN_GPIO_PORT[i],
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	4a41      	ldr	r2, [pc, #260]	; (8001690 <KeyPad_Scan+0x120>)
 800158a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	4a40      	ldr	r2, [pc, #256]	; (8001694 <KeyPad_Scan+0x124>)
 8001592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	f003 f993 	bl	80048c4 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < KeyPad.ColumnSize; i++)
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	3301      	adds	r3, #1
 80015a2:	71bb      	strb	r3, [r7, #6]
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <KeyPad_Scan+0x128>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	79ba      	ldrb	r2, [r7, #6]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3eb      	bcc.n	8001586 <KeyPad_Scan+0x16>
					_KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
		HAL_GPIO_WritePin((GPIO_TypeDef*) _KEYPAD_COLUMN_GPIO_PORT[c],
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4a37      	ldr	r2, [pc, #220]	; (8001690 <KeyPad_Scan+0x120>)
 80015b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a36      	ldr	r2, [pc, #216]	; (8001694 <KeyPad_Scan+0x124>)
 80015ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	f003 f97f 	bl	80048c4 <HAL_GPIO_WritePin>
				_KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
		_KEYPAD_DELAY(5);
 80015c6:	2005      	movs	r0, #5
 80015c8:	f001 fd2a 	bl	8003020 <HAL_Delay>
		for (uint8_t r = 0; r < KeyPad.RowSize; r++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	717b      	strb	r3, [r7, #5]
 80015d0:	e04a      	b.n	8001668 <KeyPad_Scan+0xf8>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) _KEYPAD_ROW_GPIO_PORT[r],
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	4a31      	ldr	r2, [pc, #196]	; (800169c <KeyPad_Scan+0x12c>)
 80015d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015da:	797b      	ldrb	r3, [r7, #5]
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <KeyPad_Scan+0x130>)
 80015de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e2:	4619      	mov	r1, r3
 80015e4:	f003 f956 	bl	8004894 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d139      	bne.n	8001662 <KeyPad_Scan+0xf2>
					_KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET) {
				_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 80015ee:	2014      	movs	r0, #20
 80015f0:	f001 fd16 	bl	8003020 <HAL_Delay>
				if (HAL_GPIO_ReadPin((GPIO_TypeDef*) _KEYPAD_ROW_GPIO_PORT[r],
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <KeyPad_Scan+0x12c>)
 80015f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <KeyPad_Scan+0x130>)
 8001600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001604:	4619      	mov	r1, r3
 8001606:	f003 f945 	bl	8004894 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d128      	bne.n	8001662 <KeyPad_Scan+0xf2>
						_KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET) {
					key |= 1 << c;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2201      	movs	r2, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800161e:	4313      	orrs	r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	807b      	strh	r3, [r7, #2]
					key |= 1 << (r + 8);
 8001624:	797b      	ldrb	r3, [r7, #5]
 8001626:	3308      	adds	r3, #8
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	b21a      	sxth	r2, r3
 8001630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	807b      	strh	r3, [r7, #2]
					while (HAL_GPIO_ReadPin((GPIO_TypeDef*) _KEYPAD_ROW_GPIO_PORT[r], 
 800163a:	e002      	b.n	8001642 <KeyPad_Scan+0xd2>
						_KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
						_KEYPAD_DELAY(5);
 800163c:	2005      	movs	r0, #5
 800163e:	f001 fcef 	bl	8003020 <HAL_Delay>
					while (HAL_GPIO_ReadPin((GPIO_TypeDef*) _KEYPAD_ROW_GPIO_PORT[r], 
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <KeyPad_Scan+0x12c>)
 8001646:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <KeyPad_Scan+0x130>)
 800164e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001652:	4619      	mov	r1, r3
 8001654:	f003 f91e 	bl	8004894 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ee      	beq.n	800163c <KeyPad_Scan+0xcc>
					return key;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	e011      	b.n	8001686 <KeyPad_Scan+0x116>
		for (uint8_t r = 0; r < KeyPad.RowSize; r++) {
 8001662:	797b      	ldrb	r3, [r7, #5]
 8001664:	3301      	adds	r3, #1
 8001666:	717b      	strb	r3, [r7, #5]
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <KeyPad_Scan+0x128>)
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	797a      	ldrb	r2, [r7, #5]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3af      	bcc.n	80015d2 <KeyPad_Scan+0x62>
	for (uint8_t c = 0; c < KeyPad.ColumnSize; c++) {
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	3301      	adds	r3, #1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <KeyPad_Scan+0x128>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	429a      	cmp	r2, r3
 8001680:	f4ff af7e 	bcc.w	8001580 <KeyPad_Scan+0x10>
				}
			}
		}
	}
	return key;
 8001684:	887b      	ldrh	r3, [r7, #2]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000
 8001694:	0800a830 	.word	0x0800a830
 8001698:	20000438 	.word	0x20000438
 800169c:	20000010 	.word	0x20000010
 80016a0:	0800a838 	.word	0x0800a838

080016a4 <KeyPad_WaitForKey>:
 * This function returns the hexadecimal value of the button pressed
 * on the keypad, scanning all rows and columns of it, searching for
 * the high value corresponding to the button
 */

uint16_t KeyPad_WaitForKey(uint32_t Timeout_ms) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	uint16_t keyRead;
	while (Timeout_ms == 0) {
 80016ac:	e00e      	b.n	80016cc <KeyPad_WaitForKey+0x28>
		keyRead = KeyPad_Scan();
 80016ae:	f7ff ff5f 	bl	8001570 <KeyPad_Scan>
 80016b2:	4603      	mov	r3, r0
 80016b4:	817b      	strh	r3, [r7, #10]
		if (keyRead != 0) {
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <KeyPad_WaitForKey+0x22>
			KeyPad.LastKey = keyRead;
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <KeyPad_WaitForKey+0x74>)
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	8053      	strh	r3, [r2, #2]
			return keyRead;
 80016c2:	897b      	ldrh	r3, [r7, #10]
 80016c4:	e024      	b.n	8001710 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 80016c6:	2014      	movs	r0, #20
 80016c8:	f001 fcaa 	bl	8003020 <HAL_Delay>
	while (Timeout_ms == 0) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ed      	beq.n	80016ae <KeyPad_WaitForKey+0xa>
	}
	uint32_t StartTime = HAL_GetTick();
 80016d2:	f001 fc99 	bl	8003008 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - StartTime < Timeout_ms) {
 80016d8:	e00e      	b.n	80016f8 <KeyPad_WaitForKey+0x54>
		keyRead = KeyPad_Scan();
 80016da:	f7ff ff49 	bl	8001570 <KeyPad_Scan>
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
		if (keyRead != 0) {
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <KeyPad_WaitForKey+0x4e>
			KeyPad.LastKey = keyRead;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <KeyPad_WaitForKey+0x74>)
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	8053      	strh	r3, [r2, #2]
			return keyRead;
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	e00e      	b.n	8001710 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 80016f2:	2014      	movs	r0, #20
 80016f4:	f001 fc94 	bl	8003020 <HAL_Delay>
	while (HAL_GetTick() - StartTime < Timeout_ms) {
 80016f8:	f001 fc86 	bl	8003008 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8e8      	bhi.n	80016da <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey = 0;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <KeyPad_WaitForKey+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	805a      	strh	r2, [r3, #2]
	return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000438 	.word	0x20000438

0800171c <buzz>:
* @brief        This function beeps whenever a key on the keypad is pressed
* @param[in]    PIN PB4
* @return       void function
*/

void buzz() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2110      	movs	r1, #16
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <buzz+0x24>)
 8001726:	f003 f8cd 	bl	80048c4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800172a:	2014      	movs	r0, #20
 800172c:	f001 fc78 	bl	8003020 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2110      	movs	r1, #16
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <buzz+0x24>)
 8001736:	f003 f8c5 	bl	80048c4 <HAL_GPIO_WritePin>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020400 	.word	0x40020400

08001744 <key_pad_get_char>:
* 				character pressed on the keypad
* @brief        This function calls KeyPad_WaitForKey(Timeout_ms)
* @return       the character pressed on the keypad
*/

char key_pad_get_char(uint32_t Timeout_ms) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	switch (KeyPad_WaitForKey(Timeout_ms)) {
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffa9 	bl	80016a4 <KeyPad_WaitForKey>
 8001752:	4603      	mov	r3, r0
 8001754:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8001758:	f000 8086 	beq.w	8001868 <key_pad_get_char+0x124>
 800175c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8001760:	dc23      	bgt.n	80017aa <key_pad_get_char+0x66>
 8001762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001766:	d06b      	beq.n	8001840 <key_pad_get_char+0xfc>
 8001768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800176c:	dc09      	bgt.n	8001782 <key_pad_get_char+0x3e>
 800176e:	f240 1201 	movw	r2, #257	; 0x101
 8001772:	4293      	cmp	r3, r2
 8001774:	d044      	beq.n	8001800 <key_pad_get_char+0xbc>
 8001776:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800177a:	d051      	beq.n	8001820 <key_pad_get_char+0xdc>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03d      	beq.n	80017fc <key_pad_get_char+0xb8>
 8001780:	e07e      	b.n	8001880 <key_pad_get_char+0x13c>
 8001782:	f240 2201 	movw	r2, #513	; 0x201
 8001786:	4293      	cmp	r3, r2
 8001788:	d03e      	beq.n	8001808 <key_pad_get_char+0xc4>
 800178a:	f240 2201 	movw	r2, #513	; 0x201
 800178e:	4293      	cmp	r3, r2
 8001790:	dc03      	bgt.n	800179a <key_pad_get_char+0x56>
 8001792:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001796:	d063      	beq.n	8001860 <key_pad_get_char+0x11c>
 8001798:	e072      	b.n	8001880 <key_pad_get_char+0x13c>
 800179a:	f240 2202 	movw	r2, #514	; 0x202
 800179e:	4293      	cmp	r3, r2
 80017a0:	d042      	beq.n	8001828 <key_pad_get_char+0xe4>
 80017a2:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80017a6:	d04f      	beq.n	8001848 <key_pad_get_char+0x104>
 80017a8:	e06a      	b.n	8001880 <key_pad_get_char+0x13c>
 80017aa:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80017ae:	d05f      	beq.n	8001870 <key_pad_get_char+0x12c>
 80017b0:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80017b4:	dc0c      	bgt.n	80017d0 <key_pad_get_char+0x8c>
 80017b6:	f240 4202 	movw	r2, #1026	; 0x402
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d038      	beq.n	8001830 <key_pad_get_char+0xec>
 80017be:	f240 4204 	movw	r2, #1028	; 0x404
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d044      	beq.n	8001850 <key_pad_get_char+0x10c>
 80017c6:	f240 4201 	movw	r2, #1025	; 0x401
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d020      	beq.n	8001810 <key_pad_get_char+0xcc>
 80017ce:	e057      	b.n	8001880 <key_pad_get_char+0x13c>
 80017d0:	f640 0202 	movw	r2, #2050	; 0x802
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02f      	beq.n	8001838 <key_pad_get_char+0xf4>
 80017d8:	f640 0202 	movw	r2, #2050	; 0x802
 80017dc:	4293      	cmp	r3, r2
 80017de:	dc04      	bgt.n	80017ea <key_pad_get_char+0xa6>
 80017e0:	f640 0201 	movw	r2, #2049	; 0x801
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d017      	beq.n	8001818 <key_pad_get_char+0xd4>
 80017e8:	e04a      	b.n	8001880 <key_pad_get_char+0x13c>
 80017ea:	f640 0204 	movw	r2, #2052	; 0x804
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d032      	beq.n	8001858 <key_pad_get_char+0x114>
 80017f2:	f640 0208 	movw	r2, #2056	; 0x808
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d03e      	beq.n	8001878 <key_pad_get_char+0x134>
 80017fa:	e041      	b.n	8001880 <key_pad_get_char+0x13c>
		case 0x0000:
			return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e040      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0101:
			buzz();
 8001800:	f7ff ff8c 	bl	800171c <buzz>
			return KEYPAD_VALUE_1;
 8001804:	2331      	movs	r3, #49	; 0x31
 8001806:	e03c      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0201:
			buzz();
 8001808:	f7ff ff88 	bl	800171c <buzz>
			return KEYPAD_VALUE_2;
 800180c:	2332      	movs	r3, #50	; 0x32
 800180e:	e038      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0401:
			buzz();
 8001810:	f7ff ff84 	bl	800171c <buzz>
			return KEYPAD_VALUE_3;
 8001814:	2333      	movs	r3, #51	; 0x33
 8001816:	e034      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0801:
			buzz();
 8001818:	f7ff ff80 	bl	800171c <buzz>
			return KEYPAD_VALUE_A;
 800181c:	2341      	movs	r3, #65	; 0x41
 800181e:	e030      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0102:
			buzz();
 8001820:	f7ff ff7c 	bl	800171c <buzz>
			return KEYPAD_VALUE_4;
 8001824:	2334      	movs	r3, #52	; 0x34
 8001826:	e02c      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0202:
			buzz();
 8001828:	f7ff ff78 	bl	800171c <buzz>
			return KEYPAD_VALUE_5;
 800182c:	2335      	movs	r3, #53	; 0x35
 800182e:	e028      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0402:
			buzz();
 8001830:	f7ff ff74 	bl	800171c <buzz>
			return KEYPAD_VALUE_6;
 8001834:	2336      	movs	r3, #54	; 0x36
 8001836:	e024      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0802:
			buzz();
 8001838:	f7ff ff70 	bl	800171c <buzz>
			return KEYPAD_VALUE_B;
 800183c:	2342      	movs	r3, #66	; 0x42
 800183e:	e020      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0104:
			buzz();
 8001840:	f7ff ff6c 	bl	800171c <buzz>
			return KEYPAD_VALUE_7;
 8001844:	2337      	movs	r3, #55	; 0x37
 8001846:	e01c      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0204:
			buzz();
 8001848:	f7ff ff68 	bl	800171c <buzz>
			return KEYPAD_VALUE_8;
 800184c:	2338      	movs	r3, #56	; 0x38
 800184e:	e018      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0404:
			buzz();
 8001850:	f7ff ff64 	bl	800171c <buzz>
			return KEYPAD_VALUE_9;
 8001854:	2339      	movs	r3, #57	; 0x39
 8001856:	e014      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0804:
			buzz();
 8001858:	f7ff ff60 	bl	800171c <buzz>
			return KEYPAD_VALUE_C;
 800185c:	2343      	movs	r3, #67	; 0x43
 800185e:	e010      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0108:
			buzz();
 8001860:	f7ff ff5c 	bl	800171c <buzz>
			return KEYPAD_VALUE_STAR;
 8001864:	232a      	movs	r3, #42	; 0x2a
 8001866:	e00c      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0208:
			buzz();
 8001868:	f7ff ff58 	bl	800171c <buzz>
			return KEYPAD_VALUE_0;
 800186c:	2330      	movs	r3, #48	; 0x30
 800186e:	e008      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0408:
			buzz();
 8001870:	f7ff ff54 	bl	800171c <buzz>
			return KEYPAD_VALUE_HASH;
 8001874:	2323      	movs	r3, #35	; 0x23
 8001876:	e004      	b.n	8001882 <key_pad_get_char+0x13e>
		case 0x0808:
			buzz();
 8001878:	f7ff ff50 	bl	800171c <buzz>
			return KEYPAD_VALUE_D;
 800187c:	2344      	movs	r3, #68	; 0x44
 800187e:	e000      	b.n	8001882 <key_pad_get_char+0x13e>
		default:
			return KEYPAD_NO_PRESSED;
 8001880:	2300      	movs	r3, #0
	}
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <key_pad_get_pin>:
* @param[in]    bool is_num is used to check if the pin is a number, char val is the character pressed on the keypad
* 				char *new_pin is the pin typed by user
* @return       pin typed by user
*/

char* key_pad_get_pin() {
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
	bool is_num = false;
 8001890:	2300      	movs	r3, #0
 8001892:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
	char val, *new_pin = malloc(sizeof (char) * PIN_SIZE);
 8001898:	2004      	movs	r0, #4
 800189a:	f008 f839 	bl	8009910 <malloc>
 800189e:	4603      	mov	r3, r0
 80018a0:	607b      	str	r3, [r7, #4]
	do {
		val = key_pad_get_char(BUTTON_TIMEOUT);
 80018a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a6:	f7ff ff4d 	bl	8001744 <key_pad_get_char>
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
		if (val != 0) {
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d018      	beq.n	80018e6 <key_pad_get_pin+0x5c>
			is_num = (val >= KEYPAD_VALUE_0 && val <= KEYPAD_VALUE_9);
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b2f      	cmp	r3, #47	; 0x2f
 80018b8:	d904      	bls.n	80018c4 <key_pad_get_pin+0x3a>
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	2b39      	cmp	r3, #57	; 0x39
 80018be:	d801      	bhi.n	80018c4 <key_pad_get_pin+0x3a>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <key_pad_get_pin+0x3c>
 80018c4:	2300      	movs	r3, #0
 80018c6:	72fb      	strb	r3, [r7, #11]
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	72fb      	strb	r3, [r7, #11]
			if (is_num) {
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <key_pad_get_pin+0x5c>
				new_pin[i] = val;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	701a      	strb	r2, [r3, #0]
				i++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
			}
		}
	} while (i < PIN_SIZE);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	ddda      	ble.n	80018a2 <key_pad_get_pin+0x18>
	new_pin[4] = '\0';
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	return new_pin;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f001 fb1a 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f82e 	bl	8001968 <SystemClock_Config>
  peripherals_init();
 800190c:	f000 f810 	bl	8001930 <peripherals_init>
  /* USER CODE END SysInit */


  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim10);
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <main+0x28>)
 8001912:	f006 f82e 	bl	8007972 <HAL_TIM_Base_Start_IT>
	user_configuration();
 8001916:	f7ff f8c5 	bl	8000aa4 <user_configuration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
    /* USER CODE END WHILE */
		if(keypad_active)
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <main+0x2c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0fb      	beq.n	800191a <main+0x1a>
			start_sequence();
 8001922:	f000 f893 	bl	8001a4c <start_sequence>
		if(keypad_active)
 8001926:	e7f8      	b.n	800191a <main+0x1a>
 8001928:	2000048c 	.word	0x2000048c
 800192c:	20000220 	.word	0x20000220

08001930 <peripherals_init>:
    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

void peripherals_init(void){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	/* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001934:	f7ff fc4a 	bl	80011cc <MX_GPIO_Init>
	  MX_DMA_Init();
 8001938:	f7ff fae2 	bl	8000f00 <MX_DMA_Init>
	  MX_ADC1_Init();
 800193c:	f7fe fe38 	bl	80005b0 <MX_ADC1_Init>
	  MX_I2C1_Init();
 8001940:	f7ff fd00 	bl	8001344 <MX_I2C1_Init>
	  MX_TIM5_Init();
 8001944:	f000 ff14 	bl	8002770 <MX_TIM5_Init>
	  MX_TIM9_Init();
 8001948:	f000 ff66 	bl	8002818 <MX_TIM9_Init>
	  MX_TIM10_Init();
 800194c:	f000 ffa4 	bl	8002898 <MX_TIM10_Init>
	  MX_TIM11_Init();
 8001950:	f000 ffcc 	bl	80028ec <MX_TIM11_Init>
	  MX_USART2_UART_Init();
 8001954:	f001 fa1c 	bl	8002d90 <MX_USART2_UART_Init>
	  MX_TIM3_Init();
 8001958:	f000 fe40 	bl	80025dc <MX_TIM3_Init>
	  MX_TIM4_Init();
 800195c:	f000 feb4 	bl	80026c8 <MX_TIM4_Init>
	  ds1307rtc_init();
 8001960:	f7ff fb4a 	bl	8000ff8 <ds1307rtc_init>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f007 ffef 	bl	800995a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <SystemClock_Config+0xcc>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <SystemClock_Config+0xcc>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <SystemClock_Config+0xcc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <SystemClock_Config+0xd0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <SystemClock_Config+0xd0>)
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <SystemClock_Config+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d0:	2310      	movs	r3, #16
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d4:	2302      	movs	r3, #2
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80019e0:	2354      	movs	r3, #84	; 0x54
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e8:	2304      	movs	r3, #4
 80019ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 fb57 	bl	80070a4 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019fc:	f000 f81e 	bl	8001a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fdb2 	bl	8007584 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a26:	f000 f809 	bl	8001a3c <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <start_sequence>:
*				(a letter and  one between "#" and " * "). If the last two symbols are valid, it calls setOrReset function
* @param[in]    key_pad_get_char returns the character pressed on the keypad
* @return       void function
*/

void start_sequence() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	char *pin_user;

	if (key_pad_get_char(200) == KEYPAD_VALUE_HASH) {
 8001a52:	20c8      	movs	r0, #200	; 0xc8
 8001a54:	f7ff fe76 	bl	8001744 <key_pad_get_char>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b23      	cmp	r3, #35	; 0x23
 8001a5c:	d119      	bne.n	8001a92 <start_sequence+0x46>
		command_accepted(COMMAND_ACCEPTED);
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <start_sequence+0x50>)
 8001a60:	f7fe ff8e 	bl	8000980 <command_accepted>
		pin_user = key_pad_get_pin();
 8001a64:	f7ff ff11 	bl	800188a <key_pad_get_pin>
 8001a68:	6078      	str	r0, [r7, #4]
		if (matchPin(pin_user, system_config.pin)) {
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <start_sequence+0x54>)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe ffaf 	bl	80009d0 <matchPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <start_sequence+0x40>
			/* WAITING FOR A B C D */
			getSymbols();
 8001a78:	f000 f816 	bl	8001aa8 <getSymbols>
			if (checkSymbol()) {
 8001a7c:	f000 f856 	bl	8001b2c <checkSymbol>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <start_sequence+0x46>
				setOrReset();
 8001a86:	f000 f8ab 	bl	8001be0 <setOrReset>
			}
		}else
			user_pin_rejected(USER_PIN_REJECTED);
	}
}
 8001a8a:	e002      	b.n	8001a92 <start_sequence+0x46>
			user_pin_rejected(USER_PIN_REJECTED);
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <start_sequence+0x58>)
 8001a8e:	f7fe ff8b 	bl	80009a8 <user_pin_rejected>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800a68c 	.word	0x0800a68c
 8001aa0:	200002e0 	.word	0x200002e0
 8001aa4:	0800a6a0 	.word	0x0800a6a0

08001aa8 <getSymbols>:
* @brief        it takes the last two symbols of the sequence inserted by the user calling key_pad_get_char function
* @param[in]    abcd buffer to store the last two symbols of the sequence
* @return       void function
*/

void getSymbols() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	int i = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
	clear_vector();
 8001ab2:	f000 f863 	bl	8001b7c <clear_vector>

	do {
		abcd[i] = key_pad_get_char(0);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fe44 	bl	8001744 <key_pad_get_char>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <getSymbols+0x80>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
		if (i == 0) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <getSymbols+0x40>
			if (abcd[i] == '\0') {
 8001ad0:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <getSymbols+0x80>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <getSymbols+0x3a>
				i = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	e002      	b.n	8001ae8 <getSymbols+0x40>
			} else {
				i++;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
			}
		}
		if (i == 1) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d110      	bne.n	8001b10 <getSymbols+0x68>
			if (abcd[i] == '\0') {
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <getSymbols+0x80>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <getSymbols+0x58>
				i = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e007      	b.n	8001b10 <getSymbols+0x68>
			} else {
				i++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
				abcd[i] = '\0';
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <getSymbols+0x80>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
			}
		}
	} while (abcd[0] == '\0' || abcd[1] == '\0');
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <getSymbols+0x80>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ce      	beq.n	8001ab6 <getSymbols+0xe>
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <getSymbols+0x80>)
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ca      	beq.n	8001ab6 <getSymbols+0xe>

}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000444 	.word	0x20000444

08001b2c <checkSymbol>:
* @brief        it checks if last two symbols of the sequence are valid or not
* @param[in]    abcd buffer
* @return       true if last two symbols are correct, false otherwise
*/

bool checkSymbol() {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	if ((abcd[1] != '#' && abcd[1] != '*')
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <checkSymbol+0x48>)
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	2b23      	cmp	r3, #35	; 0x23
 8001b36:	d003      	beq.n	8001b40 <checkSymbol+0x14>
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <checkSymbol+0x48>)
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001b3e:	d10f      	bne.n	8001b60 <checkSymbol+0x34>
			|| (abcd[0] != 'A' && abcd[0] != 'B'
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <checkSymbol+0x48>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b41      	cmp	r3, #65	; 0x41
 8001b46:	d012      	beq.n	8001b6e <checkSymbol+0x42>
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <checkSymbol+0x48>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b42      	cmp	r3, #66	; 0x42
 8001b4e:	d00e      	beq.n	8001b6e <checkSymbol+0x42>
					&& abcd[0] != 'C'
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <checkSymbol+0x48>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b43      	cmp	r3, #67	; 0x43
 8001b56:	d00a      	beq.n	8001b6e <checkSymbol+0x42>
					&& abcd[0] != 'D')) {
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <checkSymbol+0x48>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b44      	cmp	r3, #68	; 0x44
 8001b5e:	d006      	beq.n	8001b6e <checkSymbol+0x42>
		clear_vector();
 8001b60:	f000 f80c 	bl	8001b7c <clear_vector>
		command_rejected(COMMAND_REJECTED);
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <checkSymbol+0x4c>)
 8001b66:	f7fe fef7 	bl	8000958 <command_rejected>
		return false;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <checkSymbol+0x44>
	}
	return true;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000444 	.word	0x20000444
 8001b78:	0800a6b8 	.word	0x0800a6b8

08001b7c <clear_vector>:
* @brief        it cleans the vector at the end of the sequence in order to be reused
* @param[in]    abcd buffer
* @return       void function
*/

void clear_vector(void) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	e007      	b.n	8001b98 <clear_vector+0x1c>
		abcd[i] = '\0';
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <clear_vector+0x30>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3301      	adds	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	ddf4      	ble.n	8001b88 <clear_vector+0xc>
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000444 	.word	0x20000444

08001bb0 <boot_system>:
* @brief        set the system status (all disable) when it is activated
* @param[in]    all attributes of system_status structure
* @return       void function
*/

void boot_system() {
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	system_status.area_active = false;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <boot_system+0x2c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
	system_status.barrier_active = false;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <boot_system+0x2c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	705a      	strb	r2, [r3, #1]
	system_status.area_alarmed = false;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <boot_system+0x2c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	70da      	strb	r2, [r3, #3]
	system_status.barrier_alarmed = false;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <boot_system+0x2c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]
	system_status.system_active = false;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <boot_system+0x2c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	709a      	strb	r2, [r3, #2]
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	2000043c 	.word	0x2000043c

08001be0 <setOrReset>:
* @param[in]    all attributes of system_status structure, abcd buffer and
* 				correct_sequence to indicate whether the sequence entered is valid or not
* @return       void function
*/

void setOrReset(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	bool correct_sequence = false;
 8001be6:	2300      	movs	r3, #0
 8001be8:	71fb      	strb	r3, [r7, #7]

	if (system_status.system_active) {
 8001bea:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <setOrReset+0x244>)
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 809a 	beq.w	8001d28 <setOrReset+0x148>
		if (abcd[1] == '#') {
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <setOrReset+0x248>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b23      	cmp	r3, #35	; 0x23
 8001bfa:	d144      	bne.n	8001c86 <setOrReset+0xa6>
			switch (abcd[0]) {
 8001bfc:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <setOrReset+0x248>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b42      	cmp	r3, #66	; 0x42
 8001c02:	d015      	beq.n	8001c30 <setOrReset+0x50>
 8001c04:	2b43      	cmp	r3, #67	; 0x43
 8001c06:	d025      	beq.n	8001c54 <setOrReset+0x74>
 8001c08:	2b41      	cmp	r3, #65	; 0x41
 8001c0a:	d13c      	bne.n	8001c86 <setOrReset+0xa6>
			case 'A':
				if (system_status.area_active)
 8001c0c:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <setOrReset+0x244>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <setOrReset+0x3a>
					correct_sequence = false;
 8001c14:	2300      	movs	r3, #0
 8001c16:	71fb      	strb	r3, [r7, #7]
				else {
					system_status.area_active = true;
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
					correct_sequence = true;
				}
				break;
 8001c18:	e035      	b.n	8001c86 <setOrReset+0xa6>
					system_status.area_active = true;
 8001c1a:	4b82      	ldr	r3, [pc, #520]	; (8001e24 <setOrReset+0x244>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2108      	movs	r1, #8
 8001c24:	4881      	ldr	r0, [pc, #516]	; (8001e2c <setOrReset+0x24c>)
 8001c26:	f002 fe4d 	bl	80048c4 <HAL_GPIO_WritePin>
					correct_sequence = true;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
				break;
 8001c2e:	e02a      	b.n	8001c86 <setOrReset+0xa6>

			case 'B':
				if (system_status.barrier_active){
 8001c30:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <setOrReset+0x244>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <setOrReset+0x5e>
					correct_sequence = false;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	71fb      	strb	r3, [r7, #7]
					system_status.barrier_active = true;
					// Turn on the laser
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
					correct_sequence = true;
				}
				break;
 8001c3c:	e023      	b.n	8001c86 <setOrReset+0xa6>
					system_status.barrier_active = true;
 8001c3e:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <setOrReset+0x244>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	2120      	movs	r1, #32
 8001c48:	4878      	ldr	r0, [pc, #480]	; (8001e2c <setOrReset+0x24c>)
 8001c4a:	f002 fe3b 	bl	80048c4 <HAL_GPIO_WritePin>
					correct_sequence = true;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
				break;
 8001c52:	e018      	b.n	8001c86 <setOrReset+0xa6>

			case 'C':
				if (system_status.barrier_active && system_status.area_active)
 8001c54:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <setOrReset+0x244>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <setOrReset+0x8a>
 8001c5c:	4b71      	ldr	r3, [pc, #452]	; (8001e24 <setOrReset+0x244>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <setOrReset+0x8a>
					correct_sequence = false;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
					system_status.barrier_active = true;
					// Turn on the laser
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
					correct_sequence = true;
				}
				break;
 8001c68:	e00c      	b.n	8001c84 <setOrReset+0xa4>
					system_status.area_active = true;
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <setOrReset+0x244>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
					system_status.barrier_active = true;
 8001c70:	4b6c      	ldr	r3, [pc, #432]	; (8001e24 <setOrReset+0x244>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2120      	movs	r1, #32
 8001c7a:	486c      	ldr	r0, [pc, #432]	; (8001e2c <setOrReset+0x24c>)
 8001c7c:	f002 fe22 	bl	80048c4 <HAL_GPIO_WritePin>
					correct_sequence = true;
 8001c80:	2301      	movs	r3, #1
 8001c82:	71fb      	strb	r3, [r7, #7]
				break;
 8001c84:	bf00      	nop
			}
		}
		if (abcd[1] == '*') {
 8001c86:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <setOrReset+0x248>)
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c8c:	d175      	bne.n	8001d7a <setOrReset+0x19a>
			switch (abcd[0]) {
 8001c8e:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <setOrReset+0x248>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b42      	cmp	r3, #66	; 0x42
 8001c94:	d013      	beq.n	8001cbe <setOrReset+0xde>
 8001c96:	2b43      	cmp	r3, #67	; 0x43
 8001c98:	d026      	beq.n	8001ce8 <setOrReset+0x108>
 8001c9a:	2b41      	cmp	r3, #65	; 0x41
 8001c9c:	d16d      	bne.n	8001d7a <setOrReset+0x19a>
			case 'A':
				if (!system_status.area_active)
 8001c9e:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <setOrReset+0x244>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <setOrReset+0xd2>
					correct_sequence = false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
				else {
					system_status.area_active = false;
					correct_sequence = true;
				}
				break;
 8001cb0:	e063      	b.n	8001d7a <setOrReset+0x19a>
					system_status.area_active = false;
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <setOrReset+0x244>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
					correct_sequence = true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
				break;
 8001cbc:	e05d      	b.n	8001d7a <setOrReset+0x19a>

			case 'B':
				if (!system_status.barrier_active)
 8001cbe:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <setOrReset+0x244>)
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	f083 0301 	eor.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <setOrReset+0xf2>
					correct_sequence = false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	71fb      	strb	r3, [r7, #7]
					system_status.barrier_active = false;
					// Turn off the laser
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
					correct_sequence = true;
				}
				break;
 8001cd0:	e053      	b.n	8001d7a <setOrReset+0x19a>
					system_status.barrier_active = false;
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <setOrReset+0x244>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2120      	movs	r1, #32
 8001cdc:	4853      	ldr	r0, [pc, #332]	; (8001e2c <setOrReset+0x24c>)
 8001cde:	f002 fdf1 	bl	80048c4 <HAL_GPIO_WritePin>
					correct_sequence = true;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]
				break;
 8001ce6:	e048      	b.n	8001d7a <setOrReset+0x19a>

			case 'C':
				if (!system_status.barrier_active && !system_status.area_active)
 8001ce8:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <setOrReset+0x244>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <setOrReset+0x12a>
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <setOrReset+0x244>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <setOrReset+0x12a>
					correct_sequence = false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	e00c      	b.n	8001d24 <setOrReset+0x144>
				else {
					system_status.area_active = false;
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <setOrReset+0x244>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
					system_status.barrier_active = false;
 8001d10:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <setOrReset+0x244>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	705a      	strb	r2, [r3, #1]
					// Turn off the laser
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2120      	movs	r1, #32
 8001d1a:	4844      	ldr	r0, [pc, #272]	; (8001e2c <setOrReset+0x24c>)
 8001d1c:	f002 fdd2 	bl	80048c4 <HAL_GPIO_WritePin>
					correct_sequence = true;
 8001d20:	2301      	movs	r3, #1
 8001d22:	71fb      	strb	r3, [r7, #7]
				}
				break;
 8001d24:	bf00      	nop
 8001d26:	e028      	b.n	8001d7a <setOrReset+0x19a>
			}
		}
	}// Active system
	else if (abcd[0] == 'D' && abcd[1] == '#'
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <setOrReset+0x248>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b44      	cmp	r3, #68	; 0x44
 8001d2e:	d113      	bne.n	8001d58 <setOrReset+0x178>
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <setOrReset+0x248>)
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	2b23      	cmp	r3, #35	; 0x23
 8001d36:	d10f      	bne.n	8001d58 <setOrReset+0x178>
			&& !system_status.system_active) {
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <setOrReset+0x244>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <setOrReset+0x178>
		system_status.system_active = true;
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <setOrReset+0x244>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	709a      	strb	r2, [r3, #2]
		// Start timer for toggle user led
		HAL_TIM_Base_Start_IT(&htim11);
 8001d4c:	4838      	ldr	r0, [pc, #224]	; (8001e30 <setOrReset+0x250>)
 8001d4e:	f005 fe10 	bl	8007972 <HAL_TIM_Base_Start_IT>
		correct_sequence = true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e010      	b.n	8001d7a <setOrReset+0x19a>
	} else if (abcd[0] == 'D' && abcd[1] == '#' && system_status.system_active)
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <setOrReset+0x248>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b44      	cmp	r3, #68	; 0x44
 8001d5e:	d10a      	bne.n	8001d76 <setOrReset+0x196>
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <setOrReset+0x248>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	2b23      	cmp	r3, #35	; 0x23
 8001d66:	d106      	bne.n	8001d76 <setOrReset+0x196>
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <setOrReset+0x244>)
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <setOrReset+0x196>
		correct_sequence = false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e001      	b.n	8001d7a <setOrReset+0x19a>
	else
		correct_sequence = false;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
	//Disable system
	if (abcd[0] == 'D' && abcd[1] == '*' && system_status.system_active) {
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <setOrReset+0x248>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b44      	cmp	r3, #68	; 0x44
 8001d80:	d120      	bne.n	8001dc4 <setOrReset+0x1e4>
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <setOrReset+0x248>)
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	2b2a      	cmp	r3, #42	; 0x2a
 8001d88:	d11c      	bne.n	8001dc4 <setOrReset+0x1e4>
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <setOrReset+0x244>)
 8001d8c:	789b      	ldrb	r3, [r3, #2]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d018      	beq.n	8001dc4 <setOrReset+0x1e4>
		//Disable all sensors
		system_status.system_active = false;
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <setOrReset+0x244>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	709a      	strb	r2, [r3, #2]
		system_status.area_active = false;
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <setOrReset+0x244>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
		system_status.barrier_active = false;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <setOrReset+0x244>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
		// Turn off the led
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	4820      	ldr	r0, [pc, #128]	; (8001e2c <setOrReset+0x24c>)
 8001daa:	f002 fd8b 	bl	80048c4 <HAL_GPIO_WritePin>
		// Stop timer for toggle user led
		HAL_TIM_Base_Stop_IT(&htim11);
 8001dae:	4820      	ldr	r0, [pc, #128]	; (8001e30 <setOrReset+0x250>)
 8001db0:	f005 fe03 	bl	80079ba <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	2120      	movs	r1, #32
 8001db8:	481e      	ldr	r0, [pc, #120]	; (8001e34 <setOrReset+0x254>)
 8001dba:	f002 fd83 	bl	80048c4 <HAL_GPIO_WritePin>
		correct_sequence = true;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	e010      	b.n	8001de6 <setOrReset+0x206>
	} else if (abcd[0] == 'D' && abcd[1] == '*' && !system_status.system_active)
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <setOrReset+0x248>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b44      	cmp	r3, #68	; 0x44
 8001dca:	d10c      	bne.n	8001de6 <setOrReset+0x206>
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <setOrReset+0x248>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd2:	d108      	bne.n	8001de6 <setOrReset+0x206>
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <setOrReset+0x244>)
 8001dd6:	789b      	ldrb	r3, [r3, #2]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <setOrReset+0x206>
		correct_sequence = false;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]

	if (correct_sequence) {
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d011      	beq.n	8001e10 <setOrReset+0x230>
		// active a short sound to indicate that the sequence is valid
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2110      	movs	r1, #16
 8001df0:	480e      	ldr	r0, [pc, #56]	; (8001e2c <setOrReset+0x24c>)
 8001df2:	f002 fd67 	bl	80048c4 <HAL_GPIO_WritePin>
		HAL_Delay(499);
 8001df6:	f240 10f3 	movw	r0, #499	; 0x1f3
 8001dfa:	f001 f911 	bl	8003020 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	480a      	ldr	r0, [pc, #40]	; (8001e2c <setOrReset+0x24c>)
 8001e04:	f002 fd5e 	bl	80048c4 <HAL_GPIO_WritePin>
		// print on putty a message to indicate a command accepted
		command_accepted(COMMAND_ACCEPTED);
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <setOrReset+0x258>)
 8001e0a:	f7fe fdb9 	bl	8000980 <command_accepted>
 8001e0e:	e002      	b.n	8001e16 <setOrReset+0x236>
	} else {
		// print on putty a message to indicate a command rejected because the sequence is not valid
		command_rejected(COMMAND_REJECTED);
 8001e10:	480a      	ldr	r0, [pc, #40]	; (8001e3c <setOrReset+0x25c>)
 8001e12:	f7fe fda1 	bl	8000958 <command_rejected>
	}

	clear_vector();
 8001e16:	f7ff feb1 	bl	8001b7c <clear_vector>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000043c 	.word	0x2000043c
 8001e28:	20000444 	.word	0x20000444
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	2000054c 	.word	0x2000054c
 8001e34:	40020000 	.word	0x40020000
 8001e38:	0800a68c 	.word	0x0800a68c
 8001e3c:	0800a6b8 	.word	0x0800a6b8

08001e40 <HAL_GPIO_EXTI_Callback>:
 * active, the delay timer starts to check how long the signal remains high.
 * when the signal goes low or the area alarm goes low and the delay timer is busy, stop the timer that
 * counts the delay of the pir
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d14a      	bne.n	8001ee6 <HAL_GPIO_EXTI_Callback+0xa6>

		if (system_status.area_active && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 1
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02e      	beq.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x76>
 8001e58:	2108      	movs	r1, #8
 8001e5a:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e5c:	f002 fd1a 	bl	8004894 <HAL_GPIO_ReadPin>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d127      	bne.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x76>
				&& !pir_timer) {
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x76>
			//  SETTARE Init del timer e clear del timer
			MX_TIM9_Init();
 8001e74:	f000 fcd0 	bl	8002818 <MX_TIM9_Init>
			if(system_config.delay_pir!=0){
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_GPIO_EXTI_Callback+0x68>
				__HAL_TIM_SET_AUTORELOAD(&htim9, (system_config.delay_pir * 1000) - 1);
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ea6:	60da      	str	r2, [r3, #12]
			}
			HAL_TIM_Base_Start_IT(&htim9);
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001eaa:	f005 fd62 	bl	8007972 <HAL_TIM_Base_Start_IT>
			pir_timer = true;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
				&& pir_timer) {
			pir_timer = false;
			HAL_TIM_Base_Stop_IT(&htim9);
		}
	}
}
 8001eb4:	e017      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0xa6>
		else if ((!system_status.area_active || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0x92>
 8001ec4:	2108      	movs	r1, #8
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001ec8:	f002 fce4 	bl	8004894 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_GPIO_EXTI_Callback+0xa6>
				&& pir_timer) {
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_EXTI_Callback+0xa6>
			pir_timer = false;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ee2:	f005 fd6a 	bl	80079ba <HAL_TIM_Base_Stop_IT>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000043c 	.word	0x2000043c
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	20000221 	.word	0x20000221
 8001efc:	200002e0 	.word	0x200002e0
 8001f00:	2000058c 	.word	0x2000058c

08001f04 <HAL_ADC_ConvCpltCallback>:
 * and the delay timer is not busy, the timer starts to count the time in which the value remains above 1500.
 * when the threshold value falls below 1500 or the barrier alarm is deactivated and the delay timer is busy,
 * the timer is stopped.
 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	// check the threshold
	if ((int) threshold > MAX_THRESHOLD && system_status.barrier_active
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_ADC_ConvCpltCallback+0xa8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f16:	429a      	cmp	r2, r3
 8001f18:	dd2b      	ble.n	8001f72 <HAL_ADC_ConvCpltCallback+0x6e>
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_ADC_ConvCpltCallback+0xac>)
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d027      	beq.n	8001f72 <HAL_ADC_ConvCpltCallback+0x6e>
			&& !barrier_timer) {
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_ADC_ConvCpltCallback+0x6e>

		MX_TIM5_Init();
 8001f30:	f000 fc1e 	bl	8002770 <MX_TIM5_Init>
		if (system_config.delay_barrier != 0){
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_ADC_ConvCpltCallback+0x60>
			__HAL_TIM_SET_AUTORELOAD(&htim5, (system_config.delay_barrier * 1000) - 1);
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001f62:	60da      	str	r2, [r3, #12]
		}

		HAL_TIM_Base_Start_IT(&htim5);
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001f66:	f005 fd04 	bl	8007972 <HAL_TIM_Base_Start_IT>
		barrier_timer = true;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
	} else if (((int) threshold < MAX_THRESHOLD || !system_status.barrier_active)
			&& barrier_timer) {
		barrier_timer = false;
		HAL_TIM_Base_Stop_IT(&htim5);
	}
}
 8001f70:	e017      	b.n	8001fa2 <HAL_ADC_ConvCpltCallback+0x9e>
	} else if (((int) threshold < MAX_THRESHOLD || !system_status.barrier_active)
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_ADC_ConvCpltCallback+0xa8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f240 53db 	movw	r3, #1499	; 0x5db
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dd06      	ble.n	8001f8e <HAL_ADC_ConvCpltCallback+0x8a>
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_ADC_ConvCpltCallback+0xac>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_ADC_ConvCpltCallback+0x9e>
			&& barrier_timer) {
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_ADC_ConvCpltCallback+0x9e>
		barrier_timer = false;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim5);
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001f9e:	f005 fd0c 	bl	80079ba <HAL_TIM_Base_Stop_IT>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000448 	.word	0x20000448
 8001fb0:	2000043c 	.word	0x2000043c
 8001fb4:	20000222 	.word	0x20000222
 8001fb8:	200002e0 	.word	0x200002e0
 8001fbc:	200004cc 	.word	0x200004cc

08001fc0 <check_alarms>:

/*
 * This function checks the status of the alarms and calls the function by passing an enum
 */

void check_alarms() {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

	if (system_status.area_alarmed && system_status.barrier_alarmed) {
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <check_alarms+0x5c>)
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <check_alarms+0x1c>
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <check_alarms+0x5c>)
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <check_alarms+0x1c>
		ring_alarm(AREA_BARRIER_ALARMED);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f000 f823 	bl	8002020 <ring_alarm>
 8001fda:	e01d      	b.n	8002018 <check_alarms+0x58>
	}
	else if (system_status.area_alarmed && !system_status.barrier_alarmed) {
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <check_alarms+0x5c>)
 8001fde:	78db      	ldrb	r3, [r3, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <check_alarms+0x3a>
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <check_alarms+0x5c>)
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <check_alarms+0x3a>
		ring_alarm(AREA_ALARMED);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f814 	bl	8002020 <ring_alarm>
 8001ff8:	e00e      	b.n	8002018 <check_alarms+0x58>
	}
	else if (!system_status.area_alarmed && system_status.barrier_alarmed) {
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <check_alarms+0x5c>)
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <check_alarms+0x58>
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <check_alarms+0x5c>)
 800200a:	791b      	ldrb	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <check_alarms+0x58>
		ring_alarm(BARRIER_ALARMED);
 8002010:	2001      	movs	r0, #1
 8002012:	f000 f805 	bl	8002020 <ring_alarm>
	}
}
 8002016:	e7ff      	b.n	8002018 <check_alarms+0x58>
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000043c 	.word	0x2000043c

08002020 <ring_alarm>:

/*
 * This function set the prescaler and the period to change the frequency and it set the duration of the alarm
 */

void ring_alarm(TState state) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	MX_TIM3_Init();
 800202a:	f000 fad7 	bl	80025dc <MX_TIM3_Init>
	MX_TIM4_Init();
 800202e:	f000 fb4b 	bl	80026c8 <MX_TIM4_Init>

	switch (state) {
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d055      	beq.n	80020e4 <ring_alarm+0xc4>
 8002038:	2b02      	cmp	r3, #2
 800203a:	d002      	beq.n	8002042 <ring_alarm+0x22>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d028      	beq.n	8002092 <ring_alarm+0x72>
		__HAL_TIM_SET_AUTORELOAD(&htim4, (system_config.alarm_duration * 1000) - 1);
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Start_IT(&htim4);
		break;
	}
}
 8002040:	e078      	b.n	8002134 <ring_alarm+0x114>
		__HAL_TIM_SET_PRESCALER(&htim3, 2999);
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <ring_alarm+0x11c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_AUTORELOAD(&htim3, 99);
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <ring_alarm+0x11c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2263      	movs	r2, #99	; 0x63
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <ring_alarm+0x11c>)
 8002056:	2263      	movs	r2, #99	; 0x63
 8002058:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, (system_config.alarm_duration * 1000) - 1);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <ring_alarm+0x120>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <ring_alarm+0x124>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <ring_alarm+0x120>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <ring_alarm+0x124>)
 8002080:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002082:	2100      	movs	r1, #0
 8002084:	482d      	ldr	r0, [pc, #180]	; (800213c <ring_alarm+0x11c>)
 8002086:	f005 fcf9 	bl	8007a7c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 800208a:	482e      	ldr	r0, [pc, #184]	; (8002144 <ring_alarm+0x124>)
 800208c:	f005 fc71 	bl	8007972 <HAL_TIM_Base_Start_IT>
		break;
 8002090:	e050      	b.n	8002134 <ring_alarm+0x114>
		__HAL_TIM_SET_PRESCALER(&htim3, 10);
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <ring_alarm+0x11c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	220a      	movs	r2, #10
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <ring_alarm+0x11c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <ring_alarm+0x11c>)
 80020a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020aa:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, (system_config.alarm_duration * 1000) - 1);
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <ring_alarm+0x120>)
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <ring_alarm+0x124>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <ring_alarm+0x120>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <ring_alarm+0x124>)
 80020d2:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80020d4:	2100      	movs	r1, #0
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <ring_alarm+0x11c>)
 80020d8:	f005 fcd0 	bl	8007a7c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 80020dc:	4819      	ldr	r0, [pc, #100]	; (8002144 <ring_alarm+0x124>)
 80020de:	f005 fc48 	bl	8007972 <HAL_TIM_Base_Start_IT>
		break;
 80020e2:	e027      	b.n	8002134 <ring_alarm+0x114>
		__HAL_TIM_SET_PRESCALER(&htim3, 499);
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <ring_alarm+0x11c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_AUTORELOAD(&htim3, 99);
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <ring_alarm+0x11c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2263      	movs	r2, #99	; 0x63
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <ring_alarm+0x11c>)
 80020f8:	2263      	movs	r2, #99	; 0x63
 80020fa:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, (system_config.alarm_duration * 1000) - 1);
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <ring_alarm+0x120>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	1e5a      	subs	r2, r3, #1
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <ring_alarm+0x124>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <ring_alarm+0x120>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	461a      	mov	r2, r3
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <ring_alarm+0x124>)
 8002122:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002124:	2100      	movs	r1, #0
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <ring_alarm+0x11c>)
 8002128:	f005 fca8 	bl	8007a7c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <ring_alarm+0x124>)
 800212e:	f005 fc20 	bl	8007972 <HAL_TIM_Base_Start_IT>
		break;
 8002132:	bf00      	nop
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000050c 	.word	0x2000050c
 8002140:	200002e0 	.word	0x200002e0
 8002144:	2000044c 	.word	0x2000044c

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 fef8 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021f8:	2008      	movs	r0, #8
 80021fa:	f002 fb97 	bl	800492c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA1_Stream0_IRQHandler+0x10>)
 800220a:	f001 ff3f 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200003d8 	.word	0x200003d8

08002218 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA1_Stream6_IRQHandler+0x10>)
 800221e:	f001 ff35 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200005cc 	.word	0x200005cc

0800222c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <ADC_IRQHandler+0x10>)
 8002232:	f000 ff5a 	bl	80030ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000238 	.word	0x20000238

08002240 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002246:	f005 fd1f 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000058c 	.word	0x2000058c

08002254 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800225a:	f005 fd15 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000048c 	.word	0x2000048c

08002268 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800226e:	f005 fd0b 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000054c 	.word	0x2000054c

0800227c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM3_IRQHandler+0x10>)
 8002282:	f005 fd01 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000050c 	.word	0x2000050c

08002290 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM4_IRQHandler+0x10>)
 8002296:	f005 fcf7 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000044c 	.word	0x2000044c

080022a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <I2C1_EV_IRQHandler+0x10>)
 80022aa:	f003 f803 	bl	80052b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000384 	.word	0x20000384

080022b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <USART2_IRQHandler+0x10>)
 80022be:	f006 fc7f 	bl	8008bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000062c 	.word	0x2000062c

080022cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM5_IRQHandler+0x10>)
 80022d2:	f005 fcd9 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200004cc 	.word	0x200004cc

080022e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <DMA2_Stream0_IRQHandler+0x10>)
 80022e6:	f001 fed1 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000280 	.word	0x20000280

080022f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <_sbrk+0x50>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <_sbrk+0x16>
		heap_end = &end;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <_sbrk+0x50>)
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <_sbrk+0x54>)
 8002308:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <_sbrk+0x50>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <_sbrk+0x50>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	466a      	mov	r2, sp
 800231a:	4293      	cmp	r3, r2
 800231c:	d907      	bls.n	800232e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800231e:	f007 fabb 	bl	8009898 <__errno>
 8002322:	4602      	mov	r2, r0
 8002324:	230c      	movs	r3, #12
 8002326:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
 800232c:	e006      	b.n	800233c <_sbrk+0x48>
	}

	heap_end += incr;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <_sbrk+0x50>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	4a03      	ldr	r2, [pc, #12]	; (8002344 <_sbrk+0x50>)
 8002338:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000224 	.word	0x20000224
 8002348:	20000678 	.word	0x20000678

0800234c <get_time>:

/*
 * This function takes the date and time from the RTC and saves them in the datetime structure.
 * Returns a message in this format: 20-10-2020 11:15:47
 */
char* get_time() {
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af04      	add	r7, sp, #16

	sprintf(message, "[%hu-%hu-%hu %hu:%hu:%hu]", datetime.date, datetime.month,
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <get_time+0x4c>)
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	461c      	mov	r4, r3
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <get_time+0x4c>)
 800235a:	795b      	ldrb	r3, [r3, #5]
 800235c:	461d      	mov	r5, r3
			(uint16_t) (2000 + datetime.year), datetime.hours, datetime.minutes,
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <get_time+0x4c>)
 8002360:	88db      	ldrh	r3, [r3, #6]
 8002362:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002366:	b29b      	uxth	r3, r3
	sprintf(message, "[%hu-%hu-%hu %hu:%hu:%hu]", datetime.date, datetime.month,
 8002368:	461a      	mov	r2, r3
			(uint16_t) (2000 + datetime.year), datetime.hours, datetime.minutes,
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <get_time+0x4c>)
 800236c:	789b      	ldrb	r3, [r3, #2]
	sprintf(message, "[%hu-%hu-%hu %hu:%hu:%hu]", datetime.date, datetime.month,
 800236e:	4619      	mov	r1, r3
			(uint16_t) (2000 + datetime.year), datetime.hours, datetime.minutes,
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <get_time+0x4c>)
 8002372:	785b      	ldrb	r3, [r3, #1]
	sprintf(message, "[%hu-%hu-%hu %hu:%hu:%hu]", datetime.date, datetime.month,
 8002374:	4618      	mov	r0, r3
			datetime.seconds);
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <get_time+0x4c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
	sprintf(message, "[%hu-%hu-%hu %hu:%hu:%hu]", datetime.date, datetime.month,
 800237a:	9303      	str	r3, [sp, #12]
 800237c:	9002      	str	r0, [sp, #8]
 800237e:	9101      	str	r1, [sp, #4]
 8002380:	9200      	str	r2, [sp, #0]
 8002382:	462b      	mov	r3, r5
 8002384:	4622      	mov	r2, r4
 8002386:	4905      	ldr	r1, [pc, #20]	; (800239c <get_time+0x50>)
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <get_time+0x54>)
 800238a:	f007 fba7 	bl	8009adc <siprintf>
	return message;
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <get_time+0x54>)
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bdb0      	pop	{r4, r5, r7, pc}
 8002396:	bf00      	nop
 8002398:	2000037c 	.word	0x2000037c
 800239c:	0800a6cc 	.word	0x0800a6cc
 80023a0:	200002f8 	.word	0x200002f8

080023a4 <period_log>:
/*
 * This function checks the system status, it takes date and time from the previous function and prints a
 * message on putty in this format: 20-10-2020 11:15:47 Area Disabled - Barrier Disabled
 */

void period_log() {
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	b0cc      	sub	sp, #304	; 0x130
 80023a8:	af00      	add	r7, sp, #0

	char status_message[100];
	char final_message[100];
	char time_message[100];

	if (system_status.area_active && system_status.barrier_active) {
 80023aa:	4b75      	ldr	r3, [pc, #468]	; (8002580 <period_log+0x1dc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d050      	beq.n	8002454 <period_log+0xb0>
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <period_log+0x1dc>)
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04c      	beq.n	8002454 <period_log+0xb0>
		if (system_status.area_alarmed && system_status.barrier_alarmed) {
 80023ba:	4b71      	ldr	r3, [pc, #452]	; (8002580 <period_log+0x1dc>)
 80023bc:	78db      	ldrb	r3, [r3, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00f      	beq.n	80023e2 <period_log+0x3e>
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <period_log+0x1dc>)
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <period_log+0x3e>
			sprintf(status_message, "%s", " Area Alarmed – Barrier Alarmed");
 80023ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023ce:	4a6d      	ldr	r2, [pc, #436]	; (8002584 <period_log+0x1e0>)
 80023d0:	461c      	mov	r4, r3
 80023d2:	4615      	mov	r5, r2
 80023d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	8023      	strh	r3, [r4, #0]
 80023e0:	e038      	b.n	8002454 <period_log+0xb0>
		} else if (!system_status.area_alarmed
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <period_log+0x1dc>)
 80023e4:	78db      	ldrb	r3, [r3, #3]
 80023e6:	f083 0301 	eor.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00f      	beq.n	8002410 <period_log+0x6c>
				&& system_status.barrier_alarmed) {
 80023f0:	4b63      	ldr	r3, [pc, #396]	; (8002580 <period_log+0x1dc>)
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <period_log+0x6c>
			sprintf(status_message, "%s", " Area Active – Barrier Alarmed");
 80023f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fc:	4a62      	ldr	r2, [pc, #392]	; (8002588 <period_log+0x1e4>)
 80023fe:	461c      	mov	r4, r3
 8002400:	4615      	mov	r5, r2
 8002402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	7023      	strb	r3, [r4, #0]
 800240e:	e021      	b.n	8002454 <period_log+0xb0>
		} else if (system_status.area_alarmed
 8002410:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <period_log+0x1dc>)
 8002412:	78db      	ldrb	r3, [r3, #3]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <period_log+0x9a>
				&& !system_status.barrier_alarmed) {
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <period_log+0x1dc>)
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <period_log+0x9a>
			sprintf(status_message, "%s", " Area Alarmed – Barrier Active");
 8002426:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <period_log+0x1e8>)
 800242c:	461c      	mov	r4, r3
 800242e:	4615      	mov	r5, r2
 8002430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	7023      	strb	r3, [r4, #0]
 800243c:	e00a      	b.n	8002454 <period_log+0xb0>
		} else
			sprintf(status_message, "%s", " Area Active – Barrier Active");
 800243e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002442:	4a53      	ldr	r2, [pc, #332]	; (8002590 <period_log+0x1ec>)
 8002444:	461c      	mov	r4, r3
 8002446:	4615      	mov	r5, r2
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (system_status.area_active && !system_status.barrier_active) {
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <period_log+0x1dc>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d025      	beq.n	80024a8 <period_log+0x104>
 800245c:	4b48      	ldr	r3, [pc, #288]	; (8002580 <period_log+0x1dc>)
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01e      	beq.n	80024a8 <period_log+0x104>
		if (system_status.area_alarmed) {
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <period_log+0x1dc>)
 800246c:	78db      	ldrb	r3, [r3, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00f      	beq.n	8002492 <period_log+0xee>
			sprintf(status_message, "%s", " Area Alarmed – Barrier Disabled");
 8002472:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <period_log+0x1f0>)
 8002478:	461c      	mov	r4, r3
 800247a:	4615      	mov	r5, r2
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	8022      	strh	r2, [r4, #0]
 800248a:	3402      	adds	r4, #2
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	7023      	strb	r3, [r4, #0]
 8002490:	e00a      	b.n	80024a8 <period_log+0x104>
		} else
			sprintf(status_message, "%s", " Area Active – Barrier Disabled");
 8002492:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <period_log+0x1f4>)
 8002498:	461c      	mov	r4, r3
 800249a:	4615      	mov	r5, r2
 800249c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	8023      	strh	r3, [r4, #0]
	}

	if (!system_status.area_active && system_status.barrier_active) {
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <period_log+0x1dc>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d022      	beq.n	80024fc <period_log+0x158>
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <period_log+0x1dc>)
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01e      	beq.n	80024fc <period_log+0x158>
		if (system_status.barrier_alarmed) {
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <period_log+0x1dc>)
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <period_log+0x142>
			sprintf(status_message, "%s", " Area Disabled – Barrier Alarmed");
 80024c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <period_log+0x1f8>)
 80024cc:	461c      	mov	r4, r3
 80024ce:	4615      	mov	r5, r2
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	8022      	strh	r2, [r4, #0]
 80024de:	3402      	adds	r4, #2
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	7023      	strb	r3, [r4, #0]
 80024e4:	e00a      	b.n	80024fc <period_log+0x158>
		} else
			sprintf(status_message, "%s", " Area Disabled – Barrier Active");
 80024e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ea:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <period_log+0x1fc>)
 80024ec:	461c      	mov	r4, r3
 80024ee:	4615      	mov	r5, r2
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	8023      	strh	r3, [r4, #0]
	}

	if (!system_status.area_active && !system_status.barrier_active) {
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <period_log+0x1dc>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f083 0301 	eor.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d011      	beq.n	800252e <period_log+0x18a>
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <period_log+0x1dc>)
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	f083 0301 	eor.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <period_log+0x18a>
		sprintf(status_message, "%s", " Area Disabled – Barrier Disabled");
 8002518:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800251c:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <period_log+0x200>)
 800251e:	461c      	mov	r4, r3
 8002520:	4615      	mov	r5, r2
 8002522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	6023      	str	r3, [r4, #0]
	}

	sprintf(time_message, "%s", get_time());
 800252e:	f7ff ff0d 	bl	800234c <get_time>
 8002532:	4602      	mov	r2, r0
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f007 fafe 	bl	8009b3a <strcpy>
	sprintf(final_message, "\r\n%s", strcat(time_message, status_message));
 800253e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f007 fae8 	bl	8009b1c <strcat>
 800254c:	4602      	mov	r2, r0
 800254e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002552:	4915      	ldr	r1, [pc, #84]	; (80025a8 <period_log+0x204>)
 8002554:	4618      	mov	r0, r3
 8002556:	f007 fac1 	bl	8009adc <siprintf>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) final_message,
			strlen(final_message));
 800255a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fe48 	bl	80001f4 <strlen>
 8002564:	4603      	mov	r3, r0
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) final_message,
 8002566:	b29a      	uxth	r2, r3
 8002568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800256c:	4619      	mov	r1, r3
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <period_log+0x208>)
 8002570:	f006 fa62 	bl	8008a38 <HAL_UART_Transmit_DMA>
}
 8002574:	bf00      	nop
 8002576:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800257a:	46bd      	mov	sp, r7
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	bf00      	nop
 8002580:	2000043c 	.word	0x2000043c
 8002584:	0800a6e8 	.word	0x0800a6e8
 8002588:	0800a70c 	.word	0x0800a70c
 800258c:	0800a730 	.word	0x0800a730
 8002590:	0800a754 	.word	0x0800a754
 8002594:	0800a774 	.word	0x0800a774
 8002598:	0800a798 	.word	0x0800a798
 800259c:	0800a7bc 	.word	0x0800a7bc
 80025a0:	0800a7e0 	.word	0x0800a7e0
 80025a4:	0800a804 	.word	0x0800a804
 80025a8:	0800a828 	.word	0x0800a828
 80025ac:	2000062c 	.word	0x2000062c

080025b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <SystemInit+0x28>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <SystemInit+0x28>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SystemInit+0x28>)
 80025c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ca:	609a      	str	r2, [r3, #8]
#endif
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	f107 0320 	add.w	r3, r7, #32
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
 8002608:	615a      	str	r2, [r3, #20]
 800260a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <MX_TIM3_Init+0xe8>)
 8002610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <MX_TIM3_Init+0xe4>)
 8002614:	2263      	movs	r2, #99	; 0x63
 8002616:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <MX_TIM3_Init+0xe4>)
 8002620:	2263      	movs	r2, #99	; 0x63
 8002622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <MX_TIM3_Init+0xe4>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002630:	4823      	ldr	r0, [pc, #140]	; (80026c0 <MX_TIM3_Init+0xe4>)
 8002632:	f005 f973 	bl	800791c <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800263c:	f7ff f9fe 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264a:	4619      	mov	r1, r3
 800264c:	481c      	ldr	r0, [pc, #112]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800264e:	f005 fce9 	bl	8008024 <HAL_TIM_ConfigClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002658:	f7ff f9f0 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800265c:	4818      	ldr	r0, [pc, #96]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800265e:	f005 f9d7 	bl	8007a10 <HAL_TIM_PWM_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002668:	f7ff f9e8 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002674:	f107 0320 	add.w	r3, r7, #32
 8002678:	4619      	mov	r1, r3
 800267a:	4811      	ldr	r0, [pc, #68]	; (80026c0 <MX_TIM3_Init+0xe4>)
 800267c:	f006 f8b8 	bl	80087f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002686:	f7ff f9d9 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268a:	2360      	movs	r3, #96	; 0x60
 800268c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2200      	movs	r2, #0
 800269e:	4619      	mov	r1, r3
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_TIM3_Init+0xe4>)
 80026a2:	f005 fbf9 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80026ac:	f7ff f9c6 	bl	8001a3c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <MX_TIM3_Init+0xe4>)
 80026b2:	f000 fa01 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80026b6:	bf00      	nop
 80026b8:	3738      	adds	r7, #56	; 0x38
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000050c 	.word	0x2000050c
 80026c4:	40000400 	.word	0x40000400

080026c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <MX_TIM4_Init+0xa0>)
 80026e6:	4a21      	ldr	r2, [pc, #132]	; (800276c <MX_TIM4_Init+0xa4>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <MX_TIM4_Init+0xa0>)
 80026ec:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80026f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_TIM4_Init+0xa0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_TIM4_Init+0xa0>)
 80026fa:	f240 12f3 	movw	r2, #499	; 0x1f3
 80026fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <MX_TIM4_Init+0xa0>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_TIM4_Init+0xa0>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <MX_TIM4_Init+0xa0>)
 800270e:	f005 f905 	bl	800791c <HAL_TIM_Base_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002718:	f7ff f990 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4619      	mov	r1, r3
 8002728:	480f      	ldr	r0, [pc, #60]	; (8002768 <MX_TIM4_Init+0xa0>)
 800272a:	f005 fc7b 	bl	8008024 <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002734:	f7ff f982 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	4619      	mov	r1, r3
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <MX_TIM4_Init+0xa0>)
 8002746:	f006 f853 	bl	80087f0 <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002750:	f7ff f974 	bl	8001a3c <Error_Handler>
  }
  __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <MX_TIM4_Init+0xa0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]

}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000044c 	.word	0x2000044c
 800276c:	40000800 	.word	0x40000800

08002770 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <MX_TIM5_Init+0xa0>)
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <MX_TIM5_Init+0xa4>)
 8002790:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <MX_TIM5_Init+0xa0>)
 8002794:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002798:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <MX_TIM5_Init+0xa0>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027b4:	4816      	ldr	r0, [pc, #88]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027b6:	f005 f8b1 	bl	800791c <HAL_TIM_Base_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027c0:	f7ff f93c 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	4619      	mov	r1, r3
 80027d0:	480f      	ldr	r0, [pc, #60]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027d2:	f005 fc27 	bl	8008024 <HAL_TIM_ConfigClockSource>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027dc:	f7ff f92e 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027e8:	463b      	mov	r3, r7
 80027ea:	4619      	mov	r1, r3
 80027ec:	4808      	ldr	r0, [pc, #32]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027ee:	f005 ffff 	bl	80087f0 <HAL_TIMEx_MasterConfigSynchronization>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027f8:	f7ff f920 	bl	8001a3c <Error_Handler>
  }
  __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <MX_TIM5_Init+0xa0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0201 	mvn.w	r2, #1
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004cc 	.word	0x200004cc
 8002814:	40000c00 	.word	0x40000c00

08002818 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	463b      	mov	r3, r7
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <MX_TIM9_Init+0x78>)
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <MX_TIM9_Init+0x7c>)
 800282e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 41999;
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <MX_TIM9_Init+0x78>)
 8002832:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002836:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <MX_TIM9_Init+0x78>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <MX_TIM9_Init+0x78>)
 8002840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002844:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <MX_TIM9_Init+0x78>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <MX_TIM9_Init+0x78>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <MX_TIM9_Init+0x78>)
 8002854:	f005 f862 	bl	800791c <HAL_TIM_Base_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800285e:	f7ff f8ed 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002868:	463b      	mov	r3, r7
 800286a:	4619      	mov	r1, r3
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <MX_TIM9_Init+0x78>)
 800286e:	f005 fbd9 	bl	8008024 <HAL_TIM_ConfigClockSource>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002878:	f7ff f8e0 	bl	8001a3c <Error_Handler>
  }

  __HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <MX_TIM9_Init+0x78>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0201 	mvn.w	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000058c 	.word	0x2000058c
 8002894:	40014000 	.word	0x40014000

08002898 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_TIM10_Init+0x4c>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <MX_TIM10_Init+0x50>)
 80028a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 41999;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028a4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80028a8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 29999;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80028b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80028c4:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028c6:	f005 f829 	bl	800791c <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80028d0:	f7ff f8b4 	bl	8001a3c <Error_Handler>
  }

  __HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <MX_TIM10_Init+0x4c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0201 	mvn.w	r2, #1
 80028dc:	611a      	str	r2, [r3, #16]
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000048c 	.word	0x2000048c
 80028e8:	40014400 	.word	0x40014400

080028ec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_TIM11_Init+0x48>)
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <MX_TIM11_Init+0x4c>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 41999;
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_TIM11_Init+0x48>)
 80028f8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80028fc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <MX_TIM11_Init+0x48>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 249;
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_TIM11_Init+0x48>)
 8002906:	22f9      	movs	r2, #249	; 0xf9
 8002908:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_TIM11_Init+0x48>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_TIM11_Init+0x48>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002916:	4807      	ldr	r0, [pc, #28]	; (8002934 <MX_TIM11_Init+0x48>)
 8002918:	f005 f800 	bl	800791c <HAL_TIM_Base_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002922:	f7ff f88b 	bl	8001a3c <Error_Handler>
  }

  __HAL_TIM_CLEAR_IT(&htim11, TIM_IT_UPDATE);
 8002926:	4b03      	ldr	r3, [pc, #12]	; (8002934 <MX_TIM11_Init+0x48>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0201 	mvn.w	r2, #1
 800292e:	611a      	str	r2, [r3, #16]
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2000054c 	.word	0x2000054c
 8002938:	40014800 	.word	0x40014800

0800293c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_TIM_Base_MspInit+0x160>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d116      	bne.n	800297c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	201d      	movs	r0, #29
 8002970:	f001 f9bd 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002974:	201d      	movs	r0, #29
 8002976:	f001 f9d6 	bl	8003d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800297a:	e08a      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_TIM_Base_MspInit+0x168>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d116      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	201e      	movs	r0, #30
 80029a8:	f001 f9a1 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029ac:	201e      	movs	r0, #30
 80029ae:	f001 f9ba 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 80029b2:	e06e      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3b      	ldr	r2, [pc, #236]	; (8002aa8 <HAL_TIM_Base_MspInit+0x16c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d116      	bne.n	80029ec <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2032      	movs	r0, #50	; 0x32
 80029e0:	f001 f985 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029e4:	2032      	movs	r0, #50	; 0x32
 80029e6:	f001 f99e 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 80029ea:	e052      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_TIM_Base_MspInit+0x170>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d116      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2018      	movs	r0, #24
 8002a18:	f001 f969 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a1c:	2018      	movs	r0, #24
 8002a1e:	f001 f982 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 8002a22:	e036      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_TIM_Base_MspInit+0x174>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d116      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2019      	movs	r0, #25
 8002a50:	f001 f94d 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a54:	2019      	movs	r0, #25
 8002a56:	f001 f966 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 8002a5a:	e01a      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_TIM_Base_MspInit+0x178>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d115      	bne.n	8002a92 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_TIM_Base_MspInit+0x164>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	201a      	movs	r0, #26
 8002a88:	f001 f931 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a8c:	201a      	movs	r0, #26
 8002a8e:	f001 f94a 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800

08002ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <HAL_TIM_MspPostInit+0x68>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11d      	bne.n	8002b16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_TIM_MspPostInit+0x70>)
 8002b12:	f001 fd3d 	bl	8004590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_TIM_PeriodElapsedCallback>:
 *
 * TIM11 is used to toggle user's Pin every half second when the system is active, and at the same time
 * when both system and Barrier Alarm are active it allows to sample the ADC signal.
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a54      	ldr	r2, [pc, #336]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d117      	bne.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x42>
		if (__HAL_TIM_GET_AUTORELOAD(&htim10) == 29999) {
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f247 522f 	movw	r2, #29999	; 0x752f
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_PeriodElapsedCallback+0x30>
			HAL_TIM_Base_Stop_IT(&htim10);
 8002b4c:	4850      	ldr	r0, [pc, #320]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002b4e:	f004 ff34 	bl	80079ba <HAL_TIM_Base_Stop_IT>
			HAL_UART_AbortReceive_IT(&huart2);
 8002b52:	4850      	ldr	r0, [pc, #320]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002b54:	f005 ffdc 	bl	8008b10 <HAL_UART_AbortReceive_IT>
			default_configuration();
 8002b58:	f7fd ff64 	bl	8000a24 <default_configuration>
		}
		if (__HAL_TIM_GET_AUTORELOAD(&htim10) == 9999) {
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x42>
			ds1307rtc_get_date_time();
 8002b6a:	f7fe fa5f 	bl	800102c <ds1307rtc_get_date_time>
		}
	}
	if (htim->Instance == TIM11) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002b78:	2120      	movs	r1, #32
 8002b7a:	4848      	ldr	r0, [pc, #288]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002b7c:	f001 febb 	bl	80048f6 <HAL_GPIO_TogglePin>
		if(!system_status.barrier_alarmed && system_status.barrier_active){
 8002b80:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b82:	791b      	ldrb	r3, [r3, #4]
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002b8e:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
			HAL_ADC_Start_DMA(&hadc1, &threshold, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	4942      	ldr	r1, [pc, #264]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b9a:	4843      	ldr	r0, [pc, #268]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002b9c:	f000 fbe6 	bl	800336c <HAL_ADC_Start_DMA>
		}
	}
	if (htim->Instance == TIM5) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a41      	ldr	r2, [pc, #260]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d118      	bne.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0xb0>
		//delay barrier
		if ((int) threshold > MAX_THRESHOLD && system_status.barrier_active) {
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dd11      	ble.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0xb0>
			system_status.barrier_alarmed = true;
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	711a      	strb	r2, [r3, #4]
			barrier_timer = false;
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
			check_alarms();
 8002bcc:	f7ff f9f8 	bl	8001fc0 <check_alarms>
			HAL_ADC_Stop_DMA(&hadc1);
 8002bd0:	4835      	ldr	r0, [pc, #212]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002bd2:	f000 fc9f 	bl	8003514 <HAL_ADC_Stop_DMA>
			HAL_TIM_Base_Stop_IT(&htim5);
 8002bd6:	4837      	ldr	r0, [pc, #220]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002bd8:	f004 feef 	bl	80079ba <HAL_TIM_Base_Stop_IT>

		}
	}

	if (htim->Instance == TIM9) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a35      	ldr	r2, [pc, #212]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d115      	bne.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0xe6>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 1 && system_status.area_active) {
 8002be6:	2108      	movs	r1, #8
 8002be8:	4834      	ldr	r0, [pc, #208]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002bea:	f001 fe53 	bl	8004894 <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10e      	bne.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0xe6>
			system_status.area_alarmed = true;
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	70da      	strb	r2, [r3, #3]
			pir_timer = false;
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
			check_alarms();
 8002c08:	f7ff f9da 	bl	8001fc0 <check_alarms>
			HAL_TIM_Base_Stop_IT(&htim9);
 8002c0c:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002c0e:	f004 fed4 	bl	80079ba <HAL_TIM_Base_Stop_IT>
		}
	}

	if(htim->Instance == TIM4){
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d133      	bne.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	482b      	ldr	r0, [pc, #172]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002c20:	f004 ffa4 	bl	8007b6c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002c24:	482a      	ldr	r0, [pc, #168]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002c26:	f004 fec8 	bl	80079ba <HAL_TIM_Base_Stop_IT>

		if(system_status.area_alarmed && system_status.barrier_alarmed){
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c2c:	78db      	ldrb	r3, [r3, #3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c34:	791b      	ldrb	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_TIM_PeriodElapsedCallback+0x11c>
			system_status.area_alarmed = false;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	70da      	strb	r2, [r3, #3]
			system_status.barrier_alarmed = false;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	711a      	strb	r2, [r3, #4]
 8002c46:	e01d      	b.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(system_status.area_alarmed && !system_status.barrier_alarmed){
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c4a:	78db      	ldrb	r3, [r3, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x13a>
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	f083 0301 	eor.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x13a>
			system_status.area_alarmed = false;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	70da      	strb	r2, [r3, #3]
 8002c64:	e00e      	b.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(!system_status.area_alarmed && system_status.barrier_alarmed){
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c68:	78db      	ldrb	r3, [r3, #3]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
			system_status.barrier_alarmed = false;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8002c82:	e7ff      	b.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x158>
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	2000048c 	.word	0x2000048c
 8002c94:	2000062c 	.word	0x2000062c
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	2000043c 	.word	0x2000043c
 8002ca4:	20000448 	.word	0x20000448
 8002ca8:	20000238 	.word	0x20000238
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	20000222 	.word	0x20000222
 8002cb4:	200004cc 	.word	0x200004cc
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	20000221 	.word	0x20000221
 8002cc4:	2000058c 	.word	0x2000058c
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	2000050c 	.word	0x2000050c
 8002cd0:	2000044c 	.word	0x2000044c

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * This callback allows to module the alarm sounds
 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	dutyCycle = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4826      	ldr	r0, [pc, #152]	; (8002d78 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002ce0:	f005 fa58 	bl	8008194 <HAL_TIM_ReadCapturedValue>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002cea:	801a      	strh	r2, [r3, #0]

	if (htim->Instance == TIM3) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d13b      	bne.n	8002d6e <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
		count_pwm++;
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002d00:	801a      	strh	r2, [r3, #0]
		if (count_pwm % 1000) {
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8002d08:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0c:	0992      	lsrs	r2, r2, #6
 8002d0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d12:	fb01 f202 	mul.w	r2, r1, r2
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d027      	beq.n	8002d6e <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
			if (dutyCycle >= __HAL_TIM_GET_AUTORELOAD(&htim3)) {
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
				increase = 0;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
			}
			if (dutyCycle <= 0) {
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				increase = 1;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
			}

			if (increase) {
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
				dutyCycle += 1;
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	e005      	b.n	8002d64 <HAL_TIM_PWM_PulseFinishedCallback+0x90>
			} else {
				dutyCycle -= 1;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d62:	801a      	strh	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
		}

	}
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000050c 	.word	0x2000050c
 8002d7c:	20000228 	.word	0x20000228
 8002d80:	40000400 	.word	0x40000400
 8002d84:	2000022c 	.word	0x2000022c
 8002d88:	10624dd3 	.word	0x10624dd3
 8002d8c:	2000022a 	.word	0x2000022a

08002d90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <MX_USART2_UART_Init+0x50>)
 8002d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002d9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002db6:	220c      	movs	r2, #12
 8002db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <MX_USART2_UART_Init+0x4c>)
 8002dc8:	f005 fd94 	bl	80088f4 <HAL_UART_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dd2:	f7fe fe33 	bl	8001a3c <Error_Handler>
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000062c 	.word	0x2000062c
 8002de0:	40004400 	.word	0x40004400

08002de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <HAL_UART_MspInit+0xf0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d161      	bne.n	8002eca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a32      	ldr	r2, [pc, #200]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_UART_MspInit+0xf4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e3e:	230c      	movs	r3, #12
 8002e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	4820      	ldr	r0, [pc, #128]	; (8002edc <HAL_UART_MspInit+0xf8>)
 8002e5a:	f001 fb99 	bl	8004590 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <HAL_UART_MspInit+0x100>)
 8002e62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e9e:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002ea0:	f000 ff5c 	bl	8003d5c <HAL_DMA_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002eaa:	f7fe fdc7 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_UART_MspInit+0xfc>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2026      	movs	r0, #38	; 0x26
 8002ec0:	f000 ff15 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ec4:	2026      	movs	r0, #38	; 0x26
 8002ec6:	f000 ff2e 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	200005cc 	.word	0x200005cc
 8002ee4:	400260a0 	.word	0x400260a0

08002ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eee:	e003      	b.n	8002ef8 <LoopCopyDataInit>

08002ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ef6:	3104      	adds	r1, #4

08002ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f00:	d3f6      	bcc.n	8002ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f04:	e002      	b.n	8002f0c <LoopFillZerobss>

08002f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f08:	f842 3b04 	str.w	r3, [r2], #4

08002f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f10:	d3f9      	bcc.n	8002f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f12:	f7ff fb4d 	bl	80025b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f16:	f006 fcc5 	bl	80098a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1a:	f7fe fcf1 	bl	8001900 <main>
  bx  lr    
 8002f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f20:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002f24:	0800a9b0 	.word	0x0800a9b0
  ldr  r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f2c:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002f30:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002f34:	20000674 	.word	0x20000674

08002f38 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <DMA1_Stream1_IRQHandler>
	...

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_Init+0x40>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_Init+0x40>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x40>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 feb7 	bl	8003cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff f8ea 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fecf 	bl	8003d42 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 fe97 	bl	8003cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000020 	.word	0x20000020
 8002fd8:	20000028 	.word	0x20000028
 8002fdc:	20000024 	.word	0x20000024

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000028 	.word	0x20000028
 8003004:	2000066c 	.word	0x2000066c

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000066c 	.word	0x2000066c

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_Delay+0x40>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000028 	.word	0x20000028

08003064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e033      	b.n	80030e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fae6 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d118      	bne.n	80030d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030aa:	f023 0302 	bic.w	r3, r3, #2
 80030ae:	f043 0202 	orr.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fbb6 	bl	8003828 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
 80030d2:	e001      	b.n	80030d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d049      	beq.n	80031c0 <HAL_ADC_IRQHandler+0xd6>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d046      	beq.n	80031c0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12b      	bne.n	80031b0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d127      	bne.n	80031b0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003178:	2b00      	cmp	r3, #0
 800317a:	d119      	bne.n	80031b0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0220 	bic.w	r2, r2, #32
 800318a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe fea7 	bl	8001f04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0212 	mvn.w	r2, #18
 80031be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d057      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x1b8>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d054      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d139      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12b      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003244:	2b00      	cmp	r3, #0
 8003246:	d124      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11d      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fc46 	bl	8003b24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 020c 	mvn.w	r2, #12
 80032a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <HAL_ADC_IRQHandler+0x21a>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10d      	bne.n	8003304 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f961 	bl	80035bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0201 	mvn.w	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_ADC_IRQHandler+0x27a>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0202 	orr.w	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0220 	mvn.w	r2, #32
 8003352:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f93b 	bl	80035d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f06f 0220 	mvn.w	r2, #32
 8003362:	601a      	str	r2, [r3, #0]
  }
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADC_Start_DMA+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e0b1      	b.n	80034ee <HAL_ADC_Start_DMA+0x182>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d018      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_ADC_Start_DMA+0x18c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_ADC_Start_DMA+0x190>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9a      	lsrs	r2, r3, #18
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033c4:	e002      	b.n	80033cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 8085 	bne.w	80034ec <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800340c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d106      	bne.n	8003430 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f023 0206 	bic.w	r2, r3, #6
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
 800342e:	e002      	b.n	8003436 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800343e:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_ADC_Start_DMA+0x194>)
 8003440:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	4a2f      	ldr	r2, [pc, #188]	; (8003504 <HAL_ADC_Start_DMA+0x198>)
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <HAL_ADC_Start_DMA+0x19c>)
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <HAL_ADC_Start_DMA+0x1a0>)
 8003458:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003462:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003472:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	334c      	adds	r3, #76	; 0x4c
 800348e:	4619      	mov	r1, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f000 fd10 	bl	8003eb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10f      	bne.n	80034c4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11c      	bne.n	80034ec <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	e013      	b.n	80034ec <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <HAL_ADC_Start_DMA+0x1a4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10e      	bne.n	80034ec <HAL_ADC_Start_DMA+0x180>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000020 	.word	0x20000020
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	40012300 	.word	0x40012300
 8003504:	08003a21 	.word	0x08003a21
 8003508:	08003adb 	.word	0x08003adb
 800350c:	08003af7 	.word	0x08003af7
 8003510:	40012000 	.word	0x40012000

08003514 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_ADC_Stop_DMA+0x1a>
 800352a:	2302      	movs	r3, #2
 800352c:	e038      	b.n	80035a0 <HAL_ADC_Stop_DMA+0x8c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d120      	bne.n	8003596 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003562:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fcfd 	bl	8003f68 <HAL_DMA_Abort>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003580:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e105      	b.n	800380c <HAL_ADC_ConfigChannel+0x228>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d925      	bls.n	800365c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	3b1e      	subs	r3, #30
 8003626:	2207      	movs	r2, #7
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68d9      	ldr	r1, [r3, #12]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	4603      	mov	r3, r0
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4403      	add	r3, r0
 800364e:	3b1e      	subs	r3, #30
 8003650:	409a      	lsls	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e022      	b.n	80036a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	2207      	movs	r2, #7
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	4603      	mov	r3, r0
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4403      	add	r3, r0
 8003698:	409a      	lsls	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d824      	bhi.n	80036f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b05      	subs	r3, #5
 80036bc:	221f      	movs	r2, #31
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b05      	subs	r3, #5
 80036e6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	e04c      	b.n	800378e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d824      	bhi.n	8003746 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b23      	subs	r3, #35	; 0x23
 800370e:	221f      	movs	r2, #31
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43da      	mvns	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	400a      	ands	r2, r1
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b23      	subs	r3, #35	; 0x23
 8003738:	fa00 f203 	lsl.w	r2, r0, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
 8003744:	e023      	b.n	800378e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	3b41      	subs	r3, #65	; 0x41
 8003758:	221f      	movs	r2, #31
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	400a      	ands	r2, r1
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	3b41      	subs	r3, #65	; 0x41
 8003782:	fa00 f203 	lsl.w	r2, r0, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_ADC_ConfigChannel+0x234>)
 8003790:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_ADC_ConfigChannel+0x238>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1cc>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d105      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_ADC_ConfigChannel+0x238>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d123      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d003      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x1e6>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b11      	cmp	r3, #17
 80037c8:	d11b      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d111      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_ADC_ConfigChannel+0x23c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_ADC_ConfigChannel+0x240>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	0c9a      	lsrs	r2, r3, #18
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037f4:	e002      	b.n	80037fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012300 	.word	0x40012300
 800381c:	40012000 	.word	0x40012000
 8003820:	20000020 	.word	0x20000020
 8003824:	431bde83 	.word	0x431bde83

08003828 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003830:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <ADC_Init+0x1f0>)
 8003832:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	021a      	lsls	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <ADC_Init+0x1f4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e00f      	b.n	8003926 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003924:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0202 	bic.w	r2, r2, #2
 8003934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	005a      	lsls	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003962:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	3b01      	subs	r3, #1
 8003980:	035a      	lsls	r2, r3, #13
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e007      	b.n	800399c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	051a      	lsls	r2, r3, #20
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039de:	025a      	lsls	r2, r3, #9
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	029a      	lsls	r2, r3, #10
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012300 	.word	0x40012300
 8003a1c:	0f000001 	.word	0x0f000001

08003a20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13c      	bne.n	8003ab4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d12b      	bne.n	8003aac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d127      	bne.n	8003aac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d119      	bne.n	8003aac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0220 	bic.w	r2, r2, #32
 8003a86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7fe fa29 	bl	8001f04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ab2:	e00e      	b.n	8003ad2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fd85 	bl	80035d0 <HAL_ADC_ErrorCallback>
}
 8003ac6:	e004      	b.n	8003ad2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fd5d 	bl	80035a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff fd5a 	bl	80035d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	60d3      	str	r3, [r2, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <__NVIC_GetPriorityGrouping+0x18>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0307 	and.w	r3, r3, #7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0b      	blt.n	8003bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <__NVIC_EnableIRQ+0x38>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db0a      	blt.n	8003c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	490c      	ldr	r1, [pc, #48]	; (8003c24 <__NVIC_SetPriority+0x4c>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c00:	e00a      	b.n	8003c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4908      	ldr	r1, [pc, #32]	; (8003c28 <__NVIC_SetPriority+0x50>)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3b04      	subs	r3, #4
 8003c10:	0112      	lsls	r2, r2, #4
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	440b      	add	r3, r1
 8003c16:	761a      	strb	r2, [r3, #24]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000e100 	.word	0xe000e100
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f1c3 0307 	rsb	r3, r3, #7
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	bf28      	it	cs
 8003c4a:	2304      	movcs	r3, #4
 8003c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d902      	bls.n	8003c5c <NVIC_EncodePriority+0x30>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3b03      	subs	r3, #3
 8003c5a:	e000      	b.n	8003c5e <NVIC_EncodePriority+0x32>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	401a      	ands	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43d9      	mvns	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	4313      	orrs	r3, r2
         );
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca4:	d301      	bcc.n	8003caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00f      	b.n	8003cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <SysTick_Config+0x40>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb2:	210f      	movs	r1, #15
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	f7ff ff8e 	bl	8003bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <SysTick_Config+0x40>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <SysTick_Config+0x40>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000e010 	.word	0xe000e010

08003cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff29 	bl	8003b38 <__NVIC_SetPriorityGrouping>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d00:	f7ff ff3e 	bl	8003b80 <__NVIC_GetPriorityGrouping>
 8003d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f7ff ff8e 	bl	8003c2c <NVIC_EncodePriority>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff5d 	bl	8003bd8 <__NVIC_SetPriority>
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff31 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ffa2 	bl	8003c94 <SysTick_Config>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff f94e 	bl	8003008 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e099      	b.n	8003eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d98:	e00f      	b.n	8003dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d9a:	f7ff f935 	bl	8003008 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d908      	bls.n	8003dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2203      	movs	r2, #3
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e078      	b.n	8003eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e8      	bne.n	8003d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_DMA_Init+0x158>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d117      	bne.n	8003e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb1b 	bl	800449c <DMA_CheckFifoParam>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e016      	b.n	8003eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fad2 	bl	8004430 <DMA_CalcBaseAndBitshift>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	223f      	movs	r2, #63	; 0x3f
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	f010803f 	.word	0xf010803f

08003eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_DMA_Start_IT+0x26>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e040      	b.n	8003f60 <HAL_DMA_Start_IT+0xa8>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d12f      	bne.n	8003f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa64 	bl	80043d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	223f      	movs	r2, #63	; 0x3f
 8003f12:	409a      	lsls	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0216 	orr.w	r2, r2, #22
 8003f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0208 	orr.w	r2, r2, #8
 8003f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e005      	b.n	8003f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f76:	f7ff f847 	bl	8003008 <HAL_GetTick>
 8003f7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d008      	beq.n	8003f9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e052      	b.n	8004040 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0216 	bic.w	r2, r2, #22
 8003fa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_DMA_Abort+0x62>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0208 	bic.w	r2, r2, #8
 8003fd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fea:	e013      	b.n	8004014 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fec:	f7ff f80c 	bl	8003008 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d90c      	bls.n	8004014 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e015      	b.n	8004040 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e4      	bne.n	8003fec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	223f      	movs	r2, #63	; 0x3f
 8004028:	409a      	lsls	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d004      	beq.n	8004066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e00c      	b.n	8004080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2205      	movs	r2, #5
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004098:	4b92      	ldr	r3, [pc, #584]	; (80042e4 <HAL_DMA_IRQHandler+0x258>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a92      	ldr	r2, [pc, #584]	; (80042e8 <HAL_DMA_IRQHandler+0x25c>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2208      	movs	r2, #8
 80040b8:	409a      	lsls	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	2208      	movs	r2, #8
 80040e6:	409a      	lsls	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d012      	beq.n	800412e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	2201      	movs	r2, #1
 800411c:	409a      	lsls	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2204      	movs	r2, #4
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	2204      	movs	r2, #4
 8004152:	409a      	lsls	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	2210      	movs	r2, #16
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d043      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03c      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	2210      	movs	r2, #16
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d024      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e01f      	b.n	80041fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
 80041cc:	e016      	b.n	80041fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0208 	bic.w	r2, r2, #8
 80041ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2220      	movs	r2, #32
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 808e 	beq.w	800432a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8086 	beq.w	800432a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	2220      	movs	r2, #32
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b05      	cmp	r3, #5
 8004234:	d136      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0216 	bic.w	r2, r2, #22
 8004244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <HAL_DMA_IRQHandler+0x1da>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0208 	bic.w	r2, r2, #8
 8004274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	223f      	movs	r2, #63	; 0x3f
 800427c:	409a      	lsls	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d07d      	beq.n	8004396 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
        }
        return;
 80042a2:	e078      	b.n	8004396 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01c      	beq.n	80042ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d030      	beq.n	800432a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
 80042d0:	e02b      	b.n	800432a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d027      	beq.n	800432a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
 80042e2:	e022      	b.n	800432a <HAL_DMA_IRQHandler+0x29e>
 80042e4:	20000020 	.word	0x20000020
 80042e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0210 	bic.w	r2, r2, #16
 8004308:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d032      	beq.n	8004398 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d022      	beq.n	8004384 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2205      	movs	r2, #5
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3301      	adds	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	429a      	cmp	r2, r3
 8004360:	d307      	bcc.n	8004372 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f2      	bne.n	8004356 <HAL_DMA_IRQHandler+0x2ca>
 8004370:	e000      	b.n	8004374 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004372:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
 8004394:	e000      	b.n	8004398 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004396:	bf00      	nop
    }
  }
}
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop

080043a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ae:	b2db      	uxtb	r3, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d108      	bne.n	8004414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004412:	e007      	b.n	8004424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3b10      	subs	r3, #16
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <DMA_CalcBaseAndBitshift+0x64>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <DMA_CalcBaseAndBitshift+0x68>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d909      	bls.n	8004472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58
 8004470:	e007      	b.n	8004482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	aaaaaaab 	.word	0xaaaaaaab
 8004498:	0800a858 	.word	0x0800a858

0800449c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11f      	bne.n	80044f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d855      	bhi.n	8004568 <DMA_CheckFifoParam+0xcc>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <DMA_CheckFifoParam+0x28>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e7 	.word	0x080044e7
 80044cc:	080044d5 	.word	0x080044d5
 80044d0:	08004569 	.word	0x08004569
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d045      	beq.n	800456c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e042      	b.n	800456c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ee:	d13f      	bne.n	8004570 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f4:	e03c      	b.n	8004570 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fe:	d121      	bne.n	8004544 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d836      	bhi.n	8004574 <DMA_CheckFifoParam+0xd8>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <DMA_CheckFifoParam+0x70>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004523 	.word	0x08004523
 8004514:	0800451d 	.word	0x0800451d
 8004518:	08004535 	.word	0x08004535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      break;
 8004520:	e02f      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d024      	beq.n	8004578 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004532:	e021      	b.n	8004578 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800453c:	d11e      	bne.n	800457c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004542:	e01b      	b.n	800457c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <DMA_CheckFifoParam+0xb4>
 800454a:	2b03      	cmp	r3, #3
 800454c:	d003      	beq.n	8004556 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800454e:	e018      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      break;
 8004554:	e015      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
      break;
 8004566:	e00b      	b.n	8004580 <DMA_CheckFifoParam+0xe4>
      break;
 8004568:	bf00      	nop
 800456a:	e00a      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;
 800456c:	bf00      	nop
 800456e:	e008      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;
 8004570:	bf00      	nop
 8004572:	e006      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;   
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <DMA_CheckFifoParam+0xe6>
      break;
 8004580:	bf00      	nop
    }
  } 
  
  return status; 
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	e159      	b.n	8004860 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045ac:	2201      	movs	r2, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	f040 8148 	bne.w	800485a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d00b      	beq.n	80045ea <HAL_GPIO_Init+0x5a>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d007      	beq.n	80045ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045de:	2b11      	cmp	r3, #17
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b12      	cmp	r3, #18
 80045e8:	d130      	bne.n	800464c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 0201 	and.w	r2, r3, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0xfc>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b12      	cmp	r3, #18
 800468a:	d123      	bne.n	80046d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	08da      	lsrs	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3208      	adds	r2, #8
 8004694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	220f      	movs	r2, #15
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	2203      	movs	r2, #3
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0203 	and.w	r2, r3, #3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80a2 	beq.w	800485a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	4b56      	ldr	r3, [pc, #344]	; (8004874 <HAL_GPIO_Init+0x2e4>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	4a55      	ldr	r2, [pc, #340]	; (8004874 <HAL_GPIO_Init+0x2e4>)
 8004720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004724:	6453      	str	r3, [r2, #68]	; 0x44
 8004726:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_GPIO_Init+0x2e4>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004732:	4a51      	ldr	r2, [pc, #324]	; (8004878 <HAL_GPIO_Init+0x2e8>)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a48      	ldr	r2, [pc, #288]	; (800487c <HAL_GPIO_Init+0x2ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d019      	beq.n	8004792 <HAL_GPIO_Init+0x202>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a47      	ldr	r2, [pc, #284]	; (8004880 <HAL_GPIO_Init+0x2f0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0x1fe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a46      	ldr	r2, [pc, #280]	; (8004884 <HAL_GPIO_Init+0x2f4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00d      	beq.n	800478a <HAL_GPIO_Init+0x1fa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a45      	ldr	r2, [pc, #276]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <HAL_GPIO_Init+0x1f6>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a44      	ldr	r2, [pc, #272]	; (800488c <HAL_GPIO_Init+0x2fc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_GPIO_Init+0x1f2>
 800477e:	2304      	movs	r3, #4
 8004780:	e008      	b.n	8004794 <HAL_GPIO_Init+0x204>
 8004782:	2307      	movs	r3, #7
 8004784:	e006      	b.n	8004794 <HAL_GPIO_Init+0x204>
 8004786:	2303      	movs	r3, #3
 8004788:	e004      	b.n	8004794 <HAL_GPIO_Init+0x204>
 800478a:	2302      	movs	r3, #2
 800478c:	e002      	b.n	8004794 <HAL_GPIO_Init+0x204>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_GPIO_Init+0x204>
 8004792:	2300      	movs	r3, #0
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f002 0203 	and.w	r2, r2, #3
 800479a:	0092      	lsls	r2, r2, #2
 800479c:	4093      	lsls	r3, r2
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a4:	4934      	ldr	r1, [pc, #208]	; (8004878 <HAL_GPIO_Init+0x2e8>)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	3302      	adds	r3, #2
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b2:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_GPIO_Init+0x300>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <HAL_GPIO_Init+0x300>)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047dc:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <HAL_GPIO_Init+0x300>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <HAL_GPIO_Init+0x300>)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <HAL_GPIO_Init+0x300>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_GPIO_Init+0x300>)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_GPIO_Init+0x300>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <HAL_GPIO_Init+0x300>)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	f67f aea2 	bls.w	80045ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004868:	bf00      	nop
 800486a:	3724      	adds	r7, #36	; 0x24
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400
 8004884:	40020800 	.word	0x40020800
 8004888:	40020c00 	.word	0x40020c00
 800488c:	40021000 	.word	0x40021000
 8004890:	40013c00 	.word	0x40013c00

08004894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	e001      	b.n	80048b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	807b      	strh	r3, [r7, #2]
 80048d0:	4613      	mov	r3, r2
 80048d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d4:	787b      	ldrb	r3, [r7, #1]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048e0:	e003      	b.n	80048ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	041a      	lsls	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	401a      	ands	r2, r3
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	429a      	cmp	r2, r3
 800490e:	d104      	bne.n	800491a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004910:	887b      	ldrh	r3, [r7, #2]
 8004912:	041a      	lsls	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004918:	e002      	b.n	8004920 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	619a      	str	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fa78 	bl	8001e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e11f      	b.n	8004bae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fd0c 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049c0:	f002 ff84 	bl	80078cc <HAL_RCC_GetPCLK1Freq>
 80049c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a7b      	ldr	r2, [pc, #492]	; (8004bb8 <HAL_I2C_Init+0x25c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d807      	bhi.n	80049e0 <HAL_I2C_Init+0x84>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a7a      	ldr	r2, [pc, #488]	; (8004bbc <HAL_I2C_Init+0x260>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e006      	b.n	80049ee <HAL_I2C_Init+0x92>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a77      	ldr	r2, [pc, #476]	; (8004bc0 <HAL_I2C_Init+0x264>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0db      	b.n	8004bae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <HAL_I2C_Init+0x268>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9b      	lsrs	r3, r3, #18
 8004a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a64      	ldr	r2, [pc, #400]	; (8004bb8 <HAL_I2C_Init+0x25c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d802      	bhi.n	8004a30 <HAL_I2C_Init+0xd4>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	e009      	b.n	8004a44 <HAL_I2C_Init+0xe8>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_I2C_Init+0x26c>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	3301      	adds	r3, #1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4956      	ldr	r1, [pc, #344]	; (8004bb8 <HAL_I2C_Init+0x25c>)
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d80d      	bhi.n	8004a80 <HAL_I2C_Init+0x124>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e59      	subs	r1, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	bf38      	it	cc
 8004a7c:	2304      	movcc	r3, #4
 8004a7e:	e04f      	b.n	8004b20 <HAL_I2C_Init+0x1c4>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d111      	bne.n	8004aac <HAL_I2C_Init+0x150>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	440b      	add	r3, r1
 8004a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e012      	b.n	8004ad2 <HAL_I2C_Init+0x176>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1e58      	subs	r0, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	0099      	lsls	r1, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x17e>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e022      	b.n	8004b20 <HAL_I2C_Init+0x1c4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10e      	bne.n	8004b00 <HAL_I2C_Init+0x1a4>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1e58      	subs	r0, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	440b      	add	r3, r1
 8004af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	e00f      	b.n	8004b20 <HAL_I2C_Init+0x1c4>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1e58      	subs	r0, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	0099      	lsls	r1, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	6809      	ldr	r1, [r1, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6911      	ldr	r1, [r2, #16]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68d2      	ldr	r2, [r2, #12]
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	000186a0 	.word	0x000186a0
 8004bbc:	001e847f 	.word	0x001e847f
 8004bc0:	003d08ff 	.word	0x003d08ff
 8004bc4:	431bde83 	.word	0x431bde83
 8004bc8:	10624dd3 	.word	0x10624dd3

08004bcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	817b      	strh	r3, [r7, #10]
 8004bde:	460b      	mov	r3, r1
 8004be0:	813b      	strh	r3, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be6:	f7fe fa0f 	bl	8003008 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	f040 80d9 	bne.w	8004dac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2319      	movs	r3, #25
 8004c00:	2201      	movs	r2, #1
 8004c02:	496d      	ldr	r1, [pc, #436]	; (8004db8 <HAL_I2C_Mem_Write+0x1ec>)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f002 f8aa 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0cc      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Mem_Write+0x56>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0c5      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d007      	beq.n	8004c48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2221      	movs	r2, #33	; 0x21
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a4d      	ldr	r2, [pc, #308]	; (8004dbc <HAL_I2C_Mem_Write+0x1f0>)
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c8a:	88f8      	ldrh	r0, [r7, #6]
 8004c8c:	893a      	ldrh	r2, [r7, #8]
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 fd54 	bl	8006748 <I2C_RequestMemoryWrite>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d052      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e081      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f002 f92b 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11b      	bne.n	8004d4c <HAL_I2C_Mem_Write+0x180>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1aa      	bne.n	8004caa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f002 f917 	bl	8006f8c <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e016      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000

08004dc0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	813b      	strh	r3, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dda:	f7fe f915 	bl	8003008 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	f040 8123 	bne.w	8005038 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004df2:	4b94      	ldr	r3, [pc, #592]	; (8005044 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	4a93      	ldr	r2, [pc, #588]	; (8005048 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0a1a      	lsrs	r2, r3, #8
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009a      	lsls	r2, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d116      	bne.n	8004e46 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0f9      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d0db      	beq.n	8004e0c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e0eb      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d007      	beq.n	8004e88 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	; 0x22
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2240      	movs	r2, #64	; 0x40
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a61      	ldr	r2, [pc, #388]	; (800504c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8085 	beq.w	8004fde <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004eda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	4a5c      	ldr	r2, [pc, #368]	; (8005054 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	2200      	movs	r2, #0
 8004efa:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	2200      	movs	r2, #0
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	4619      	mov	r1, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	461a      	mov	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	f7fe ffcd 	bl	8003eb8 <HAL_DMA_Start_IT>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8004f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d144      	bne.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f2c:	88f8      	ldrh	r0, [r7, #6]
 8004f2e:	893a      	ldrh	r2, [r7, #8]
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2323      	movs	r3, #35	; 0x23
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f001 fc97 	bl	8006870 <I2C_RequestMemoryRead>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e076      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d108      	bne.n	8004f66 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e007      	b.n	8004f76 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	e03e      	b.n	8005034 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0210 	orr.w	r2, r3, #16
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e02d      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004fde:	88f8      	ldrh	r0, [r7, #6]
 8004fe0:	893a      	ldrh	r2, [r7, #8]
 8004fe2:	8979      	ldrh	r1, [r7, #10]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	2323      	movs	r3, #35	; 0x23
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	4603      	mov	r3, r0
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 fc3e 	bl	8006870 <I2C_RequestMemoryRead>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e01d      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3728      	adds	r7, #40	; 0x28
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000020 	.word	0x20000020
 8005048:	14f8b589 	.word	0x14f8b589
 800504c:	ffff0000 	.word	0xffff0000
 8005050:	08006a3d 	.word	0x08006a3d
 8005054:	08006be7 	.word	0x08006be7

08005058 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7fd ffce 	bl	8003008 <HAL_GetTick>
 800506c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800506e:	2301      	movs	r3, #1
 8005070:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	f040 8110 	bne.w	80052a0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2319      	movs	r3, #25
 8005086:	2201      	movs	r2, #1
 8005088:	4988      	ldr	r1, [pc, #544]	; (80052ac <HAL_I2C_IsDeviceReady+0x254>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f001 fe67 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	e103      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_I2C_IsDeviceReady+0x50>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0fc      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d007      	beq.n	80050ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a70      	ldr	r2, [pc, #448]	; (80052b0 <HAL_I2C_IsDeviceReady+0x258>)
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005100:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f001 fe25 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0b6      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005134:	897b      	ldrh	r3, [r7, #10]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005142:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005144:	f7fd ff60 	bl	8003008 <HAL_GetTick>
 8005148:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005178:	e025      	b.n	80051c6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fd ff45 	bl	8003008 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <HAL_I2C_IsDeviceReady+0x138>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	22a0      	movs	r2, #160	; 0xa0
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2ba0      	cmp	r3, #160	; 0xa0
 80051d0:	d005      	beq.n	80051de <HAL_I2C_IsDeviceReady+0x186>
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <HAL_I2C_IsDeviceReady+0x186>
 80051d8:	7dbb      	ldrb	r3, [r7, #22]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0cd      	beq.n	800517a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d129      	bne.n	8005248 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005202:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2319      	movs	r3, #25
 8005220:	2201      	movs	r2, #1
 8005222:	4922      	ldr	r1, [pc, #136]	; (80052ac <HAL_I2C_IsDeviceReady+0x254>)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f001 fd9a 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e036      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e02c      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005260:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2319      	movs	r3, #25
 8005268:	2201      	movs	r2, #1
 800526a:	4910      	ldr	r1, [pc, #64]	; (80052ac <HAL_I2C_IsDeviceReady+0x254>)
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f001 fd76 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e012      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	3301      	adds	r3, #1
 8005280:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	f4ff af33 	bcc.w	80050f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00100002 	.word	0x00100002
 80052b0:	ffff0000 	.word	0xffff0000

080052b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d003      	beq.n	80052ec <HAL_I2C_EV_IRQHandler+0x38>
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	f040 80b6 	bne.w	8005458 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_I2C_EV_IRQHandler+0x6e>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800530c:	d003      	beq.n	8005316 <HAL_I2C_EV_IRQHandler+0x62>
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005314:	d101      	bne.n	800531a <HAL_I2C_EV_IRQHandler+0x66>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_I2C_EV_IRQHandler+0x68>
 800531a:	2300      	movs	r3, #0
 800531c:	2b01      	cmp	r3, #1
 800531e:	f000 8127 	beq.w	8005570 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x92>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	0a5b      	lsrs	r3, r3, #9
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fe97 	bl	800706c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc61 	bl	8005c06 <I2C_Master_SB>
 8005344:	e087      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_I2C_EV_IRQHandler+0xb2>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fcd7 	bl	8005d12 <I2C_Master_ADD10>
 8005364:	e077      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_I2C_EV_IRQHandler+0xd2>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	0a5b      	lsrs	r3, r3, #9
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fcf1 	bl	8005d66 <I2C_Master_ADDR>
 8005384:	e067      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d030      	beq.n	80053f4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a0:	f000 80e8 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	09db      	lsrs	r3, r3, #7
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00f      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	0a9b      	lsrs	r3, r3, #10
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f92d 	bl	8005628 <I2C_MasterTransmit_TXE>
 80053ce:	e042      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80cb 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0a5b      	lsrs	r3, r3, #9
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80c4 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9b7 	bl	8005760 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053f2:	e0bf      	b.n	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005402:	f000 80b7 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00f      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x17e>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	0a9b      	lsrs	r3, r3, #10
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x17e>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa7f 	bl	800592e <I2C_MasterReceive_RXNE>
 8005430:	e011      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	089b      	lsrs	r3, r3, #2
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809a 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	0a5b      	lsrs	r3, r3, #9
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8093 	beq.w	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 faef 	bl	8005a32 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005454:	e08e      	b.n	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005456:	e08d      	b.n	8005574 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e007      	b.n	800547a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <HAL_I2C_EV_IRQHandler+0x1f8>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	0a5b      	lsrs	r3, r3, #9
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80054a2:	69b9      	ldr	r1, [r7, #24]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fead 	bl	8006204 <I2C_Slave_ADDR>
 80054aa:	e066      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <HAL_I2C_EV_IRQHandler+0x218>
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	0a5b      	lsrs	r3, r3, #9
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fee1 	bl	800628c <I2C_Slave_STOPF>
 80054ca:	e056      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	2b21      	cmp	r3, #33	; 0x21
 80054d0:	d002      	beq.n	80054d8 <HAL_I2C_EV_IRQHandler+0x224>
 80054d2:	7bbb      	ldrb	r3, [r7, #14]
 80054d4:	2b29      	cmp	r3, #41	; 0x29
 80054d6:	d125      	bne.n	8005524 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00f      	beq.n	8005504 <HAL_I2C_EV_IRQHandler+0x250>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	0a9b      	lsrs	r3, r3, #10
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <HAL_I2C_EV_IRQHandler+0x250>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fdc3 	bl	8006088 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005502:	e039      	b.n	8005578 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d033      	beq.n	8005578 <HAL_I2C_EV_IRQHandler+0x2c4>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	0a5b      	lsrs	r3, r3, #9
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02d      	beq.n	8005578 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fdf0 	bl	8006102 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005522:	e029      	b.n	8005578 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <HAL_I2C_EV_IRQHandler+0x29c>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	0a9b      	lsrs	r3, r3, #10
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_I2C_EV_IRQHandler+0x29c>
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	089b      	lsrs	r3, r3, #2
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d103      	bne.n	8005550 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fdfb 	bl	8006144 <I2C_SlaveReceive_RXNE>
 800554e:	e014      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	0a5b      	lsrs	r3, r3, #9
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fe29 	bl	80061c0 <I2C_SlaveReceive_BTF>
 800556e:	e004      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005578:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
 80055dc:	4613      	mov	r3, r2
 80055de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005636:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d150      	bne.n	80056f0 <I2C_MasterTransmit_TXE+0xc8>
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b21      	cmp	r3, #33	; 0x21
 8005652:	d14d      	bne.n	80056f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b08      	cmp	r3, #8
 8005658:	d01d      	beq.n	8005696 <I2C_MasterTransmit_TXE+0x6e>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b20      	cmp	r3, #32
 800565e:	d01a      	beq.n	8005696 <I2C_MasterTransmit_TXE+0x6e>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005666:	d016      	beq.n	8005696 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005676:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2211      	movs	r2, #17
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff76 	bl	8005580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005694:	e060      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d107      	bne.n	80056e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fb fd19 	bl	8001110 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056de:	e03b      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff49 	bl	8005580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056ee:	e033      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b21      	cmp	r3, #33	; 0x21
 80056f4:	d005      	beq.n	8005702 <I2C_MasterTransmit_TXE+0xda>
 80056f6:	7bbb      	ldrb	r3, [r7, #14]
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d12d      	bne.n	8005758 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b22      	cmp	r3, #34	; 0x22
 8005700:	d12a      	bne.n	8005758 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800571c:	e01c      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d103      	bne.n	8005732 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f898 	bl	8005860 <I2C_MemoryTransmit_TXE_BTF>
}
 8005730:	e012      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005756:	e7ff      	b.n	8005758 <I2C_MasterTransmit_TXE+0x130>
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b21      	cmp	r3, #33	; 0x21
 8005778:	d165      	bne.n	8005846 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80057a8:	e056      	b.n	8005858 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d01d      	beq.n	80057ec <I2C_MasterTransmit_BTF+0x8c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d01a      	beq.n	80057ec <I2C_MasterTransmit_BTF+0x8c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057bc:	d016      	beq.n	80057ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2211      	movs	r2, #17
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fecb 	bl	8005580 <HAL_I2C_MasterTxCpltCallback>
}
 80057ea:	e035      	b.n	8005858 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d107      	bne.n	8005836 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fc6e 	bl	8001110 <HAL_I2C_MemTxCpltCallback>
}
 8005834:	e010      	b.n	8005858 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fe9e 	bl	8005580 <HAL_I2C_MasterTxCpltCallback>
}
 8005844:	e008      	b.n	8005858 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d102      	bne.n	8005858 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f804 	bl	8005860 <I2C_MemoryTransmit_TXE_BTF>
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11d      	bne.n	80058ac <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10b      	bne.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	b2da      	uxtb	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800588e:	e048      	b.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005894:	b29b      	uxth	r3, r3
 8005896:	121b      	asrs	r3, r3, #8
 8005898:	b2da      	uxtb	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058aa:	e03a      	b.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10b      	bne.n	80058cc <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058ca:	e02a      	b.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d126      	bne.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b22      	cmp	r3, #34	; 0x22
 80058de:	d108      	bne.n	80058f2 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ee:	601a      	str	r2, [r3, #0]
}
 80058f0:	e017      	b.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b21      	cmp	r3, #33	; 0x21
 80058fc:	d111      	bne.n	8005922 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b22      	cmp	r3, #34	; 0x22
 8005940:	d173      	bne.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d920      	bls.n	8005992 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b03      	cmp	r3, #3
 800597e:	d154      	bne.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005990:	e04b      	b.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	2b02      	cmp	r3, #2
 8005998:	d047      	beq.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d002      	beq.n	80059a6 <I2C_MasterReceive_RXNE+0x78>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d141      	bne.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059c4:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d10a      	bne.n	8005a16 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fb fb88 	bl	8001124 <HAL_I2C_MemRxCpltCallback>
}
 8005a14:	e009      	b.n	8005a2a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2212      	movs	r2, #18
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fdb5 	bl	8005594 <HAL_I2C_MasterRxCpltCallback>
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d11b      	bne.n	8005a82 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a58:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a80:	e0bd      	b.n	8005bfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d129      	bne.n	8005ae0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d00a      	beq.n	8005ab8 <I2C_MasterReceive_BTF+0x86>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d007      	beq.n	8005ab8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ade:	e08e      	b.n	8005bfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d176      	bne.n	8005bd8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d002      	beq.n	8005af6 <I2C_MasterReceive_BTF+0xc4>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d108      	bne.n	8005b08 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e019      	b.n	8005b3c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d002      	beq.n	8005b14 <I2C_MasterReceive_BTF+0xe2>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d108      	bne.n	8005b26 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e00a      	b.n	8005b3c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d007      	beq.n	8005b3c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d10a      	bne.n	8005bc2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb fab2 	bl	8001124 <HAL_I2C_MemRxCpltCallback>
}
 8005bc0:	e01d      	b.n	8005bfe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2212      	movs	r2, #18
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fcdf 	bl	8005594 <HAL_I2C_MasterRxCpltCallback>
}
 8005bd6:	e012      	b.n	8005bfe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d117      	bne.n	8005c4a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c32:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c34:	e067      	b.n	8005d06 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]
}
 8005c48:	e05d      	b.n	8005d06 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c52:	d133      	bne.n	8005cbc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b21      	cmp	r3, #33	; 0x21
 8005c5e:	d109      	bne.n	8005c74 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	e008      	b.n	8005c86 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <I2C_Master_SB+0x92>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d032      	beq.n	8005d06 <I2C_Master_SB+0x100>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02d      	beq.n	8005d06 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb8:	605a      	str	r2, [r3, #4]
}
 8005cba:	e024      	b.n	8005d06 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	11db      	asrs	r3, r3, #7
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0306 	and.w	r3, r3, #6
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f063 030f 	orn	r3, r3, #15
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	611a      	str	r2, [r3, #16]
}
 8005ce0:	e011      	b.n	8005d06 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d10d      	bne.n	8005d06 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	11db      	asrs	r3, r3, #7
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0306 	and.w	r3, r3, #6
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f063 030e 	orn	r3, r3, #14
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	611a      	str	r2, [r3, #16]
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <I2C_Master_ADD10+0x24>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d011      	beq.n	8005d5a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <I2C_Master_ADD10+0x38>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d58:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b091      	sub	sp, #68	; 0x44
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b22      	cmp	r3, #34	; 0x22
 8005d8e:	f040 8169 	bne.w	8006064 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <I2C_Master_ADDR+0x54>
 8005d9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10b      	bne.n	8005dba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da2:	2300      	movs	r3, #0
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	e160      	b.n	800607c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11d      	bne.n	8005dfe <I2C_Master_ADDR+0x98>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dca:	d118      	bne.n	8005dfe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8005dfc:	e13e      	b.n	800607c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d113      	bne.n	8005e30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e115      	b.n	800605c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 808a 	bne.w	8005f50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e42:	d137      	bne.n	8005eb4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e62:	d113      	bne.n	8005e8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e74:	2300      	movs	r3, #0
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	e0e7      	b.n	800605c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	623b      	str	r3, [r7, #32]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e0d3      	b.n	800605c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d02e      	beq.n	8005f18 <I2C_Master_ADDR+0x1b2>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d02b      	beq.n	8005f18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	2b12      	cmp	r3, #18
 8005ec4:	d102      	bne.n	8005ecc <I2C_Master_ADDR+0x166>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d125      	bne.n	8005f18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d00e      	beq.n	8005ef0 <I2C_Master_ADDR+0x18a>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d00b      	beq.n	8005ef0 <I2C_Master_ADDR+0x18a>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d008      	beq.n	8005ef0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e007      	b.n	8005f00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005efe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	e0a1      	b.n	800605c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e085      	b.n	800605c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d14d      	bne.n	8005ff6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d016      	beq.n	8005f8e <I2C_Master_ADDR+0x228>
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d013      	beq.n	8005f8e <I2C_Master_ADDR+0x228>
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d010      	beq.n	8005f8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e007      	b.n	8005f9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d117      	bne.n	8005fde <I2C_Master_ADDR+0x278>
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fb4:	d00b      	beq.n	8005fce <I2C_Master_ADDR+0x268>
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d008      	beq.n	8005fce <I2C_Master_ADDR+0x268>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d005      	beq.n	8005fce <I2C_Master_ADDR+0x268>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d002      	beq.n	8005fce <I2C_Master_ADDR+0x268>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d107      	bne.n	8005fde <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e032      	b.n	800605c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006004:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006014:	d117      	bne.n	8006046 <I2C_Master_ADDR+0x2e0>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800601c:	d00b      	beq.n	8006036 <I2C_Master_ADDR+0x2d0>
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	2b01      	cmp	r3, #1
 8006022:	d008      	beq.n	8006036 <I2C_Master_ADDR+0x2d0>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b08      	cmp	r3, #8
 8006028:	d005      	beq.n	8006036 <I2C_Master_ADDR+0x2d0>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b10      	cmp	r3, #16
 800602e:	d002      	beq.n	8006036 <I2C_Master_ADDR+0x2d0>
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	2b20      	cmp	r3, #32
 8006034:	d107      	bne.n	8006046 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006044:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006062:	e00b      	b.n	800607c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	e7ff      	b.n	800607c <I2C_Master_ADDR+0x316>
 800607c:	bf00      	nop
 800607e:	3744      	adds	r7, #68	; 0x44
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006096:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02b      	beq.n	80060fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d114      	bne.n	80060fa <I2C_SlaveTransmit_TXE+0x72>
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b29      	cmp	r3, #41	; 0x29
 80060d4:	d111      	bne.n	80060fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2228      	movs	r2, #40	; 0x28
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fa57 	bl	80055a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d011      	beq.n	8006138 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006152:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02c      	beq.n	80061b8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d114      	bne.n	80061b8 <I2C_SlaveReceive_RXNE+0x74>
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b2a      	cmp	r3, #42	; 0x2a
 8006192:	d111      	bne.n	80061b8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2222      	movs	r2, #34	; 0x22
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2228      	movs	r2, #40	; 0x28
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fa02 	bl	80055bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d012      	beq.n	80061f8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800621e:	2b28      	cmp	r3, #40	; 0x28
 8006220:	d127      	bne.n	8006272 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006230:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800623e:	2301      	movs	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	81bb      	strh	r3, [r7, #12]
 8006254:	e002      	b.n	800625c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006264:	89ba      	ldrh	r2, [r7, #12]
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f9b0 	bl	80055d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006270:	e008      	b.n	8006284 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f06f 0202 	mvn.w	r2, #2
 800627a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80062ac:	2300      	movs	r3, #0
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e8:	d172      	bne.n	80063d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b22      	cmp	r3, #34	; 0x22
 80062ee:	d002      	beq.n	80062f6 <I2C_Slave_STOPF+0x6a>
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b2a      	cmp	r3, #42	; 0x2a
 80062f4:	d135      	bne.n	8006362 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f043 0204 	orr.w	r2, r3, #4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006328:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe f836 	bl	80043a0 <HAL_DMA_GetState>
 8006334:	4603      	mov	r3, r0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d049      	beq.n	80063ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	4a69      	ldr	r2, [pc, #420]	; (80064e4 <I2C_Slave_STOPF+0x258>)
 8006340:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	4618      	mov	r0, r3
 8006348:	f7fd fe7e 	bl	8004048 <HAL_DMA_Abort_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d03d      	beq.n	80063ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006360:	e035      	b.n	80063ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006394:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe f800 	bl	80043a0 <HAL_DMA_GetState>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d014      	beq.n	80063d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	4a4e      	ldr	r2, [pc, #312]	; (80064e4 <I2C_Slave_STOPF+0x258>)
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fd fe48 	bl	8004048 <HAL_DMA_Abort_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	e000      	b.n	80063d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03e      	beq.n	8006458 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d112      	bne.n	800640e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d112      	bne.n	8006442 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f043 0204 	orr.w	r2, r3, #4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f843 	bl	80064ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006466:	e039      	b.n	80064dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b2a      	cmp	r3, #42	; 0x2a
 800646c:	d109      	bne.n	8006482 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2228      	movs	r2, #40	; 0x28
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f89d 	bl	80055bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b28      	cmp	r3, #40	; 0x28
 800648c:	d111      	bne.n	80064b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <I2C_Slave_STOPF+0x25c>)
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff f89e 	bl	80055ec <HAL_I2C_ListenCpltCallback>
}
 80064b0:	e014      	b.n	80064dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	2b22      	cmp	r3, #34	; 0x22
 80064b8:	d002      	beq.n	80064c0 <I2C_Slave_STOPF+0x234>
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b22      	cmp	r3, #34	; 0x22
 80064be:	d10d      	bne.n	80064dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f870 	bl	80055bc <HAL_I2C_SlaveRxCpltCallback>
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	08006c61 	.word	0x08006c61
 80064e8:	ffff0000 	.word	0xffff0000

080064ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b10      	cmp	r3, #16
 8006506:	d10a      	bne.n	800651e <I2C_ITError+0x32>
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b22      	cmp	r3, #34	; 0x22
 800650c:	d107      	bne.n	800651e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800651c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006524:	2b28      	cmp	r3, #40	; 0x28
 8006526:	d107      	bne.n	8006538 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2228      	movs	r2, #40	; 0x28
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006536:	e015      	b.n	8006564 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006546:	d006      	beq.n	8006556 <I2C_ITError+0x6a>
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b60      	cmp	r3, #96	; 0x60
 800654c:	d003      	beq.n	8006556 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006572:	d162      	bne.n	800663a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006582:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d020      	beq.n	80065d4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	4a6a      	ldr	r2, [pc, #424]	; (8006740 <I2C_ITError+0x254>)
 8006598:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fd fd52 	bl	8004048 <HAL_DMA_Abort_IT>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8089 	beq.w	80066be <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065ce:	4610      	mov	r0, r2
 80065d0:	4798      	blx	r3
 80065d2:	e074      	b.n	80066be <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4a59      	ldr	r2, [pc, #356]	; (8006740 <I2C_ITError+0x254>)
 80065da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd fd31 	bl	8004048 <HAL_DMA_Abort_IT>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d068      	beq.n	80066be <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d10b      	bne.n	8006612 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	e041      	b.n	80066be <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b60      	cmp	r3, #96	; 0x60
 8006644:	d125      	bne.n	8006692 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d10b      	bne.n	800667a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe ffc2 	bl	8005614 <HAL_I2C_AbortCpltCallback>
 8006690:	e015      	b.n	80066be <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d10b      	bne.n	80066b8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fe ffa1 	bl	8005600 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10e      	bne.n	80066ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006702:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b04      	cmp	r3, #4
 800670e:	d113      	bne.n	8006738 <I2C_ITError+0x24c>
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b28      	cmp	r3, #40	; 0x28
 8006714:	d110      	bne.n	8006738 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <I2C_ITError+0x258>)
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fe ff5a 	bl	80055ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	08006c61 	.word	0x08006c61
 8006744:	ffff0000 	.word	0xffff0000

08006748 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	4608      	mov	r0, r1
 8006752:	4611      	mov	r1, r2
 8006754:	461a      	mov	r2, r3
 8006756:	4603      	mov	r3, r0
 8006758:	817b      	strh	r3, [r7, #10]
 800675a:	460b      	mov	r3, r1
 800675c:	813b      	strh	r3, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2200      	movs	r2, #0
 800677a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 faed 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e05f      	b.n	8006864 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a4:	897b      	ldrh	r3, [r7, #10]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	6a3a      	ldr	r2, [r7, #32]
 80067b8:	492c      	ldr	r1, [pc, #176]	; (800686c <I2C_RequestMemoryWrite+0x124>)
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fb26 	bl	8006e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e04c      	b.n	8006864 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	6a39      	ldr	r1, [r7, #32]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fb90 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d107      	bne.n	8006808 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006806:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e02b      	b.n	8006864 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	611a      	str	r2, [r3, #16]
 800681c:	e021      	b.n	8006862 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800681e:	893b      	ldrh	r3, [r7, #8]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	b29b      	uxth	r3, r3
 8006824:	b2da      	uxtb	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682e:	6a39      	ldr	r1, [r7, #32]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fb6a 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00d      	beq.n	8006858 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	2b04      	cmp	r3, #4
 8006842:	d107      	bne.n	8006854 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e005      	b.n	8006864 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	00010002 	.word	0x00010002

08006870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	4603      	mov	r3, r0
 8006880:	817b      	strh	r3, [r7, #10]
 8006882:	460b      	mov	r3, r1
 8006884:	813b      	strh	r3, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fa51 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00c      	beq.n	80068dc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e0a9      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068dc:	897b      	ldrh	r3, [r7, #10]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	4951      	ldr	r1, [pc, #324]	; (8006a38 <I2C_RequestMemoryRead+0x1c8>)
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fa8a 	bl	8006e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e096      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691a:	6a39      	ldr	r1, [r7, #32]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 faf4 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00d      	beq.n	8006944 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	2b04      	cmp	r3, #4
 800692e:	d107      	bne.n	8006940 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e075      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800694a:	893b      	ldrh	r3, [r7, #8]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	611a      	str	r2, [r3, #16]
 8006954:	e021      	b.n	800699a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	b29b      	uxth	r3, r3
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	6a39      	ldr	r1, [r7, #32]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 face 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00d      	beq.n	8006990 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b04      	cmp	r3, #4
 800697a:	d107      	bne.n	800698c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e04f      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	6a39      	ldr	r1, [r7, #32]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fab3 	bl	8006f0a <I2C_WaitOnTXEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d107      	bne.n	80069c2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e034      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	2200      	movs	r2, #0
 80069de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f9bb 	bl	8006d5e <I2C_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e013      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a08:	897b      	ldrh	r3, [r7, #10]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	4906      	ldr	r1, [pc, #24]	; (8006a38 <I2C_RequestMemoryRead+0x1c8>)
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f9f4 	bl	8006e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	00010002 	.word	0x00010002

08006a3c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a50:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a58:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a96:	2b21      	cmp	r3, #33	; 0x21
 8006a98:	d007      	beq.n	8006aaa <I2C_DMAXferCplt+0x6e>
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006aa0:	2b22      	cmp	r3, #34	; 0x22
 8006aa2:	d131      	bne.n	8006b08 <I2C_DMAXferCplt+0xcc>
 8006aa4:	7cbb      	ldrb	r3, [r7, #18]
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d12e      	bne.n	8006b08 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	2b29      	cmp	r3, #41	; 0x29
 8006ac4:	d10a      	bne.n	8006adc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2228      	movs	r2, #40	; 0x28
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad4:	6978      	ldr	r0, [r7, #20]
 8006ad6:	f7fe fd67 	bl	80055a8 <HAL_I2C_SlaveTxCpltCallback>
 8006ada:	e00c      	b.n	8006af6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae0:	d109      	bne.n	8006af6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2222      	movs	r2, #34	; 0x22
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2228      	movs	r2, #40	; 0x28
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006af0:	6978      	ldr	r0, [r7, #20]
 8006af2:	f7fe fd63 	bl	80055bc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006b04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b06:	e06a      	b.n	8006bde <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d064      	beq.n	8006bde <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b44:	d009      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d006      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b52:	d002      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d107      	bne.n	8006b6a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b78:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b88:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f7fe fd31 	bl	8005600 <HAL_I2C_ErrorCallback>
}
 8006b9e:	e01e      	b.n	8006bde <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d10a      	bne.n	8006bca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f7fa faae 	bl	8001124 <HAL_I2C_MemRxCpltCallback>
}
 8006bc8:	e009      	b.n	8006bde <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2212      	movs	r2, #18
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006bd8:	6978      	ldr	r0, [r7, #20]
 8006bda:	f7fe fcdb 	bl	8005594 <HAL_I2C_MasterRxCpltCallback>
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	2200      	movs	r2, #0
 8006c02:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	2200      	movs	r2, #0
 8006c12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fd fbd1 	bl	80043bc <HAL_DMA_GetError>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d01b      	beq.n	8006c58 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f043 0210 	orr.w	r2, r3, #16
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7fe fcd4 	bl	8005600 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	2200      	movs	r2, #0
 8006c84:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	2200      	movs	r2, #0
 8006c94:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb8:	2200      	movs	r2, #0
 8006cba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	2200      	movs	r2, #0
 8006cca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b60      	cmp	r3, #96	; 0x60
 8006ce6:	d10e      	bne.n	8006d06 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7fe fc88 	bl	8005614 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d04:	e027      	b.n	8006d56 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d0c:	2b28      	cmp	r3, #40	; 0x28
 8006d0e:	d117      	bne.n	8006d40 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2228      	movs	r2, #40	; 0x28
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d3e:	e007      	b.n	8006d50 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7fe fc55 	bl	8005600 <HAL_I2C_ErrorCallback>
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d6e:	e025      	b.n	8006dbc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d021      	beq.n	8006dbc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d78:	f7fc f946 	bl	8003008 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d302      	bcc.n	8006d8e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d116      	bne.n	8006dbc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	f043 0220 	orr.w	r2, r3, #32
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e023      	b.n	8006e04 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10d      	bne.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	43da      	mvns	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	e00c      	b.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	43da      	mvns	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d0b6      	beq.n	8006d70 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e1a:	e051      	b.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2a:	d123      	bne.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	f043 0204 	orr.w	r2, r3, #4
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e046      	b.n	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d021      	beq.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7c:	f7fc f8c4 	bl	8003008 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d302      	bcc.n	8006e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d116      	bne.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	f043 0220 	orr.w	r2, r3, #32
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e020      	b.n	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	0c1b      	lsrs	r3, r3, #16
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10c      	bne.n	8006ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	43da      	mvns	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e00b      	b.n	8006efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	43da      	mvns	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bf14      	ite	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	2300      	moveq	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d18d      	bne.n	8006e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f16:	e02d      	b.n	8006f74 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f878 	bl	800700e <I2C_IsAcknowledgeFailed>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e02d      	b.n	8006f84 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d021      	beq.n	8006f74 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f30:	f7fc f86a 	bl	8003008 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d302      	bcc.n	8006f46 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d116      	bne.n	8006f74 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e007      	b.n	8006f84 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b80      	cmp	r3, #128	; 0x80
 8006f80:	d1ca      	bne.n	8006f18 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f98:	e02d      	b.n	8006ff6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f837 	bl	800700e <I2C_IsAcknowledgeFailed>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02d      	b.n	8007006 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d021      	beq.n	8006ff6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb2:	f7fc f829 	bl	8003008 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d116      	bne.n	8006ff6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e007      	b.n	8007006 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d1ca      	bne.n	8006f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007024:	d11b      	bne.n	800705e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800702e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800707c:	d103      	bne.n	8007086 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007084:	e007      	b.n	8007096 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800708e:	d102      	bne.n	8007096 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2208      	movs	r2, #8
 8007094:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e25b      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d075      	beq.n	80071ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070c2:	4ba3      	ldr	r3, [pc, #652]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 030c 	and.w	r3, r3, #12
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d00c      	beq.n	80070e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ce:	4ba0      	ldr	r3, [pc, #640]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d112      	bne.n	8007100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070da:	4b9d      	ldr	r3, [pc, #628]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070e6:	d10b      	bne.n	8007100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e8:	4b99      	ldr	r3, [pc, #612]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d05b      	beq.n	80071ac <HAL_RCC_OscConfig+0x108>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d157      	bne.n	80071ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e236      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007108:	d106      	bne.n	8007118 <HAL_RCC_OscConfig+0x74>
 800710a:	4b91      	ldr	r3, [pc, #580]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a90      	ldr	r2, [pc, #576]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e01d      	b.n	8007154 <HAL_RCC_OscConfig+0xb0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007120:	d10c      	bne.n	800713c <HAL_RCC_OscConfig+0x98>
 8007122:	4b8b      	ldr	r3, [pc, #556]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a8a      	ldr	r2, [pc, #552]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4b88      	ldr	r3, [pc, #544]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a87      	ldr	r2, [pc, #540]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e00b      	b.n	8007154 <HAL_RCC_OscConfig+0xb0>
 800713c:	4b84      	ldr	r3, [pc, #528]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a83      	ldr	r2, [pc, #524]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4b81      	ldr	r3, [pc, #516]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a80      	ldr	r2, [pc, #512]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 800714e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d013      	beq.n	8007184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715c:	f7fb ff54 	bl	8003008 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007164:	f7fb ff50 	bl	8003008 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b64      	cmp	r3, #100	; 0x64
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1fb      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007176:	4b76      	ldr	r3, [pc, #472]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCC_OscConfig+0xc0>
 8007182:	e014      	b.n	80071ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fb ff40 	bl	8003008 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800718c:	f7fb ff3c 	bl	8003008 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b64      	cmp	r3, #100	; 0x64
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e1e7      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800719e:	4b6c      	ldr	r3, [pc, #432]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0xe8>
 80071aa:	e000      	b.n	80071ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d063      	beq.n	8007282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ba:	4b65      	ldr	r3, [pc, #404]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c6:	4b62      	ldr	r3, [pc, #392]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d11c      	bne.n	800720c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071d2:	4b5f      	ldr	r3, [pc, #380]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d116      	bne.n	800720c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071de:	4b5c      	ldr	r3, [pc, #368]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_RCC_OscConfig+0x152>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d001      	beq.n	80071f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e1bb      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f6:	4b56      	ldr	r3, [pc, #344]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4952      	ldr	r1, [pc, #328]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720a:	e03a      	b.n	8007282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007214:	4b4f      	ldr	r3, [pc, #316]	; (8007354 <HAL_RCC_OscConfig+0x2b0>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fb fef5 	bl	8003008 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007222:	f7fb fef1 	bl	8003008 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e19c      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007234:	4b46      	ldr	r3, [pc, #280]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	4b43      	ldr	r3, [pc, #268]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	4940      	ldr	r1, [pc, #256]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	e015      	b.n	8007282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b3f      	ldr	r3, [pc, #252]	; (8007354 <HAL_RCC_OscConfig+0x2b0>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fb fed4 	bl	8003008 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007264:	f7fb fed0 	bl	8003008 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e17b      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b36      	ldr	r3, [pc, #216]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d030      	beq.n	80072f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b30      	ldr	r3, [pc, #192]	; (8007358 <HAL_RCC_OscConfig+0x2b4>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729c:	f7fb feb4 	bl	8003008 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072a4:	f7fb feb0 	bl	8003008 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e15b      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80072b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x200>
 80072c2:	e015      	b.n	80072f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c4:	4b24      	ldr	r3, [pc, #144]	; (8007358 <HAL_RCC_OscConfig+0x2b4>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ca:	f7fb fe9d 	bl	8003008 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d2:	f7fb fe99 	bl	8003008 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e144      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 80072e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f0      	bne.n	80072d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a0 	beq.w	800743e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	4a0e      	ldr	r2, [pc, #56]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731c:	6413      	str	r3, [r2, #64]	; 0x40
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <HAL_RCC_OscConfig+0x2ac>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800732a:	2301      	movs	r3, #1
 800732c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <HAL_RCC_OscConfig+0x2b8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d121      	bne.n	800737e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800733a:	4b08      	ldr	r3, [pc, #32]	; (800735c <HAL_RCC_OscConfig+0x2b8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a07      	ldr	r2, [pc, #28]	; (800735c <HAL_RCC_OscConfig+0x2b8>)
 8007340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007346:	f7fb fe5f 	bl	8003008 <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734c:	e011      	b.n	8007372 <HAL_RCC_OscConfig+0x2ce>
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800
 8007354:	42470000 	.word	0x42470000
 8007358:	42470e80 	.word	0x42470e80
 800735c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007360:	f7fb fe52 	bl	8003008 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e0fd      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007372:	4b81      	ldr	r3, [pc, #516]	; (8007578 <HAL_RCC_OscConfig+0x4d4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d106      	bne.n	8007394 <HAL_RCC_OscConfig+0x2f0>
 8007386:	4b7d      	ldr	r3, [pc, #500]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	4a7c      	ldr	r2, [pc, #496]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6713      	str	r3, [r2, #112]	; 0x70
 8007392:	e01c      	b.n	80073ce <HAL_RCC_OscConfig+0x32a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b05      	cmp	r3, #5
 800739a:	d10c      	bne.n	80073b6 <HAL_RCC_OscConfig+0x312>
 800739c:	4b77      	ldr	r3, [pc, #476]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	4a76      	ldr	r2, [pc, #472]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073a2:	f043 0304 	orr.w	r3, r3, #4
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
 80073a8:	4b74      	ldr	r3, [pc, #464]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	4a73      	ldr	r2, [pc, #460]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	; 0x70
 80073b4:	e00b      	b.n	80073ce <HAL_RCC_OscConfig+0x32a>
 80073b6:	4b71      	ldr	r3, [pc, #452]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	4a70      	ldr	r2, [pc, #448]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	6713      	str	r3, [r2, #112]	; 0x70
 80073c2:	4b6e      	ldr	r3, [pc, #440]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	4a6d      	ldr	r2, [pc, #436]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073c8:	f023 0304 	bic.w	r3, r3, #4
 80073cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d015      	beq.n	8007402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d6:	f7fb fe17 	bl	8003008 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073dc:	e00a      	b.n	80073f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073de:	f7fb fe13 	bl	8003008 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e0bc      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	4b61      	ldr	r3, [pc, #388]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0ee      	beq.n	80073de <HAL_RCC_OscConfig+0x33a>
 8007400:	e014      	b.n	800742c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007402:	f7fb fe01 	bl	8003008 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fb fdfd 	bl	8003008 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	; 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0a6      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007420:	4b56      	ldr	r3, [pc, #344]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ee      	bne.n	800740a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d105      	bne.n	800743e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007432:	4b52      	ldr	r3, [pc, #328]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	4a51      	ldr	r2, [pc, #324]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 8007438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8092 	beq.w	800756c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007448:	4b4c      	ldr	r3, [pc, #304]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 030c 	and.w	r3, r3, #12
 8007450:	2b08      	cmp	r3, #8
 8007452:	d05c      	beq.n	800750e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d141      	bne.n	80074e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745c:	4b48      	ldr	r3, [pc, #288]	; (8007580 <HAL_RCC_OscConfig+0x4dc>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007462:	f7fb fdd1 	bl	8003008 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800746a:	f7fb fdcd 	bl	8003008 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e078      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747c:	4b3f      	ldr	r3, [pc, #252]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f0      	bne.n	800746a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	019b      	lsls	r3, r3, #6
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	3b01      	subs	r3, #1
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	061b      	lsls	r3, r3, #24
 80074ac:	4933      	ldr	r1, [pc, #204]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b2:	4b33      	ldr	r3, [pc, #204]	; (8007580 <HAL_RCC_OscConfig+0x4dc>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b8:	f7fb fda6 	bl	8003008 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074c0:	f7fb fda2 	bl	8003008 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e04d      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d2:	4b2a      	ldr	r3, [pc, #168]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f0      	beq.n	80074c0 <HAL_RCC_OscConfig+0x41c>
 80074de:	e045      	b.n	800756c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e0:	4b27      	ldr	r3, [pc, #156]	; (8007580 <HAL_RCC_OscConfig+0x4dc>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fb fd8f 	bl	8003008 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ee:	f7fb fd8b 	bl	8003008 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e036      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007500:	4b1e      	ldr	r3, [pc, #120]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <HAL_RCC_OscConfig+0x44a>
 800750c:	e02e      	b.n	800756c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e029      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800751a:	4b18      	ldr	r3, [pc, #96]	; (800757c <HAL_RCC_OscConfig+0x4d8>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	429a      	cmp	r2, r3
 800752c:	d11c      	bne.n	8007568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d115      	bne.n	8007568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007542:	4013      	ands	r3, r2
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007548:	4293      	cmp	r3, r2
 800754a:	d10d      	bne.n	8007568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d106      	bne.n	8007568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40007000 	.word	0x40007000
 800757c:	40023800 	.word	0x40023800
 8007580:	42470060 	.word	0x42470060

08007584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e0cc      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007598:	4b68      	ldr	r3, [pc, #416]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d90c      	bls.n	80075c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b65      	ldr	r3, [pc, #404]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ae:	4b63      	ldr	r3, [pc, #396]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d001      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0b8      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075d8:	4b59      	ldr	r3, [pc, #356]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a58      	ldr	r2, [pc, #352]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f0:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4a52      	ldr	r2, [pc, #328]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075fc:	4b50      	ldr	r3, [pc, #320]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	494d      	ldr	r1, [pc, #308]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d044      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d107      	bne.n	8007632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	4b47      	ldr	r3, [pc, #284]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d119      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e07f      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d003      	beq.n	8007642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800763e:	2b03      	cmp	r3, #3
 8007640:	d107      	bne.n	8007652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007642:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e06f      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007652:	4b3b      	ldr	r3, [pc, #236]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e067      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007662:	4b37      	ldr	r3, [pc, #220]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f023 0203 	bic.w	r2, r3, #3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	4934      	ldr	r1, [pc, #208]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	4313      	orrs	r3, r2
 8007672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007674:	f7fb fcc8 	bl	8003008 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	e00a      	b.n	8007692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767c:	f7fb fcc4 	bl	8003008 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e04f      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	4b2b      	ldr	r3, [pc, #172]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 020c 	and.w	r2, r3, #12
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d1eb      	bne.n	800767c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076a4:	4b25      	ldr	r3, [pc, #148]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d20c      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b2:	4b22      	ldr	r3, [pc, #136]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <HAL_RCC_ClockConfig+0x1b8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d001      	beq.n	80076cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e032      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4916      	ldr	r1, [pc, #88]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	490e      	ldr	r1, [pc, #56]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800770a:	f000 f821 	bl	8007750 <HAL_RCC_GetSysClockFreq>
 800770e:	4601      	mov	r1, r0
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 800771c:	5cd3      	ldrb	r3, [r2, r3]
 800771e:	fa21 f303 	lsr.w	r3, r1, r3
 8007722:	4a09      	ldr	r2, [pc, #36]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fb fc28 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40023c00 	.word	0x40023c00
 8007740:	40023800 	.word	0x40023800
 8007744:	0800a840 	.word	0x0800a840
 8007748:	20000020 	.word	0x20000020
 800774c:	20000024 	.word	0x20000024

08007750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	2300      	movs	r3, #0
 8007760:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007766:	4b50      	ldr	r3, [pc, #320]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b04      	cmp	r3, #4
 8007770:	d007      	beq.n	8007782 <HAL_RCC_GetSysClockFreq+0x32>
 8007772:	2b08      	cmp	r3, #8
 8007774:	d008      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0x38>
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 808d 	bne.w	8007896 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800777c:	4b4b      	ldr	r3, [pc, #300]	; (80078ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800777e:	60bb      	str	r3, [r7, #8]
       break;
 8007780:	e08c      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007782:	4b4b      	ldr	r3, [pc, #300]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007784:	60bb      	str	r3, [r7, #8]
      break;
 8007786:	e089      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007788:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007792:	4b45      	ldr	r3, [pc, #276]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d023      	beq.n	80077e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779e:	4b42      	ldr	r3, [pc, #264]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	099b      	lsrs	r3, r3, #6
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	ea03 0501 	and.w	r5, r3, r1
 80077b4:	ea04 0602 	and.w	r6, r4, r2
 80077b8:	4a3d      	ldr	r2, [pc, #244]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077ba:	fb02 f106 	mul.w	r1, r2, r6
 80077be:	2200      	movs	r2, #0
 80077c0:	fb02 f205 	mul.w	r2, r2, r5
 80077c4:	440a      	add	r2, r1
 80077c6:	493a      	ldr	r1, [pc, #232]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077c8:	fba5 0101 	umull	r0, r1, r5, r1
 80077cc:	1853      	adds	r3, r2, r1
 80077ce:	4619      	mov	r1, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f04f 0400 	mov.w	r4, #0
 80077d6:	461a      	mov	r2, r3
 80077d8:	4623      	mov	r3, r4
 80077da:	f7f8 fd69 	bl	80002b0 <__aeabi_uldivmod>
 80077de:	4603      	mov	r3, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e049      	b.n	800787a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077e6:	4b30      	ldr	r3, [pc, #192]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	099b      	lsrs	r3, r3, #6
 80077ec:	f04f 0400 	mov.w	r4, #0
 80077f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	ea03 0501 	and.w	r5, r3, r1
 80077fc:	ea04 0602 	and.w	r6, r4, r2
 8007800:	4629      	mov	r1, r5
 8007802:	4632      	mov	r2, r6
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	f04f 0400 	mov.w	r4, #0
 800780c:	0154      	lsls	r4, r2, #5
 800780e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007812:	014b      	lsls	r3, r1, #5
 8007814:	4619      	mov	r1, r3
 8007816:	4622      	mov	r2, r4
 8007818:	1b49      	subs	r1, r1, r5
 800781a:	eb62 0206 	sbc.w	r2, r2, r6
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	f04f 0400 	mov.w	r4, #0
 8007826:	0194      	lsls	r4, r2, #6
 8007828:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800782c:	018b      	lsls	r3, r1, #6
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	eb64 0402 	sbc.w	r4, r4, r2
 8007834:	f04f 0100 	mov.w	r1, #0
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	00e2      	lsls	r2, r4, #3
 800783e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007842:	00d9      	lsls	r1, r3, #3
 8007844:	460b      	mov	r3, r1
 8007846:	4614      	mov	r4, r2
 8007848:	195b      	adds	r3, r3, r5
 800784a:	eb44 0406 	adc.w	r4, r4, r6
 800784e:	f04f 0100 	mov.w	r1, #0
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	02a2      	lsls	r2, r4, #10
 8007858:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800785c:	0299      	lsls	r1, r3, #10
 800785e:	460b      	mov	r3, r1
 8007860:	4614      	mov	r4, r2
 8007862:	4618      	mov	r0, r3
 8007864:	4621      	mov	r1, r4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f04f 0400 	mov.w	r4, #0
 800786c:	461a      	mov	r2, r3
 800786e:	4623      	mov	r3, r4
 8007870:	f7f8 fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8007874:	4603      	mov	r3, r0
 8007876:	460c      	mov	r4, r1
 8007878:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	3301      	adds	r3, #1
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	60bb      	str	r3, [r7, #8]
      break;
 8007894:	e002      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8007898:	60bb      	str	r3, [r7, #8]
      break;
 800789a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800789c:	68bb      	ldr	r3, [r7, #8]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	00f42400 	.word	0x00f42400
 80078b0:	017d7840 	.word	0x017d7840

080078b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078b8:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80078ba:	681b      	ldr	r3, [r3, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000020 	.word	0x20000020

080078cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078d0:	f7ff fff0 	bl	80078b4 <HAL_RCC_GetHCLKFreq>
 80078d4:	4601      	mov	r1, r0
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	0a9b      	lsrs	r3, r3, #10
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	4a03      	ldr	r2, [pc, #12]	; (80078f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078e2:	5cd3      	ldrb	r3, [r2, r3]
 80078e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800
 80078f0:	0800a850 	.word	0x0800a850

080078f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078f8:	f7ff ffdc 	bl	80078b4 <HAL_RCC_GetHCLKFreq>
 80078fc:	4601      	mov	r1, r0
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0b5b      	lsrs	r3, r3, #13
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4a03      	ldr	r2, [pc, #12]	; (8007918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800790a:	5cd3      	ldrb	r3, [r2, r3]
 800790c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	0800a850 	.word	0x0800a850

0800791c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e01d      	b.n	800796a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fa fffa 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 fc7c 	bl	8008258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0201 	orr.w	r2, r2, #1
 8007988:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b06      	cmp	r3, #6
 800799a:	d007      	beq.n	80079ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10f      	bne.n	8007a02 <HAL_TIM_Base_Stop_IT+0x48>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	f240 4344 	movw	r3, #1092	; 0x444
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_Base_Stop_IT+0x48>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e01d      	b.n	8007a5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f815 	bl	8007a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f000 fc02 	bl	8008258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b0c      	cmp	r3, #12
 8007a8a:	d841      	bhi.n	8007b10 <HAL_TIM_PWM_Start_IT+0x94>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <HAL_TIM_PWM_Start_IT+0x18>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007ac9 	.word	0x08007ac9
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007aed 	.word	0x08007aed
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007aff 	.word	0x08007aff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0202 	orr.w	r2, r2, #2
 8007ad6:	60da      	str	r2, [r3, #12]
      break;
 8007ad8:	e01b      	b.n	8007b12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0204 	orr.w	r2, r2, #4
 8007ae8:	60da      	str	r2, [r3, #12]
      break;
 8007aea:	e012      	b.n	8007b12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0208 	orr.w	r2, r2, #8
 8007afa:	60da      	str	r2, [r3, #12]
      break;
 8007afc:	e009      	b.n	8007b12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0210 	orr.w	r2, r2, #16
 8007b0c:	60da      	str	r2, [r3, #12]
      break;
 8007b0e:	e000      	b.n	8007b12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8007b10:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fe42 	bl	80087a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a10      	ldr	r2, [pc, #64]	; (8007b68 <HAL_TIM_PWM_Start_IT+0xec>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d107      	bne.n	8007b3a <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b06      	cmp	r3, #6
 8007b4a:	d007      	beq.n	8007b5c <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000

08007b6c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b0c      	cmp	r3, #12
 8007b7a:	d841      	bhi.n	8007c00 <HAL_TIM_PWM_Stop_IT+0x94>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <HAL_TIM_PWM_Stop_IT+0x18>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007c01 	.word	0x08007c01
 8007b8c:	08007c01 	.word	0x08007c01
 8007b90:	08007c01 	.word	0x08007c01
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007c01 	.word	0x08007c01
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007c01 	.word	0x08007c01
 8007ba4:	08007bdd 	.word	0x08007bdd
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c01 	.word	0x08007c01
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007bef 	.word	0x08007bef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0202 	bic.w	r2, r2, #2
 8007bc6:	60da      	str	r2, [r3, #12]
      break;
 8007bc8:	e01b      	b.n	8007c02 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0204 	bic.w	r2, r2, #4
 8007bd8:	60da      	str	r2, [r3, #12]
      break;
 8007bda:	e012      	b.n	8007c02 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0208 	bic.w	r2, r2, #8
 8007bea:	60da      	str	r2, [r3, #12]
      break;
 8007bec:	e009      	b.n	8007c02 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0210 	bic.w	r2, r2, #16
 8007bfc:	60da      	str	r2, [r3, #12]
      break;
 8007bfe:	e000      	b.n	8007c02 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007c00:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fdca 	bl	80087a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <HAL_TIM_PWM_Stop_IT+0x118>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d117      	bne.n	8007c4a <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10f      	bne.n	8007c4a <HAL_TIM_PWM_Stop_IT+0xde>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	f240 4344 	movw	r3, #1092	; 0x444
 8007c34:	4013      	ands	r3, r2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <HAL_TIM_PWM_Stop_IT+0xde>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a1a      	ldr	r2, [r3, #32]
 8007c50:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <HAL_TIM_PWM_Stop_IT+0x10e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	f240 4344 	movw	r3, #1092	; 0x444
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d107      	bne.n	8007c7a <HAL_TIM_PWM_Stop_IT+0x10e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40010000 	.word	0x40010000

08007c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d122      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d11b      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0202 	mvn.w	r2, #2
 8007cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fab0 	bl	8008230 <HAL_TIM_IC_CaptureCallback>
 8007cd0:	e005      	b.n	8007cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 faa2 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fa fffb 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d122      	bne.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d11b      	bne.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0204 	mvn.w	r2, #4
 8007d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa86 	bl	8008230 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa78 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fa ffd1 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d122      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d11b      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0208 	mvn.w	r2, #8
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa5c 	bl	8008230 <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa4e 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fa ffa7 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0210 	mvn.w	r2, #16
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2208      	movs	r2, #8
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa32 	bl	8008230 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa24 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fa ff7d 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0201 	mvn.w	r2, #1
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fa fe90 	bl	8002b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e16:	2b80      	cmp	r3, #128	; 0x80
 8007e18:	d10e      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d107      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fd54 	bl	80088e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d10e      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d107      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9f0 	bl	8008244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d10e      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d107      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f06f 0220 	mvn.w	r2, #32
 8007e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fd1e 	bl	80088cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e0b4      	b.n	800801c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	f200 809f 	bhi.w	8008008 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f05 	.word	0x08007f05
 8007ed4:	08008009 	.word	0x08008009
 8007ed8:	08008009 	.word	0x08008009
 8007edc:	08008009 	.word	0x08008009
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08008009 	.word	0x08008009
 8007ee8:	08008009 	.word	0x08008009
 8007eec:	08008009 	.word	0x08008009
 8007ef0:	08007f87 	.word	0x08007f87
 8007ef4:	08008009 	.word	0x08008009
 8007ef8:	08008009 	.word	0x08008009
 8007efc:	08008009 	.word	0x08008009
 8007f00:	08007fc7 	.word	0x08007fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fa24 	bl	8008358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0208 	orr.w	r2, r2, #8
 8007f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0204 	bic.w	r2, r2, #4
 8007f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6999      	ldr	r1, [r3, #24]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	619a      	str	r2, [r3, #24]
      break;
 8007f42:	e062      	b.n	800800a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fa6a 	bl	8008424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6999      	ldr	r1, [r3, #24]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	021a      	lsls	r2, r3, #8
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	619a      	str	r2, [r3, #24]
      break;
 8007f84:	e041      	b.n	800800a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fab5 	bl	80084fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0208 	orr.w	r2, r2, #8
 8007fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0204 	bic.w	r2, r2, #4
 8007fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69d9      	ldr	r1, [r3, #28]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	61da      	str	r2, [r3, #28]
      break;
 8007fc4:	e021      	b.n	800800a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 faff 	bl	80085d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69d9      	ldr	r1, [r3, #28]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	021a      	lsls	r2, r3, #8
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	61da      	str	r2, [r3, #28]
      break;
 8008006:	e000      	b.n	800800a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008008:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_TIM_ConfigClockSource+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e0a6      	b.n	800818a <HAL_TIM_ConfigClockSource+0x166>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800805a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008062:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	d067      	beq.n	8008144 <HAL_TIM_ConfigClockSource+0x120>
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d80b      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x6c>
 8008078:	2b10      	cmp	r3, #16
 800807a:	d073      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0x140>
 800807c:	2b10      	cmp	r3, #16
 800807e:	d802      	bhi.n	8008086 <HAL_TIM_ConfigClockSource+0x62>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d06f      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008084:	e078      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008086:	2b20      	cmp	r3, #32
 8008088:	d06c      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0x140>
 800808a:	2b30      	cmp	r3, #48	; 0x30
 800808c:	d06a      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800808e:	e073      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008090:	2b70      	cmp	r3, #112	; 0x70
 8008092:	d00d      	beq.n	80080b0 <HAL_TIM_ConfigClockSource+0x8c>
 8008094:	2b70      	cmp	r3, #112	; 0x70
 8008096:	d804      	bhi.n	80080a2 <HAL_TIM_ConfigClockSource+0x7e>
 8008098:	2b50      	cmp	r3, #80	; 0x50
 800809a:	d033      	beq.n	8008104 <HAL_TIM_ConfigClockSource+0xe0>
 800809c:	2b60      	cmp	r3, #96	; 0x60
 800809e:	d041      	beq.n	8008124 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80080a0:	e06a      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a6:	d066      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x152>
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ac:	d017      	beq.n	80080de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80080ae:	e063      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	6899      	ldr	r1, [r3, #8]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f000 fb50 	bl	8008764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	609a      	str	r2, [r3, #8]
      break;
 80080dc:	e04c      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f000 fb39 	bl	8008764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008100:	609a      	str	r2, [r3, #8]
      break;
 8008102:	e039      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	6859      	ldr	r1, [r3, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	461a      	mov	r2, r3
 8008112:	f000 faad 	bl	8008670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2150      	movs	r1, #80	; 0x50
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fb06 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008122:	e029      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	6859      	ldr	r1, [r3, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	461a      	mov	r2, r3
 8008132:	f000 facc 	bl	80086ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2160      	movs	r1, #96	; 0x60
 800813c:	4618      	mov	r0, r3
 800813e:	f000 faf6 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008142:	e019      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6859      	ldr	r1, [r3, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	461a      	mov	r2, r3
 8008152:	f000 fa8d 	bl	8008670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2140      	movs	r1, #64	; 0x40
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fae6 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008162:	e009      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f000 fadd 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008174:	e000      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b0c      	cmp	r3, #12
 80081a6:	d831      	bhi.n	800820c <HAL_TIM_ReadCapturedValue+0x78>
 80081a8:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081e5 	.word	0x080081e5
 80081b4:	0800820d 	.word	0x0800820d
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	0800820d 	.word	0x0800820d
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	0800820d 	.word	0x0800820d
 80081cc:	0800820d 	.word	0x0800820d
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	0800820d 	.word	0x0800820d
 80081d8:	0800820d 	.word	0x0800820d
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	08008203 	.word	0x08008203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ea:	60fb      	str	r3, [r7, #12]

      break;
 80081ec:	e00f      	b.n	800820e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	60fb      	str	r3, [r7, #12]

      break;
 80081f6:	e00a      	b.n	800820e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	60fb      	str	r3, [r7, #12]

      break;
 8008200:	e005      	b.n	800820e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	60fb      	str	r3, [r7, #12]

      break;
 800820a:	e000      	b.n	800820e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800820c:	bf00      	nop
  }

  return tmpreg;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a34      	ldr	r2, [pc, #208]	; (800833c <TIM_Base_SetConfig+0xe4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00f      	beq.n	8008290 <TIM_Base_SetConfig+0x38>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008276:	d00b      	beq.n	8008290 <TIM_Base_SetConfig+0x38>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a31      	ldr	r2, [pc, #196]	; (8008340 <TIM_Base_SetConfig+0xe8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_Base_SetConfig+0x38>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a30      	ldr	r2, [pc, #192]	; (8008344 <TIM_Base_SetConfig+0xec>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0x38>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a2f      	ldr	r2, [pc, #188]	; (8008348 <TIM_Base_SetConfig+0xf0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d108      	bne.n	80082a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a25      	ldr	r2, [pc, #148]	; (800833c <TIM_Base_SetConfig+0xe4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01b      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b0:	d017      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a22      	ldr	r2, [pc, #136]	; (8008340 <TIM_Base_SetConfig+0xe8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a21      	ldr	r2, [pc, #132]	; (8008344 <TIM_Base_SetConfig+0xec>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a20      	ldr	r2, [pc, #128]	; (8008348 <TIM_Base_SetConfig+0xf0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a1f      	ldr	r2, [pc, #124]	; (800834c <TIM_Base_SetConfig+0xf4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a1e      	ldr	r2, [pc, #120]	; (8008350 <TIM_Base_SetConfig+0xf8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0x8a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a1d      	ldr	r2, [pc, #116]	; (8008354 <TIM_Base_SetConfig+0xfc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <TIM_Base_SetConfig+0xe4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d103      	bne.n	8008328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	615a      	str	r2, [r3, #20]
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010000 	.word	0x40010000
 8008340:	40000400 	.word	0x40000400
 8008344:	40000800 	.word	0x40000800
 8008348:	40000c00 	.word	0x40000c00
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800

08008358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	f023 0201 	bic.w	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f023 0302 	bic.w	r3, r3, #2
 80083a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a1c      	ldr	r2, [pc, #112]	; (8008420 <TIM_OC1_SetConfig+0xc8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d10c      	bne.n	80083ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0308 	bic.w	r3, r3, #8
 80083ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f023 0304 	bic.w	r3, r3, #4
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a13      	ldr	r2, [pc, #76]	; (8008420 <TIM_OC1_SetConfig+0xc8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d111      	bne.n	80083fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40010000 	.word	0x40010000

08008424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f023 0210 	bic.w	r2, r3, #16
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f023 0320 	bic.w	r3, r3, #32
 800846e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <TIM_OC2_SetConfig+0xd4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d10d      	bne.n	80084a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800848a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800849e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <TIM_OC2_SetConfig+0xd4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d113      	bne.n	80084d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	621a      	str	r2, [r3, #32]
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40010000 	.word	0x40010000

080084fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <TIM_OC3_SetConfig+0xd0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d10d      	bne.n	8008576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a14      	ldr	r2, [pc, #80]	; (80085cc <TIM_OC3_SetConfig+0xd0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d113      	bne.n	80085a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800858c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	621a      	str	r2, [r3, #32]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	40010000 	.word	0x40010000

080085d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800861a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	031b      	lsls	r3, r3, #12
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a10      	ldr	r2, [pc, #64]	; (800866c <TIM_OC4_SetConfig+0x9c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d109      	bne.n	8008644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	019b      	lsls	r3, r3, #6
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40010000 	.word	0x40010000

08008670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800869a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f023 030a 	bic.w	r3, r3, #10
 80086ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	f023 0210 	bic.w	r2, r3, #16
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	031b      	lsls	r3, r3, #12
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800870a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	f043 0307 	orr.w	r3, r3, #7
 8008750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	609a      	str	r2, [r3, #8]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800877e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	021a      	lsls	r2, r3, #8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	431a      	orrs	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	609a      	str	r2, [r3, #8]
}
 8008798:	bf00      	nop
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f003 031f 	and.w	r3, r3, #31
 80087b6:	2201      	movs	r2, #1
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	43db      	mvns	r3, r3
 80087c6:	401a      	ands	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a1a      	ldr	r2, [r3, #32]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	431a      	orrs	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008804:	2302      	movs	r3, #2
 8008806:	e050      	b.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1c      	ldr	r2, [pc, #112]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d018      	beq.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008854:	d013      	beq.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00e      	beq.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d009      	beq.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a15      	ldr	r2, [pc, #84]	; (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d004      	beq.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a13      	ldr	r2, [pc, #76]	; (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d10c      	bne.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4313      	orrs	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40010000 	.word	0x40010000
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	40014000 	.word	0x40014000

080088cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e03f      	b.n	8008986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7fa fa62 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2224      	movs	r2, #36	; 0x24
 8008924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fc2d 	bl	8009198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800894c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800895c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800896c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	4613      	mov	r3, r2
 800899a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d140      	bne.n	8008a2a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <HAL_UART_Receive_IT+0x26>
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e039      	b.n	8008a2c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <HAL_UART_Receive_IT+0x38>
 80089c2:	2302      	movs	r3, #2
 80089c4:	e032      	b.n	8008a2c <HAL_UART_Receive_IT+0x9e>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	88fa      	ldrh	r2, [r7, #6]
 80089d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2222      	movs	r2, #34	; 0x22
 80089ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a04:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f042 0201 	orr.w	r2, r2, #1
 8008a14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0220 	orr.w	r2, r2, #32
 8008a24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e000      	b.n	8008a2c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008a2a:	2302      	movs	r3, #2
  }
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d153      	bne.n	8008afa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_UART_Transmit_DMA+0x26>
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e04c      	b.n	8008afc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Transmit_DMA+0x38>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e045      	b.n	8008afc <HAL_UART_Transmit_DMA+0xc4>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	88fa      	ldrh	r2, [r7, #6]
 8008a82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2221      	movs	r2, #33	; 0x21
 8008a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <HAL_UART_Transmit_DMA+0xcc>)
 8008a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <HAL_UART_Transmit_DMA+0xd0>)
 8008aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <HAL_UART_Transmit_DMA+0xd4>)
 8008aae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008ab8:	f107 0308 	add.w	r3, r7, #8
 8008abc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6819      	ldr	r1, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3304      	adds	r3, #4
 8008acc:	461a      	mov	r2, r3
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	f7fb f9f2 	bl	8003eb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008adc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008af4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e000      	b.n	8008afc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008afa:	2302      	movs	r3, #2
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	08008dfd 	.word	0x08008dfd
 8008b08:	08008e4f 	.word	0x08008e4f
 8008b0c:	08008e6b 	.word	0x08008e6b

08008b10 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d12a      	bne.n	8008b9c <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695a      	ldr	r2, [r3, #20]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b54:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d013      	beq.n	8008b86 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b62:	4a16      	ldr	r2, [pc, #88]	; (8008bbc <HAL_UART_AbortReceive_IT+0xac>)
 8008b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fb fa6c 	bl	8004048 <HAL_DMA_Abort_IT>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01c      	beq.n	8008bb0 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	e014      	b.n	8008bb0 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f927 	bl	8008de8 <HAL_UART_AbortReceiveCpltCallback>
 8008b9a:	e009      	b.n	8008bb0 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f91c 	bl	8008de8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	08008f8f 	.word	0x08008f8f

08008bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10d      	bne.n	8008c12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	f003 0320 	and.w	r3, r3, #32
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d008      	beq.n	8008c12 <HAL_UART_IRQHandler+0x52>
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa42 	bl	8009094 <UART_Receive_IT>
      return;
 8008c10:	e0d1      	b.n	8008db6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 80b0 	beq.w	8008d7a <HAL_UART_IRQHandler+0x1ba>
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <HAL_UART_IRQHandler+0x70>
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 80a5 	beq.w	8008d7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <HAL_UART_IRQHandler+0x90>
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c48:	f043 0201 	orr.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <HAL_UART_IRQHandler+0xb0>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	f043 0202 	orr.w	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <HAL_UART_IRQHandler+0xd0>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c88:	f043 0204 	orr.w	r2, r3, #4
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00f      	beq.n	8008cba <HAL_UART_IRQHandler+0xfa>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_UART_IRQHandler+0xee>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb2:	f043 0208 	orr.w	r2, r3, #8
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d078      	beq.n	8008db4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_UART_IRQHandler+0x11c>
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9dc 	bl	8009094 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b40      	cmp	r3, #64	; 0x40
 8008ce8:	bf0c      	ite	eq
 8008cea:	2301      	moveq	r3, #1
 8008cec:	2300      	movne	r3, #0
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d102      	bne.n	8008d04 <HAL_UART_IRQHandler+0x144>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d031      	beq.n	8008d68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f910 	bl	8008f2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d123      	bne.n	8008d60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	4a21      	ldr	r2, [pc, #132]	; (8008dbc <HAL_UART_IRQHandler+0x1fc>)
 8008d36:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fb f983 	bl	8004048 <HAL_DMA_Abort_IT>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d016      	beq.n	8008d76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d52:	4610      	mov	r0, r2
 8008d54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d56:	e00e      	b.n	8008d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f83b 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	e00a      	b.n	8008d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f837 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d66:	e006      	b.n	8008d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f833 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008d74:	e01e      	b.n	8008db4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d76:	bf00      	nop
    return;
 8008d78:	e01c      	b.n	8008db4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_UART_IRQHandler+0x1d6>
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f912 	bl	8008fb8 <UART_Transmit_IT>
    return;
 8008d94:	e00f      	b.n	8008db6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <HAL_UART_IRQHandler+0x1f6>
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f95a 	bl	8009064 <UART_EndTransmit_IT>
    return;
 8008db0:	bf00      	nop
 8008db2:	e000      	b.n	8008db6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008db4:	bf00      	nop
  }
}
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	08008f67 	.word	0x08008f67

08008dc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d113      	bne.n	8008e40 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e2c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e3e:	e002      	b.n	8008e46 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7f7 fff1 	bl	8000e28 <HAL_UART_TxCpltCallback>
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff ffaf 	bl	8008dc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e86:	2b80      	cmp	r3, #128	; 0x80
 8008e88:	bf0c      	ite	eq
 8008e8a:	2301      	moveq	r3, #1
 8008e8c:	2300      	movne	r3, #0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b21      	cmp	r3, #33	; 0x21
 8008e9c:	d108      	bne.n	8008eb0 <UART_DMAError+0x46>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008eaa:	68b8      	ldr	r0, [r7, #8]
 8008eac:	f000 f827 	bl	8008efe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b40      	cmp	r3, #64	; 0x40
 8008ebc:	bf0c      	ite	eq
 8008ebe:	2301      	moveq	r3, #1
 8008ec0:	2300      	movne	r3, #0
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b22      	cmp	r3, #34	; 0x22
 8008ed0:	d108      	bne.n	8008ee4 <UART_DMAError+0x7a>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2200      	movs	r2, #0
 8008edc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ede:	68b8      	ldr	r0, [r7, #8]
 8008ee0:	f000 f823 	bl	8008f2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	f043 0210 	orr.w	r2, r3, #16
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ef0:	68b8      	ldr	r0, [r7, #8]
 8008ef2:	f7ff ff6f 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f14:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f40:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff ff27 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff ff1c 	bl	8008de8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b21      	cmp	r3, #33	; 0x21
 8008fca:	d144      	bne.n	8009056 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd4:	d11a      	bne.n	800900c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	621a      	str	r2, [r3, #32]
 8008ffe:	e00e      	b.n	800901e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	621a      	str	r2, [r3, #32]
 800900a:	e008      	b.n	800901e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	1c59      	adds	r1, r3, #1
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6211      	str	r1, [r2, #32]
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29b      	uxth	r3, r3
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4619      	mov	r1, r3
 800902c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10f      	bne.n	8009052 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009040:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009050:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009056:	2302      	movs	r3, #2
  }
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800907a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7f7 fecf 	bl	8000e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b22      	cmp	r3, #34	; 0x22
 80090a6:	d171      	bne.n	800918c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b0:	d123      	bne.n	80090fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10e      	bne.n	80090de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	1c9a      	adds	r2, r3, #2
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	629a      	str	r2, [r3, #40]	; 0x28
 80090dc:	e029      	b.n	8009132 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	629a      	str	r2, [r3, #40]	; 0x28
 80090f8:	e01b      	b.n	8009132 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6858      	ldr	r0, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	1c59      	adds	r1, r3, #1
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6291      	str	r1, [r2, #40]	; 0x28
 8009112:	b2c2      	uxtb	r2, r0
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e00c      	b.n	8009132 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	b2da      	uxtb	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009124:	1c58      	adds	r0, r3, #1
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	6288      	str	r0, [r1, #40]	; 0x28
 800912a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29b      	uxth	r3, r3
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	4619      	mov	r1, r3
 8009140:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009142:	2b00      	cmp	r3, #0
 8009144:	d120      	bne.n	8009188 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0220 	bic.w	r2, r2, #32
 8009154:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	695a      	ldr	r2, [r3, #20]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0201 	bic.w	r2, r2, #1
 8009174:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7f7 fcae 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	e002      	b.n	800918e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	e000      	b.n	800918e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80091da:	f023 030c 	bic.w	r3, r3, #12
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	430b      	orrs	r3, r1
 80091e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009206:	f040 818b 	bne.w	8009520 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4ac1      	ldr	r2, [pc, #772]	; (8009514 <UART_SetConfig+0x37c>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d005      	beq.n	8009220 <UART_SetConfig+0x88>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4abf      	ldr	r2, [pc, #764]	; (8009518 <UART_SetConfig+0x380>)
 800921a:	4293      	cmp	r3, r2
 800921c:	f040 80bd 	bne.w	800939a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009220:	f7fe fb68 	bl	80078f4 <HAL_RCC_GetPCLK2Freq>
 8009224:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	461d      	mov	r5, r3
 800922a:	f04f 0600 	mov.w	r6, #0
 800922e:	46a8      	mov	r8, r5
 8009230:	46b1      	mov	r9, r6
 8009232:	eb18 0308 	adds.w	r3, r8, r8
 8009236:	eb49 0409 	adc.w	r4, r9, r9
 800923a:	4698      	mov	r8, r3
 800923c:	46a1      	mov	r9, r4
 800923e:	eb18 0805 	adds.w	r8, r8, r5
 8009242:	eb49 0906 	adc.w	r9, r9, r6
 8009246:	f04f 0100 	mov.w	r1, #0
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009252:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009256:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800925a:	4688      	mov	r8, r1
 800925c:	4691      	mov	r9, r2
 800925e:	eb18 0005 	adds.w	r0, r8, r5
 8009262:	eb49 0106 	adc.w	r1, r9, r6
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	461d      	mov	r5, r3
 800926c:	f04f 0600 	mov.w	r6, #0
 8009270:	196b      	adds	r3, r5, r5
 8009272:	eb46 0406 	adc.w	r4, r6, r6
 8009276:	461a      	mov	r2, r3
 8009278:	4623      	mov	r3, r4
 800927a:	f7f7 f819 	bl	80002b0 <__aeabi_uldivmod>
 800927e:	4603      	mov	r3, r0
 8009280:	460c      	mov	r4, r1
 8009282:	461a      	mov	r2, r3
 8009284:	4ba5      	ldr	r3, [pc, #660]	; (800951c <UART_SetConfig+0x384>)
 8009286:	fba3 2302 	umull	r2, r3, r3, r2
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	461d      	mov	r5, r3
 8009294:	f04f 0600 	mov.w	r6, #0
 8009298:	46a9      	mov	r9, r5
 800929a:	46b2      	mov	sl, r6
 800929c:	eb19 0309 	adds.w	r3, r9, r9
 80092a0:	eb4a 040a 	adc.w	r4, sl, sl
 80092a4:	4699      	mov	r9, r3
 80092a6:	46a2      	mov	sl, r4
 80092a8:	eb19 0905 	adds.w	r9, r9, r5
 80092ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80092b0:	f04f 0100 	mov.w	r1, #0
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092c4:	4689      	mov	r9, r1
 80092c6:	4692      	mov	sl, r2
 80092c8:	eb19 0005 	adds.w	r0, r9, r5
 80092cc:	eb4a 0106 	adc.w	r1, sl, r6
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	461d      	mov	r5, r3
 80092d6:	f04f 0600 	mov.w	r6, #0
 80092da:	196b      	adds	r3, r5, r5
 80092dc:	eb46 0406 	adc.w	r4, r6, r6
 80092e0:	461a      	mov	r2, r3
 80092e2:	4623      	mov	r3, r4
 80092e4:	f7f6 ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80092e8:	4603      	mov	r3, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	461a      	mov	r2, r3
 80092ee:	4b8b      	ldr	r3, [pc, #556]	; (800951c <UART_SetConfig+0x384>)
 80092f0:	fba3 1302 	umull	r1, r3, r3, r2
 80092f4:	095b      	lsrs	r3, r3, #5
 80092f6:	2164      	movs	r1, #100	; 0x64
 80092f8:	fb01 f303 	mul.w	r3, r1, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	3332      	adds	r3, #50	; 0x32
 8009302:	4a86      	ldr	r2, [pc, #536]	; (800951c <UART_SetConfig+0x384>)
 8009304:	fba2 2303 	umull	r2, r3, r2, r3
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009310:	4498      	add	r8, r3
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	461d      	mov	r5, r3
 8009316:	f04f 0600 	mov.w	r6, #0
 800931a:	46a9      	mov	r9, r5
 800931c:	46b2      	mov	sl, r6
 800931e:	eb19 0309 	adds.w	r3, r9, r9
 8009322:	eb4a 040a 	adc.w	r4, sl, sl
 8009326:	4699      	mov	r9, r3
 8009328:	46a2      	mov	sl, r4
 800932a:	eb19 0905 	adds.w	r9, r9, r5
 800932e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009332:	f04f 0100 	mov.w	r1, #0
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800933e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009346:	4689      	mov	r9, r1
 8009348:	4692      	mov	sl, r2
 800934a:	eb19 0005 	adds.w	r0, r9, r5
 800934e:	eb4a 0106 	adc.w	r1, sl, r6
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	461d      	mov	r5, r3
 8009358:	f04f 0600 	mov.w	r6, #0
 800935c:	196b      	adds	r3, r5, r5
 800935e:	eb46 0406 	adc.w	r4, r6, r6
 8009362:	461a      	mov	r2, r3
 8009364:	4623      	mov	r3, r4
 8009366:	f7f6 ffa3 	bl	80002b0 <__aeabi_uldivmod>
 800936a:	4603      	mov	r3, r0
 800936c:	460c      	mov	r4, r1
 800936e:	461a      	mov	r2, r3
 8009370:	4b6a      	ldr	r3, [pc, #424]	; (800951c <UART_SetConfig+0x384>)
 8009372:	fba3 1302 	umull	r1, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	2164      	movs	r1, #100	; 0x64
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	3332      	adds	r3, #50	; 0x32
 8009384:	4a65      	ldr	r2, [pc, #404]	; (800951c <UART_SetConfig+0x384>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	f003 0207 	and.w	r2, r3, #7
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4442      	add	r2, r8
 8009396:	609a      	str	r2, [r3, #8]
 8009398:	e26f      	b.n	800987a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800939a:	f7fe fa97 	bl	80078cc <HAL_RCC_GetPCLK1Freq>
 800939e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	461d      	mov	r5, r3
 80093a4:	f04f 0600 	mov.w	r6, #0
 80093a8:	46a8      	mov	r8, r5
 80093aa:	46b1      	mov	r9, r6
 80093ac:	eb18 0308 	adds.w	r3, r8, r8
 80093b0:	eb49 0409 	adc.w	r4, r9, r9
 80093b4:	4698      	mov	r8, r3
 80093b6:	46a1      	mov	r9, r4
 80093b8:	eb18 0805 	adds.w	r8, r8, r5
 80093bc:	eb49 0906 	adc.w	r9, r9, r6
 80093c0:	f04f 0100 	mov.w	r1, #0
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093d4:	4688      	mov	r8, r1
 80093d6:	4691      	mov	r9, r2
 80093d8:	eb18 0005 	adds.w	r0, r8, r5
 80093dc:	eb49 0106 	adc.w	r1, r9, r6
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	461d      	mov	r5, r3
 80093e6:	f04f 0600 	mov.w	r6, #0
 80093ea:	196b      	adds	r3, r5, r5
 80093ec:	eb46 0406 	adc.w	r4, r6, r6
 80093f0:	461a      	mov	r2, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	f7f6 ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	461a      	mov	r2, r3
 80093fe:	4b47      	ldr	r3, [pc, #284]	; (800951c <UART_SetConfig+0x384>)
 8009400:	fba3 2302 	umull	r2, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	461d      	mov	r5, r3
 800940e:	f04f 0600 	mov.w	r6, #0
 8009412:	46a9      	mov	r9, r5
 8009414:	46b2      	mov	sl, r6
 8009416:	eb19 0309 	adds.w	r3, r9, r9
 800941a:	eb4a 040a 	adc.w	r4, sl, sl
 800941e:	4699      	mov	r9, r3
 8009420:	46a2      	mov	sl, r4
 8009422:	eb19 0905 	adds.w	r9, r9, r5
 8009426:	eb4a 0a06 	adc.w	sl, sl, r6
 800942a:	f04f 0100 	mov.w	r1, #0
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009436:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800943a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800943e:	4689      	mov	r9, r1
 8009440:	4692      	mov	sl, r2
 8009442:	eb19 0005 	adds.w	r0, r9, r5
 8009446:	eb4a 0106 	adc.w	r1, sl, r6
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	461d      	mov	r5, r3
 8009450:	f04f 0600 	mov.w	r6, #0
 8009454:	196b      	adds	r3, r5, r5
 8009456:	eb46 0406 	adc.w	r4, r6, r6
 800945a:	461a      	mov	r2, r3
 800945c:	4623      	mov	r3, r4
 800945e:	f7f6 ff27 	bl	80002b0 <__aeabi_uldivmod>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	461a      	mov	r2, r3
 8009468:	4b2c      	ldr	r3, [pc, #176]	; (800951c <UART_SetConfig+0x384>)
 800946a:	fba3 1302 	umull	r1, r3, r3, r2
 800946e:	095b      	lsrs	r3, r3, #5
 8009470:	2164      	movs	r1, #100	; 0x64
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	3332      	adds	r3, #50	; 0x32
 800947c:	4a27      	ldr	r2, [pc, #156]	; (800951c <UART_SetConfig+0x384>)
 800947e:	fba2 2303 	umull	r2, r3, r2, r3
 8009482:	095b      	lsrs	r3, r3, #5
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800948a:	4498      	add	r8, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	461d      	mov	r5, r3
 8009490:	f04f 0600 	mov.w	r6, #0
 8009494:	46a9      	mov	r9, r5
 8009496:	46b2      	mov	sl, r6
 8009498:	eb19 0309 	adds.w	r3, r9, r9
 800949c:	eb4a 040a 	adc.w	r4, sl, sl
 80094a0:	4699      	mov	r9, r3
 80094a2:	46a2      	mov	sl, r4
 80094a4:	eb19 0905 	adds.w	r9, r9, r5
 80094a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80094ac:	f04f 0100 	mov.w	r1, #0
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094c0:	4689      	mov	r9, r1
 80094c2:	4692      	mov	sl, r2
 80094c4:	eb19 0005 	adds.w	r0, r9, r5
 80094c8:	eb4a 0106 	adc.w	r1, sl, r6
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	461d      	mov	r5, r3
 80094d2:	f04f 0600 	mov.w	r6, #0
 80094d6:	196b      	adds	r3, r5, r5
 80094d8:	eb46 0406 	adc.w	r4, r6, r6
 80094dc:	461a      	mov	r2, r3
 80094de:	4623      	mov	r3, r4
 80094e0:	f7f6 fee6 	bl	80002b0 <__aeabi_uldivmod>
 80094e4:	4603      	mov	r3, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	461a      	mov	r2, r3
 80094ea:	4b0c      	ldr	r3, [pc, #48]	; (800951c <UART_SetConfig+0x384>)
 80094ec:	fba3 1302 	umull	r1, r3, r3, r2
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	2164      	movs	r1, #100	; 0x64
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	3332      	adds	r3, #50	; 0x32
 80094fe:	4a07      	ldr	r2, [pc, #28]	; (800951c <UART_SetConfig+0x384>)
 8009500:	fba2 2303 	umull	r2, r3, r2, r3
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	f003 0207 	and.w	r2, r3, #7
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4442      	add	r2, r8
 8009510:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009512:	e1b2      	b.n	800987a <UART_SetConfig+0x6e2>
 8009514:	40011000 	.word	0x40011000
 8009518:	40011400 	.word	0x40011400
 800951c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4ad7      	ldr	r2, [pc, #860]	; (8009884 <UART_SetConfig+0x6ec>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d005      	beq.n	8009536 <UART_SetConfig+0x39e>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4ad6      	ldr	r2, [pc, #856]	; (8009888 <UART_SetConfig+0x6f0>)
 8009530:	4293      	cmp	r3, r2
 8009532:	f040 80d1 	bne.w	80096d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009536:	f7fe f9dd 	bl	80078f4 <HAL_RCC_GetPCLK2Freq>
 800953a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	469a      	mov	sl, r3
 8009540:	f04f 0b00 	mov.w	fp, #0
 8009544:	46d0      	mov	r8, sl
 8009546:	46d9      	mov	r9, fp
 8009548:	eb18 0308 	adds.w	r3, r8, r8
 800954c:	eb49 0409 	adc.w	r4, r9, r9
 8009550:	4698      	mov	r8, r3
 8009552:	46a1      	mov	r9, r4
 8009554:	eb18 080a 	adds.w	r8, r8, sl
 8009558:	eb49 090b 	adc.w	r9, r9, fp
 800955c:	f04f 0100 	mov.w	r1, #0
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009568:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800956c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009570:	4688      	mov	r8, r1
 8009572:	4691      	mov	r9, r2
 8009574:	eb1a 0508 	adds.w	r5, sl, r8
 8009578:	eb4b 0609 	adc.w	r6, fp, r9
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4619      	mov	r1, r3
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	f04f 0400 	mov.w	r4, #0
 800958e:	0094      	lsls	r4, r2, #2
 8009590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009594:	008b      	lsls	r3, r1, #2
 8009596:	461a      	mov	r2, r3
 8009598:	4623      	mov	r3, r4
 800959a:	4628      	mov	r0, r5
 800959c:	4631      	mov	r1, r6
 800959e:	f7f6 fe87 	bl	80002b0 <__aeabi_uldivmod>
 80095a2:	4603      	mov	r3, r0
 80095a4:	460c      	mov	r4, r1
 80095a6:	461a      	mov	r2, r3
 80095a8:	4bb8      	ldr	r3, [pc, #736]	; (800988c <UART_SetConfig+0x6f4>)
 80095aa:	fba3 2302 	umull	r2, r3, r3, r2
 80095ae:	095b      	lsrs	r3, r3, #5
 80095b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	469b      	mov	fp, r3
 80095b8:	f04f 0c00 	mov.w	ip, #0
 80095bc:	46d9      	mov	r9, fp
 80095be:	46e2      	mov	sl, ip
 80095c0:	eb19 0309 	adds.w	r3, r9, r9
 80095c4:	eb4a 040a 	adc.w	r4, sl, sl
 80095c8:	4699      	mov	r9, r3
 80095ca:	46a2      	mov	sl, r4
 80095cc:	eb19 090b 	adds.w	r9, r9, fp
 80095d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095e8:	4689      	mov	r9, r1
 80095ea:	4692      	mov	sl, r2
 80095ec:	eb1b 0509 	adds.w	r5, fp, r9
 80095f0:	eb4c 060a 	adc.w	r6, ip, sl
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4619      	mov	r1, r3
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	f04f 0400 	mov.w	r4, #0
 8009606:	0094      	lsls	r4, r2, #2
 8009608:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800960c:	008b      	lsls	r3, r1, #2
 800960e:	461a      	mov	r2, r3
 8009610:	4623      	mov	r3, r4
 8009612:	4628      	mov	r0, r5
 8009614:	4631      	mov	r1, r6
 8009616:	f7f6 fe4b 	bl	80002b0 <__aeabi_uldivmod>
 800961a:	4603      	mov	r3, r0
 800961c:	460c      	mov	r4, r1
 800961e:	461a      	mov	r2, r3
 8009620:	4b9a      	ldr	r3, [pc, #616]	; (800988c <UART_SetConfig+0x6f4>)
 8009622:	fba3 1302 	umull	r1, r3, r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	2164      	movs	r1, #100	; 0x64
 800962a:	fb01 f303 	mul.w	r3, r1, r3
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	3332      	adds	r3, #50	; 0x32
 8009634:	4a95      	ldr	r2, [pc, #596]	; (800988c <UART_SetConfig+0x6f4>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009640:	4498      	add	r8, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	469b      	mov	fp, r3
 8009646:	f04f 0c00 	mov.w	ip, #0
 800964a:	46d9      	mov	r9, fp
 800964c:	46e2      	mov	sl, ip
 800964e:	eb19 0309 	adds.w	r3, r9, r9
 8009652:	eb4a 040a 	adc.w	r4, sl, sl
 8009656:	4699      	mov	r9, r3
 8009658:	46a2      	mov	sl, r4
 800965a:	eb19 090b 	adds.w	r9, r9, fp
 800965e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009662:	f04f 0100 	mov.w	r1, #0
 8009666:	f04f 0200 	mov.w	r2, #0
 800966a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800966e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009676:	4689      	mov	r9, r1
 8009678:	4692      	mov	sl, r2
 800967a:	eb1b 0509 	adds.w	r5, fp, r9
 800967e:	eb4c 060a 	adc.w	r6, ip, sl
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4619      	mov	r1, r3
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	f04f 0400 	mov.w	r4, #0
 8009694:	0094      	lsls	r4, r2, #2
 8009696:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800969a:	008b      	lsls	r3, r1, #2
 800969c:	461a      	mov	r2, r3
 800969e:	4623      	mov	r3, r4
 80096a0:	4628      	mov	r0, r5
 80096a2:	4631      	mov	r1, r6
 80096a4:	f7f6 fe04 	bl	80002b0 <__aeabi_uldivmod>
 80096a8:	4603      	mov	r3, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	461a      	mov	r2, r3
 80096ae:	4b77      	ldr	r3, [pc, #476]	; (800988c <UART_SetConfig+0x6f4>)
 80096b0:	fba3 1302 	umull	r1, r3, r3, r2
 80096b4:	095b      	lsrs	r3, r3, #5
 80096b6:	2164      	movs	r1, #100	; 0x64
 80096b8:	fb01 f303 	mul.w	r3, r1, r3
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	3332      	adds	r3, #50	; 0x32
 80096c2:	4a72      	ldr	r2, [pc, #456]	; (800988c <UART_SetConfig+0x6f4>)
 80096c4:	fba2 2303 	umull	r2, r3, r2, r3
 80096c8:	095b      	lsrs	r3, r3, #5
 80096ca:	f003 020f 	and.w	r2, r3, #15
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4442      	add	r2, r8
 80096d4:	609a      	str	r2, [r3, #8]
 80096d6:	e0d0      	b.n	800987a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80096d8:	f7fe f8f8 	bl	80078cc <HAL_RCC_GetPCLK1Freq>
 80096dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	469a      	mov	sl, r3
 80096e2:	f04f 0b00 	mov.w	fp, #0
 80096e6:	46d0      	mov	r8, sl
 80096e8:	46d9      	mov	r9, fp
 80096ea:	eb18 0308 	adds.w	r3, r8, r8
 80096ee:	eb49 0409 	adc.w	r4, r9, r9
 80096f2:	4698      	mov	r8, r3
 80096f4:	46a1      	mov	r9, r4
 80096f6:	eb18 080a 	adds.w	r8, r8, sl
 80096fa:	eb49 090b 	adc.w	r9, r9, fp
 80096fe:	f04f 0100 	mov.w	r1, #0
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800970a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800970e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009712:	4688      	mov	r8, r1
 8009714:	4691      	mov	r9, r2
 8009716:	eb1a 0508 	adds.w	r5, sl, r8
 800971a:	eb4b 0609 	adc.w	r6, fp, r9
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	4619      	mov	r1, r3
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	f04f 0400 	mov.w	r4, #0
 8009730:	0094      	lsls	r4, r2, #2
 8009732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009736:	008b      	lsls	r3, r1, #2
 8009738:	461a      	mov	r2, r3
 800973a:	4623      	mov	r3, r4
 800973c:	4628      	mov	r0, r5
 800973e:	4631      	mov	r1, r6
 8009740:	f7f6 fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8009744:	4603      	mov	r3, r0
 8009746:	460c      	mov	r4, r1
 8009748:	461a      	mov	r2, r3
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <UART_SetConfig+0x6f4>)
 800974c:	fba3 2302 	umull	r2, r3, r3, r2
 8009750:	095b      	lsrs	r3, r3, #5
 8009752:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	469b      	mov	fp, r3
 800975a:	f04f 0c00 	mov.w	ip, #0
 800975e:	46d9      	mov	r9, fp
 8009760:	46e2      	mov	sl, ip
 8009762:	eb19 0309 	adds.w	r3, r9, r9
 8009766:	eb4a 040a 	adc.w	r4, sl, sl
 800976a:	4699      	mov	r9, r3
 800976c:	46a2      	mov	sl, r4
 800976e:	eb19 090b 	adds.w	r9, r9, fp
 8009772:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009776:	f04f 0100 	mov.w	r1, #0
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009782:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009786:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800978a:	4689      	mov	r9, r1
 800978c:	4692      	mov	sl, r2
 800978e:	eb1b 0509 	adds.w	r5, fp, r9
 8009792:	eb4c 060a 	adc.w	r6, ip, sl
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4619      	mov	r1, r3
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	f04f 0400 	mov.w	r4, #0
 80097a8:	0094      	lsls	r4, r2, #2
 80097aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097ae:	008b      	lsls	r3, r1, #2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4623      	mov	r3, r4
 80097b4:	4628      	mov	r0, r5
 80097b6:	4631      	mov	r1, r6
 80097b8:	f7f6 fd7a 	bl	80002b0 <__aeabi_uldivmod>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	461a      	mov	r2, r3
 80097c2:	4b32      	ldr	r3, [pc, #200]	; (800988c <UART_SetConfig+0x6f4>)
 80097c4:	fba3 1302 	umull	r1, r3, r3, r2
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	2164      	movs	r1, #100	; 0x64
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	3332      	adds	r3, #50	; 0x32
 80097d6:	4a2d      	ldr	r2, [pc, #180]	; (800988c <UART_SetConfig+0x6f4>)
 80097d8:	fba2 2303 	umull	r2, r3, r2, r3
 80097dc:	095b      	lsrs	r3, r3, #5
 80097de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097e2:	4498      	add	r8, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	469b      	mov	fp, r3
 80097e8:	f04f 0c00 	mov.w	ip, #0
 80097ec:	46d9      	mov	r9, fp
 80097ee:	46e2      	mov	sl, ip
 80097f0:	eb19 0309 	adds.w	r3, r9, r9
 80097f4:	eb4a 040a 	adc.w	r4, sl, sl
 80097f8:	4699      	mov	r9, r3
 80097fa:	46a2      	mov	sl, r4
 80097fc:	eb19 090b 	adds.w	r9, r9, fp
 8009800:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009804:	f04f 0100 	mov.w	r1, #0
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009810:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009814:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009818:	4689      	mov	r9, r1
 800981a:	4692      	mov	sl, r2
 800981c:	eb1b 0509 	adds.w	r5, fp, r9
 8009820:	eb4c 060a 	adc.w	r6, ip, sl
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4619      	mov	r1, r3
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	f04f 0400 	mov.w	r4, #0
 8009836:	0094      	lsls	r4, r2, #2
 8009838:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800983c:	008b      	lsls	r3, r1, #2
 800983e:	461a      	mov	r2, r3
 8009840:	4623      	mov	r3, r4
 8009842:	4628      	mov	r0, r5
 8009844:	4631      	mov	r1, r6
 8009846:	f7f6 fd33 	bl	80002b0 <__aeabi_uldivmod>
 800984a:	4603      	mov	r3, r0
 800984c:	460c      	mov	r4, r1
 800984e:	461a      	mov	r2, r3
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <UART_SetConfig+0x6f4>)
 8009852:	fba3 1302 	umull	r1, r3, r3, r2
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	2164      	movs	r1, #100	; 0x64
 800985a:	fb01 f303 	mul.w	r3, r1, r3
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	3332      	adds	r3, #50	; 0x32
 8009864:	4a09      	ldr	r2, [pc, #36]	; (800988c <UART_SetConfig+0x6f4>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	f003 020f 	and.w	r2, r3, #15
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4442      	add	r2, r8
 8009876:	609a      	str	r2, [r3, #8]
}
 8009878:	e7ff      	b.n	800987a <UART_SetConfig+0x6e2>
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009884:	40011000 	.word	0x40011000
 8009888:	40011400 	.word	0x40011400
 800988c:	51eb851f 	.word	0x51eb851f

08009890 <atoi>:
 8009890:	220a      	movs	r2, #10
 8009892:	2100      	movs	r1, #0
 8009894:	f000 b9d4 	b.w	8009c40 <strtol>

08009898 <__errno>:
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <__errno+0x8>)
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	2000002c 	.word	0x2000002c

080098a4 <__libc_init_array>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4e0d      	ldr	r6, [pc, #52]	; (80098dc <__libc_init_array+0x38>)
 80098a8:	4c0d      	ldr	r4, [pc, #52]	; (80098e0 <__libc_init_array+0x3c>)
 80098aa:	1ba4      	subs	r4, r4, r6
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	2500      	movs	r5, #0
 80098b0:	42a5      	cmp	r5, r4
 80098b2:	d109      	bne.n	80098c8 <__libc_init_array+0x24>
 80098b4:	4e0b      	ldr	r6, [pc, #44]	; (80098e4 <__libc_init_array+0x40>)
 80098b6:	4c0c      	ldr	r4, [pc, #48]	; (80098e8 <__libc_init_array+0x44>)
 80098b8:	f000 fd0a 	bl	800a2d0 <_init>
 80098bc:	1ba4      	subs	r4, r4, r6
 80098be:	10a4      	asrs	r4, r4, #2
 80098c0:	2500      	movs	r5, #0
 80098c2:	42a5      	cmp	r5, r4
 80098c4:	d105      	bne.n	80098d2 <__libc_init_array+0x2e>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098cc:	4798      	blx	r3
 80098ce:	3501      	adds	r5, #1
 80098d0:	e7ee      	b.n	80098b0 <__libc_init_array+0xc>
 80098d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098d6:	4798      	blx	r3
 80098d8:	3501      	adds	r5, #1
 80098da:	e7f2      	b.n	80098c2 <__libc_init_array+0x1e>
 80098dc:	0800a9a8 	.word	0x0800a9a8
 80098e0:	0800a9a8 	.word	0x0800a9a8
 80098e4:	0800a9a8 	.word	0x0800a9a8
 80098e8:	0800a9ac 	.word	0x0800a9ac

080098ec <__locale_ctype_ptr_l>:
 80098ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80098f0:	4770      	bx	lr
	...

080098f4 <__locale_ctype_ptr>:
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <__locale_ctype_ptr+0x14>)
 80098f6:	4a05      	ldr	r2, [pc, #20]	; (800990c <__locale_ctype_ptr+0x18>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bf08      	it	eq
 8009900:	4613      	moveq	r3, r2
 8009902:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009906:	4770      	bx	lr
 8009908:	2000002c 	.word	0x2000002c
 800990c:	20000090 	.word	0x20000090

08009910 <malloc>:
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <malloc+0xc>)
 8009912:	4601      	mov	r1, r0
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	f000 b877 	b.w	8009a08 <_malloc_r>
 800991a:	bf00      	nop
 800991c:	2000002c 	.word	0x2000002c

08009920 <__ascii_mbtowc>:
 8009920:	b082      	sub	sp, #8
 8009922:	b901      	cbnz	r1, 8009926 <__ascii_mbtowc+0x6>
 8009924:	a901      	add	r1, sp, #4
 8009926:	b142      	cbz	r2, 800993a <__ascii_mbtowc+0x1a>
 8009928:	b14b      	cbz	r3, 800993e <__ascii_mbtowc+0x1e>
 800992a:	7813      	ldrb	r3, [r2, #0]
 800992c:	600b      	str	r3, [r1, #0]
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	1c10      	adds	r0, r2, #0
 8009932:	bf18      	it	ne
 8009934:	2001      	movne	r0, #1
 8009936:	b002      	add	sp, #8
 8009938:	4770      	bx	lr
 800993a:	4610      	mov	r0, r2
 800993c:	e7fb      	b.n	8009936 <__ascii_mbtowc+0x16>
 800993e:	f06f 0001 	mvn.w	r0, #1
 8009942:	e7f8      	b.n	8009936 <__ascii_mbtowc+0x16>

08009944 <memcpy>:
 8009944:	b510      	push	{r4, lr}
 8009946:	1e43      	subs	r3, r0, #1
 8009948:	440a      	add	r2, r1
 800994a:	4291      	cmp	r1, r2
 800994c:	d100      	bne.n	8009950 <memcpy+0xc>
 800994e:	bd10      	pop	{r4, pc}
 8009950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009958:	e7f7      	b.n	800994a <memcpy+0x6>

0800995a <memset>:
 800995a:	4402      	add	r2, r0
 800995c:	4603      	mov	r3, r0
 800995e:	4293      	cmp	r3, r2
 8009960:	d100      	bne.n	8009964 <memset+0xa>
 8009962:	4770      	bx	lr
 8009964:	f803 1b01 	strb.w	r1, [r3], #1
 8009968:	e7f9      	b.n	800995e <memset+0x4>
	...

0800996c <_free_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4605      	mov	r5, r0
 8009970:	2900      	cmp	r1, #0
 8009972:	d045      	beq.n	8009a00 <_free_r+0x94>
 8009974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009978:	1f0c      	subs	r4, r1, #4
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfb8      	it	lt
 800997e:	18e4      	addlt	r4, r4, r3
 8009980:	f000 f981 	bl	8009c86 <__malloc_lock>
 8009984:	4a1f      	ldr	r2, [pc, #124]	; (8009a04 <_free_r+0x98>)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	4610      	mov	r0, r2
 800998a:	b933      	cbnz	r3, 800999a <_free_r+0x2e>
 800998c:	6063      	str	r3, [r4, #4]
 800998e:	6014      	str	r4, [r2, #0]
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009996:	f000 b977 	b.w	8009c88 <__malloc_unlock>
 800999a:	42a3      	cmp	r3, r4
 800999c:	d90c      	bls.n	80099b8 <_free_r+0x4c>
 800999e:	6821      	ldr	r1, [r4, #0]
 80099a0:	1862      	adds	r2, r4, r1
 80099a2:	4293      	cmp	r3, r2
 80099a4:	bf04      	itt	eq
 80099a6:	681a      	ldreq	r2, [r3, #0]
 80099a8:	685b      	ldreq	r3, [r3, #4]
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	bf04      	itt	eq
 80099ae:	1852      	addeq	r2, r2, r1
 80099b0:	6022      	streq	r2, [r4, #0]
 80099b2:	6004      	str	r4, [r0, #0]
 80099b4:	e7ec      	b.n	8009990 <_free_r+0x24>
 80099b6:	4613      	mov	r3, r2
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	b10a      	cbz	r2, 80099c0 <_free_r+0x54>
 80099bc:	42a2      	cmp	r2, r4
 80099be:	d9fa      	bls.n	80099b6 <_free_r+0x4a>
 80099c0:	6819      	ldr	r1, [r3, #0]
 80099c2:	1858      	adds	r0, r3, r1
 80099c4:	42a0      	cmp	r0, r4
 80099c6:	d10b      	bne.n	80099e0 <_free_r+0x74>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	4401      	add	r1, r0
 80099cc:	1858      	adds	r0, r3, r1
 80099ce:	4282      	cmp	r2, r0
 80099d0:	6019      	str	r1, [r3, #0]
 80099d2:	d1dd      	bne.n	8009990 <_free_r+0x24>
 80099d4:	6810      	ldr	r0, [r2, #0]
 80099d6:	6852      	ldr	r2, [r2, #4]
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	4401      	add	r1, r0
 80099dc:	6019      	str	r1, [r3, #0]
 80099de:	e7d7      	b.n	8009990 <_free_r+0x24>
 80099e0:	d902      	bls.n	80099e8 <_free_r+0x7c>
 80099e2:	230c      	movs	r3, #12
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	e7d3      	b.n	8009990 <_free_r+0x24>
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	1821      	adds	r1, r4, r0
 80099ec:	428a      	cmp	r2, r1
 80099ee:	bf04      	itt	eq
 80099f0:	6811      	ldreq	r1, [r2, #0]
 80099f2:	6852      	ldreq	r2, [r2, #4]
 80099f4:	6062      	str	r2, [r4, #4]
 80099f6:	bf04      	itt	eq
 80099f8:	1809      	addeq	r1, r1, r0
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	605c      	str	r4, [r3, #4]
 80099fe:	e7c7      	b.n	8009990 <_free_r+0x24>
 8009a00:	bd38      	pop	{r3, r4, r5, pc}
 8009a02:	bf00      	nop
 8009a04:	20000230 	.word	0x20000230

08009a08 <_malloc_r>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	1ccd      	adds	r5, r1, #3
 8009a0c:	f025 0503 	bic.w	r5, r5, #3
 8009a10:	3508      	adds	r5, #8
 8009a12:	2d0c      	cmp	r5, #12
 8009a14:	bf38      	it	cc
 8009a16:	250c      	movcc	r5, #12
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	db01      	blt.n	8009a22 <_malloc_r+0x1a>
 8009a1e:	42a9      	cmp	r1, r5
 8009a20:	d903      	bls.n	8009a2a <_malloc_r+0x22>
 8009a22:	230c      	movs	r3, #12
 8009a24:	6033      	str	r3, [r6, #0]
 8009a26:	2000      	movs	r0, #0
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	f000 f92c 	bl	8009c86 <__malloc_lock>
 8009a2e:	4a21      	ldr	r2, [pc, #132]	; (8009ab4 <_malloc_r+0xac>)
 8009a30:	6814      	ldr	r4, [r2, #0]
 8009a32:	4621      	mov	r1, r4
 8009a34:	b991      	cbnz	r1, 8009a5c <_malloc_r+0x54>
 8009a36:	4c20      	ldr	r4, [pc, #128]	; (8009ab8 <_malloc_r+0xb0>)
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	b91b      	cbnz	r3, 8009a44 <_malloc_r+0x3c>
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f000 f83d 	bl	8009abc <_sbrk_r>
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	4629      	mov	r1, r5
 8009a46:	4630      	mov	r0, r6
 8009a48:	f000 f838 	bl	8009abc <_sbrk_r>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d124      	bne.n	8009a9a <_malloc_r+0x92>
 8009a50:	230c      	movs	r3, #12
 8009a52:	6033      	str	r3, [r6, #0]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f917 	bl	8009c88 <__malloc_unlock>
 8009a5a:	e7e4      	b.n	8009a26 <_malloc_r+0x1e>
 8009a5c:	680b      	ldr	r3, [r1, #0]
 8009a5e:	1b5b      	subs	r3, r3, r5
 8009a60:	d418      	bmi.n	8009a94 <_malloc_r+0x8c>
 8009a62:	2b0b      	cmp	r3, #11
 8009a64:	d90f      	bls.n	8009a86 <_malloc_r+0x7e>
 8009a66:	600b      	str	r3, [r1, #0]
 8009a68:	50cd      	str	r5, [r1, r3]
 8009a6a:	18cc      	adds	r4, r1, r3
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f90b 	bl	8009c88 <__malloc_unlock>
 8009a72:	f104 000b 	add.w	r0, r4, #11
 8009a76:	1d23      	adds	r3, r4, #4
 8009a78:	f020 0007 	bic.w	r0, r0, #7
 8009a7c:	1ac3      	subs	r3, r0, r3
 8009a7e:	d0d3      	beq.n	8009a28 <_malloc_r+0x20>
 8009a80:	425a      	negs	r2, r3
 8009a82:	50e2      	str	r2, [r4, r3]
 8009a84:	e7d0      	b.n	8009a28 <_malloc_r+0x20>
 8009a86:	428c      	cmp	r4, r1
 8009a88:	684b      	ldr	r3, [r1, #4]
 8009a8a:	bf16      	itet	ne
 8009a8c:	6063      	strne	r3, [r4, #4]
 8009a8e:	6013      	streq	r3, [r2, #0]
 8009a90:	460c      	movne	r4, r1
 8009a92:	e7eb      	b.n	8009a6c <_malloc_r+0x64>
 8009a94:	460c      	mov	r4, r1
 8009a96:	6849      	ldr	r1, [r1, #4]
 8009a98:	e7cc      	b.n	8009a34 <_malloc_r+0x2c>
 8009a9a:	1cc4      	adds	r4, r0, #3
 8009a9c:	f024 0403 	bic.w	r4, r4, #3
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	d005      	beq.n	8009ab0 <_malloc_r+0xa8>
 8009aa4:	1a21      	subs	r1, r4, r0
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f808 	bl	8009abc <_sbrk_r>
 8009aac:	3001      	adds	r0, #1
 8009aae:	d0cf      	beq.n	8009a50 <_malloc_r+0x48>
 8009ab0:	6025      	str	r5, [r4, #0]
 8009ab2:	e7db      	b.n	8009a6c <_malloc_r+0x64>
 8009ab4:	20000230 	.word	0x20000230
 8009ab8:	20000234 	.word	0x20000234

08009abc <_sbrk_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4c06      	ldr	r4, [pc, #24]	; (8009ad8 <_sbrk_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	f7f8 fc14 	bl	80022f4 <_sbrk>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_sbrk_r+0x1a>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_sbrk_r+0x1a>
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20000670 	.word	0x20000670

08009adc <siprintf>:
 8009adc:	b40e      	push	{r1, r2, r3}
 8009ade:	b500      	push	{lr}
 8009ae0:	b09c      	sub	sp, #112	; 0x70
 8009ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ae4:	9002      	str	r0, [sp, #8]
 8009ae6:	9006      	str	r0, [sp, #24]
 8009ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aec:	4809      	ldr	r0, [pc, #36]	; (8009b14 <siprintf+0x38>)
 8009aee:	9107      	str	r1, [sp, #28]
 8009af0:	9104      	str	r1, [sp, #16]
 8009af2:	4909      	ldr	r1, [pc, #36]	; (8009b18 <siprintf+0x3c>)
 8009af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	a902      	add	r1, sp, #8
 8009b00:	f000 f91e 	bl	8009d40 <_svfiprintf_r>
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	b01c      	add	sp, #112	; 0x70
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b003      	add	sp, #12
 8009b12:	4770      	bx	lr
 8009b14:	2000002c 	.word	0x2000002c
 8009b18:	ffff0208 	.word	0xffff0208

08009b1c <strcat>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4603      	mov	r3, r0
 8009b20:	781a      	ldrb	r2, [r3, #0]
 8009b22:	1c5c      	adds	r4, r3, #1
 8009b24:	b93a      	cbnz	r2, 8009b36 <strcat+0x1a>
 8009b26:	3b01      	subs	r3, #1
 8009b28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d1f9      	bne.n	8009b28 <strcat+0xc>
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	4623      	mov	r3, r4
 8009b38:	e7f2      	b.n	8009b20 <strcat+0x4>

08009b3a <strcpy>:
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b40:	f803 2b01 	strb.w	r2, [r3], #1
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	d1f9      	bne.n	8009b3c <strcpy+0x2>
 8009b48:	4770      	bx	lr

08009b4a <_strtol_l.isra.0>:
 8009b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4e:	4680      	mov	r8, r0
 8009b50:	4689      	mov	r9, r1
 8009b52:	4692      	mov	sl, r2
 8009b54:	461e      	mov	r6, r3
 8009b56:	460f      	mov	r7, r1
 8009b58:	463d      	mov	r5, r7
 8009b5a:	9808      	ldr	r0, [sp, #32]
 8009b5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b60:	f7ff fec4 	bl	80098ec <__locale_ctype_ptr_l>
 8009b64:	4420      	add	r0, r4
 8009b66:	7843      	ldrb	r3, [r0, #1]
 8009b68:	f013 0308 	ands.w	r3, r3, #8
 8009b6c:	d132      	bne.n	8009bd4 <_strtol_l.isra.0+0x8a>
 8009b6e:	2c2d      	cmp	r4, #45	; 0x2d
 8009b70:	d132      	bne.n	8009bd8 <_strtol_l.isra.0+0x8e>
 8009b72:	787c      	ldrb	r4, [r7, #1]
 8009b74:	1cbd      	adds	r5, r7, #2
 8009b76:	2201      	movs	r2, #1
 8009b78:	2e00      	cmp	r6, #0
 8009b7a:	d05d      	beq.n	8009c38 <_strtol_l.isra.0+0xee>
 8009b7c:	2e10      	cmp	r6, #16
 8009b7e:	d109      	bne.n	8009b94 <_strtol_l.isra.0+0x4a>
 8009b80:	2c30      	cmp	r4, #48	; 0x30
 8009b82:	d107      	bne.n	8009b94 <_strtol_l.isra.0+0x4a>
 8009b84:	782b      	ldrb	r3, [r5, #0]
 8009b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b8a:	2b58      	cmp	r3, #88	; 0x58
 8009b8c:	d14f      	bne.n	8009c2e <_strtol_l.isra.0+0xe4>
 8009b8e:	786c      	ldrb	r4, [r5, #1]
 8009b90:	2610      	movs	r6, #16
 8009b92:	3502      	adds	r5, #2
 8009b94:	2a00      	cmp	r2, #0
 8009b96:	bf14      	ite	ne
 8009b98:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b9c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009ba0:	2700      	movs	r7, #0
 8009ba2:	fbb1 fcf6 	udiv	ip, r1, r6
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009bac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	d817      	bhi.n	8009be4 <_strtol_l.isra.0+0x9a>
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	dd23      	ble.n	8009c02 <_strtol_l.isra.0+0xb8>
 8009bba:	1c7b      	adds	r3, r7, #1
 8009bbc:	d007      	beq.n	8009bce <_strtol_l.isra.0+0x84>
 8009bbe:	4584      	cmp	ip, r0
 8009bc0:	d31c      	bcc.n	8009bfc <_strtol_l.isra.0+0xb2>
 8009bc2:	d101      	bne.n	8009bc8 <_strtol_l.isra.0+0x7e>
 8009bc4:	45a6      	cmp	lr, r4
 8009bc6:	db19      	blt.n	8009bfc <_strtol_l.isra.0+0xb2>
 8009bc8:	fb00 4006 	mla	r0, r0, r6, r4
 8009bcc:	2701      	movs	r7, #1
 8009bce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd2:	e7eb      	b.n	8009bac <_strtol_l.isra.0+0x62>
 8009bd4:	462f      	mov	r7, r5
 8009bd6:	e7bf      	b.n	8009b58 <_strtol_l.isra.0+0xe>
 8009bd8:	2c2b      	cmp	r4, #43	; 0x2b
 8009bda:	bf04      	itt	eq
 8009bdc:	1cbd      	addeq	r5, r7, #2
 8009bde:	787c      	ldrbeq	r4, [r7, #1]
 8009be0:	461a      	mov	r2, r3
 8009be2:	e7c9      	b.n	8009b78 <_strtol_l.isra.0+0x2e>
 8009be4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009be8:	2b19      	cmp	r3, #25
 8009bea:	d801      	bhi.n	8009bf0 <_strtol_l.isra.0+0xa6>
 8009bec:	3c37      	subs	r4, #55	; 0x37
 8009bee:	e7e2      	b.n	8009bb6 <_strtol_l.isra.0+0x6c>
 8009bf0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009bf4:	2b19      	cmp	r3, #25
 8009bf6:	d804      	bhi.n	8009c02 <_strtol_l.isra.0+0xb8>
 8009bf8:	3c57      	subs	r4, #87	; 0x57
 8009bfa:	e7dc      	b.n	8009bb6 <_strtol_l.isra.0+0x6c>
 8009bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009c00:	e7e5      	b.n	8009bce <_strtol_l.isra.0+0x84>
 8009c02:	1c7b      	adds	r3, r7, #1
 8009c04:	d108      	bne.n	8009c18 <_strtol_l.isra.0+0xce>
 8009c06:	2322      	movs	r3, #34	; 0x22
 8009c08:	f8c8 3000 	str.w	r3, [r8]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	f1ba 0f00 	cmp.w	sl, #0
 8009c12:	d107      	bne.n	8009c24 <_strtol_l.isra.0+0xda>
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	b102      	cbz	r2, 8009c1c <_strtol_l.isra.0+0xd2>
 8009c1a:	4240      	negs	r0, r0
 8009c1c:	f1ba 0f00 	cmp.w	sl, #0
 8009c20:	d0f8      	beq.n	8009c14 <_strtol_l.isra.0+0xca>
 8009c22:	b10f      	cbz	r7, 8009c28 <_strtol_l.isra.0+0xde>
 8009c24:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c28:	f8ca 9000 	str.w	r9, [sl]
 8009c2c:	e7f2      	b.n	8009c14 <_strtol_l.isra.0+0xca>
 8009c2e:	2430      	movs	r4, #48	; 0x30
 8009c30:	2e00      	cmp	r6, #0
 8009c32:	d1af      	bne.n	8009b94 <_strtol_l.isra.0+0x4a>
 8009c34:	2608      	movs	r6, #8
 8009c36:	e7ad      	b.n	8009b94 <_strtol_l.isra.0+0x4a>
 8009c38:	2c30      	cmp	r4, #48	; 0x30
 8009c3a:	d0a3      	beq.n	8009b84 <_strtol_l.isra.0+0x3a>
 8009c3c:	260a      	movs	r6, #10
 8009c3e:	e7a9      	b.n	8009b94 <_strtol_l.isra.0+0x4a>

08009c40 <strtol>:
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <strtol+0x24>)
 8009c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c44:	681c      	ldr	r4, [r3, #0]
 8009c46:	4d08      	ldr	r5, [pc, #32]	; (8009c68 <strtol+0x28>)
 8009c48:	6a23      	ldr	r3, [r4, #32]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bf08      	it	eq
 8009c4e:	462b      	moveq	r3, r5
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	4613      	mov	r3, r2
 8009c54:	460a      	mov	r2, r1
 8009c56:	4601      	mov	r1, r0
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7ff ff76 	bl	8009b4a <_strtol_l.isra.0>
 8009c5e:	b003      	add	sp, #12
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	2000002c 	.word	0x2000002c
 8009c68:	20000090 	.word	0x20000090

08009c6c <__ascii_wctomb>:
 8009c6c:	b149      	cbz	r1, 8009c82 <__ascii_wctomb+0x16>
 8009c6e:	2aff      	cmp	r2, #255	; 0xff
 8009c70:	bf85      	ittet	hi
 8009c72:	238a      	movhi	r3, #138	; 0x8a
 8009c74:	6003      	strhi	r3, [r0, #0]
 8009c76:	700a      	strbls	r2, [r1, #0]
 8009c78:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c7c:	bf98      	it	ls
 8009c7e:	2001      	movls	r0, #1
 8009c80:	4770      	bx	lr
 8009c82:	4608      	mov	r0, r1
 8009c84:	4770      	bx	lr

08009c86 <__malloc_lock>:
 8009c86:	4770      	bx	lr

08009c88 <__malloc_unlock>:
 8009c88:	4770      	bx	lr

08009c8a <__ssputs_r>:
 8009c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8e:	688e      	ldr	r6, [r1, #8]
 8009c90:	429e      	cmp	r6, r3
 8009c92:	4682      	mov	sl, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	4690      	mov	r8, r2
 8009c98:	4699      	mov	r9, r3
 8009c9a:	d837      	bhi.n	8009d0c <__ssputs_r+0x82>
 8009c9c:	898a      	ldrh	r2, [r1, #12]
 8009c9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ca2:	d031      	beq.n	8009d08 <__ssputs_r+0x7e>
 8009ca4:	6825      	ldr	r5, [r4, #0]
 8009ca6:	6909      	ldr	r1, [r1, #16]
 8009ca8:	1a6f      	subs	r7, r5, r1
 8009caa:	6965      	ldr	r5, [r4, #20]
 8009cac:	2302      	movs	r3, #2
 8009cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cb6:	f109 0301 	add.w	r3, r9, #1
 8009cba:	443b      	add	r3, r7
 8009cbc:	429d      	cmp	r5, r3
 8009cbe:	bf38      	it	cc
 8009cc0:	461d      	movcc	r5, r3
 8009cc2:	0553      	lsls	r3, r2, #21
 8009cc4:	d530      	bpl.n	8009d28 <__ssputs_r+0x9e>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7ff fe9e 	bl	8009a08 <_malloc_r>
 8009ccc:	4606      	mov	r6, r0
 8009cce:	b950      	cbnz	r0, 8009ce6 <__ssputs_r+0x5c>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	f8ca 3000 	str.w	r3, [sl]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce6:	463a      	mov	r2, r7
 8009ce8:	6921      	ldr	r1, [r4, #16]
 8009cea:	f7ff fe2b 	bl	8009944 <memcpy>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	6126      	str	r6, [r4, #16]
 8009cfc:	6165      	str	r5, [r4, #20]
 8009cfe:	443e      	add	r6, r7
 8009d00:	1bed      	subs	r5, r5, r7
 8009d02:	6026      	str	r6, [r4, #0]
 8009d04:	60a5      	str	r5, [r4, #8]
 8009d06:	464e      	mov	r6, r9
 8009d08:	454e      	cmp	r6, r9
 8009d0a:	d900      	bls.n	8009d0e <__ssputs_r+0x84>
 8009d0c:	464e      	mov	r6, r9
 8009d0e:	4632      	mov	r2, r6
 8009d10:	4641      	mov	r1, r8
 8009d12:	6820      	ldr	r0, [r4, #0]
 8009d14:	f000 fa94 	bl	800a240 <memmove>
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	1b9b      	subs	r3, r3, r6
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	441e      	add	r6, r3
 8009d22:	6026      	str	r6, [r4, #0]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7dc      	b.n	8009ce2 <__ssputs_r+0x58>
 8009d28:	462a      	mov	r2, r5
 8009d2a:	f000 faa2 	bl	800a272 <_realloc_r>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d1e2      	bne.n	8009cfa <__ssputs_r+0x70>
 8009d34:	6921      	ldr	r1, [r4, #16]
 8009d36:	4650      	mov	r0, sl
 8009d38:	f7ff fe18 	bl	800996c <_free_r>
 8009d3c:	e7c8      	b.n	8009cd0 <__ssputs_r+0x46>
	...

08009d40 <_svfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	461d      	mov	r5, r3
 8009d46:	898b      	ldrh	r3, [r1, #12]
 8009d48:	061f      	lsls	r7, r3, #24
 8009d4a:	b09d      	sub	sp, #116	; 0x74
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	4616      	mov	r6, r2
 8009d52:	d50f      	bpl.n	8009d74 <_svfiprintf_r+0x34>
 8009d54:	690b      	ldr	r3, [r1, #16]
 8009d56:	b96b      	cbnz	r3, 8009d74 <_svfiprintf_r+0x34>
 8009d58:	2140      	movs	r1, #64	; 0x40
 8009d5a:	f7ff fe55 	bl	8009a08 <_malloc_r>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	6120      	str	r0, [r4, #16]
 8009d62:	b928      	cbnz	r0, 8009d70 <_svfiprintf_r+0x30>
 8009d64:	230c      	movs	r3, #12
 8009d66:	f8c8 3000 	str.w	r3, [r8]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e0c8      	b.n	8009f02 <_svfiprintf_r+0x1c2>
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	2300      	movs	r3, #0
 8009d76:	9309      	str	r3, [sp, #36]	; 0x24
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d7e:	2330      	movs	r3, #48	; 0x30
 8009d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d84:	9503      	str	r5, [sp, #12]
 8009d86:	f04f 0b01 	mov.w	fp, #1
 8009d8a:	4637      	mov	r7, r6
 8009d8c:	463d      	mov	r5, r7
 8009d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d92:	b10b      	cbz	r3, 8009d98 <_svfiprintf_r+0x58>
 8009d94:	2b25      	cmp	r3, #37	; 0x25
 8009d96:	d13e      	bne.n	8009e16 <_svfiprintf_r+0xd6>
 8009d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d9c:	d00b      	beq.n	8009db6 <_svfiprintf_r+0x76>
 8009d9e:	4653      	mov	r3, sl
 8009da0:	4632      	mov	r2, r6
 8009da2:	4621      	mov	r1, r4
 8009da4:	4640      	mov	r0, r8
 8009da6:	f7ff ff70 	bl	8009c8a <__ssputs_r>
 8009daa:	3001      	adds	r0, #1
 8009dac:	f000 80a4 	beq.w	8009ef8 <_svfiprintf_r+0x1b8>
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	4453      	add	r3, sl
 8009db4:	9309      	str	r3, [sp, #36]	; 0x24
 8009db6:	783b      	ldrb	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 809d 	beq.w	8009ef8 <_svfiprintf_r+0x1b8>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd2:	462f      	mov	r7, r5
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009dda:	4850      	ldr	r0, [pc, #320]	; (8009f1c <_svfiprintf_r+0x1dc>)
 8009ddc:	f7f6 fa18 	bl	8000210 <memchr>
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	b9d0      	cbnz	r0, 8009e1a <_svfiprintf_r+0xda>
 8009de4:	06d9      	lsls	r1, r3, #27
 8009de6:	bf44      	itt	mi
 8009de8:	2220      	movmi	r2, #32
 8009dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dee:	071a      	lsls	r2, r3, #28
 8009df0:	bf44      	itt	mi
 8009df2:	222b      	movmi	r2, #43	; 0x2b
 8009df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009df8:	782a      	ldrb	r2, [r5, #0]
 8009dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8009dfc:	d015      	beq.n	8009e2a <_svfiprintf_r+0xea>
 8009dfe:	9a07      	ldr	r2, [sp, #28]
 8009e00:	462f      	mov	r7, r5
 8009e02:	2000      	movs	r0, #0
 8009e04:	250a      	movs	r5, #10
 8009e06:	4639      	mov	r1, r7
 8009e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e0c:	3b30      	subs	r3, #48	; 0x30
 8009e0e:	2b09      	cmp	r3, #9
 8009e10:	d94d      	bls.n	8009eae <_svfiprintf_r+0x16e>
 8009e12:	b1b8      	cbz	r0, 8009e44 <_svfiprintf_r+0x104>
 8009e14:	e00f      	b.n	8009e36 <_svfiprintf_r+0xf6>
 8009e16:	462f      	mov	r7, r5
 8009e18:	e7b8      	b.n	8009d8c <_svfiprintf_r+0x4c>
 8009e1a:	4a40      	ldr	r2, [pc, #256]	; (8009f1c <_svfiprintf_r+0x1dc>)
 8009e1c:	1a80      	subs	r0, r0, r2
 8009e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8009e22:	4318      	orrs	r0, r3
 8009e24:	9004      	str	r0, [sp, #16]
 8009e26:	463d      	mov	r5, r7
 8009e28:	e7d3      	b.n	8009dd2 <_svfiprintf_r+0x92>
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	1d11      	adds	r1, r2, #4
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	9103      	str	r1, [sp, #12]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	db01      	blt.n	8009e3a <_svfiprintf_r+0xfa>
 8009e36:	9207      	str	r2, [sp, #28]
 8009e38:	e004      	b.n	8009e44 <_svfiprintf_r+0x104>
 8009e3a:	4252      	negs	r2, r2
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	783b      	ldrb	r3, [r7, #0]
 8009e46:	2b2e      	cmp	r3, #46	; 0x2e
 8009e48:	d10c      	bne.n	8009e64 <_svfiprintf_r+0x124>
 8009e4a:	787b      	ldrb	r3, [r7, #1]
 8009e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4e:	d133      	bne.n	8009eb8 <_svfiprintf_r+0x178>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	1d1a      	adds	r2, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	9203      	str	r2, [sp, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e60:	3702      	adds	r7, #2
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	4d2e      	ldr	r5, [pc, #184]	; (8009f20 <_svfiprintf_r+0x1e0>)
 8009e66:	7839      	ldrb	r1, [r7, #0]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f7f6 f9d0 	bl	8000210 <memchr>
 8009e70:	b138      	cbz	r0, 8009e82 <_svfiprintf_r+0x142>
 8009e72:	2340      	movs	r3, #64	; 0x40
 8009e74:	1b40      	subs	r0, r0, r5
 8009e76:	fa03 f000 	lsl.w	r0, r3, r0
 8009e7a:	9b04      	ldr	r3, [sp, #16]
 8009e7c:	4303      	orrs	r3, r0
 8009e7e:	3701      	adds	r7, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	7839      	ldrb	r1, [r7, #0]
 8009e84:	4827      	ldr	r0, [pc, #156]	; (8009f24 <_svfiprintf_r+0x1e4>)
 8009e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	1c7e      	adds	r6, r7, #1
 8009e8e:	f7f6 f9bf 	bl	8000210 <memchr>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d038      	beq.n	8009f08 <_svfiprintf_r+0x1c8>
 8009e96:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <_svfiprintf_r+0x1e8>)
 8009e98:	bb13      	cbnz	r3, 8009ee0 <_svfiprintf_r+0x1a0>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	444b      	add	r3, r9
 8009eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009eac:	e76d      	b.n	8009d8a <_svfiprintf_r+0x4a>
 8009eae:	fb05 3202 	mla	r2, r5, r2, r3
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	e7a6      	b.n	8009e06 <_svfiprintf_r+0xc6>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	3701      	adds	r7, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	250a      	movs	r5, #10
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d903      	bls.n	8009ed6 <_svfiprintf_r+0x196>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0c8      	beq.n	8009e64 <_svfiprintf_r+0x124>
 8009ed2:	9105      	str	r1, [sp, #20]
 8009ed4:	e7c6      	b.n	8009e64 <_svfiprintf_r+0x124>
 8009ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8009eda:	2301      	movs	r3, #1
 8009edc:	4607      	mov	r7, r0
 8009ede:	e7f0      	b.n	8009ec2 <_svfiprintf_r+0x182>
 8009ee0:	ab03      	add	r3, sp, #12
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <_svfiprintf_r+0x1ec>)
 8009ee8:	a904      	add	r1, sp, #16
 8009eea:	4640      	mov	r0, r8
 8009eec:	f3af 8000 	nop.w
 8009ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	d1d6      	bne.n	8009ea6 <_svfiprintf_r+0x166>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	065b      	lsls	r3, r3, #25
 8009efc:	f53f af35 	bmi.w	8009d6a <_svfiprintf_r+0x2a>
 8009f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f02:	b01d      	add	sp, #116	; 0x74
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	ab03      	add	r3, sp, #12
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <_svfiprintf_r+0x1ec>)
 8009f10:	a904      	add	r1, sp, #16
 8009f12:	4640      	mov	r0, r8
 8009f14:	f000 f882 	bl	800a01c <_printf_i>
 8009f18:	e7ea      	b.n	8009ef0 <_svfiprintf_r+0x1b0>
 8009f1a:	bf00      	nop
 8009f1c:	0800a96b 	.word	0x0800a96b
 8009f20:	0800a971 	.word	0x0800a971
 8009f24:	0800a975 	.word	0x0800a975
 8009f28:	00000000 	.word	0x00000000
 8009f2c:	08009c8b 	.word	0x08009c8b

08009f30 <_printf_common>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	4691      	mov	r9, r2
 8009f36:	461f      	mov	r7, r3
 8009f38:	688a      	ldr	r2, [r1, #8]
 8009f3a:	690b      	ldr	r3, [r1, #16]
 8009f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	bfb8      	it	lt
 8009f44:	4613      	movlt	r3, r2
 8009f46:	f8c9 3000 	str.w	r3, [r9]
 8009f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	b112      	cbz	r2, 8009f5a <_printf_common+0x2a>
 8009f54:	3301      	adds	r3, #1
 8009f56:	f8c9 3000 	str.w	r3, [r9]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	0699      	lsls	r1, r3, #26
 8009f5e:	bf42      	ittt	mi
 8009f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f64:	3302      	addmi	r3, #2
 8009f66:	f8c9 3000 	strmi.w	r3, [r9]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	f015 0506 	ands.w	r5, r5, #6
 8009f70:	d107      	bne.n	8009f82 <_printf_common+0x52>
 8009f72:	f104 0a19 	add.w	sl, r4, #25
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	f8d9 2000 	ldr.w	r2, [r9]
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	42ab      	cmp	r3, r5
 8009f80:	dc28      	bgt.n	8009fd4 <_printf_common+0xa4>
 8009f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f86:	6822      	ldr	r2, [r4, #0]
 8009f88:	3300      	adds	r3, #0
 8009f8a:	bf18      	it	ne
 8009f8c:	2301      	movne	r3, #1
 8009f8e:	0692      	lsls	r2, r2, #26
 8009f90:	d42d      	bmi.n	8009fee <_printf_common+0xbe>
 8009f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f96:	4639      	mov	r1, r7
 8009f98:	4630      	mov	r0, r6
 8009f9a:	47c0      	blx	r8
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d020      	beq.n	8009fe2 <_printf_common+0xb2>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	68e5      	ldr	r5, [r4, #12]
 8009fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fa8:	f003 0306 	and.w	r3, r3, #6
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	bf08      	it	eq
 8009fb0:	1aad      	subeq	r5, r5, r2
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	bf0c      	ite	eq
 8009fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fbc:	2500      	movne	r5, #0
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	bfc4      	itt	gt
 8009fc2:	1a9b      	subgt	r3, r3, r2
 8009fc4:	18ed      	addgt	r5, r5, r3
 8009fc6:	f04f 0900 	mov.w	r9, #0
 8009fca:	341a      	adds	r4, #26
 8009fcc:	454d      	cmp	r5, r9
 8009fce:	d11a      	bne.n	800a006 <_printf_common+0xd6>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e008      	b.n	8009fe6 <_printf_common+0xb6>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	4639      	mov	r1, r7
 8009fda:	4630      	mov	r0, r6
 8009fdc:	47c0      	blx	r8
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d103      	bne.n	8009fea <_printf_common+0xba>
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	3501      	adds	r5, #1
 8009fec:	e7c3      	b.n	8009f76 <_printf_common+0x46>
 8009fee:	18e1      	adds	r1, r4, r3
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	2030      	movs	r0, #48	; 0x30
 8009ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ff8:	4422      	add	r2, r4
 8009ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a002:	3302      	adds	r3, #2
 800a004:	e7c5      	b.n	8009f92 <_printf_common+0x62>
 800a006:	2301      	movs	r3, #1
 800a008:	4622      	mov	r2, r4
 800a00a:	4639      	mov	r1, r7
 800a00c:	4630      	mov	r0, r6
 800a00e:	47c0      	blx	r8
 800a010:	3001      	adds	r0, #1
 800a012:	d0e6      	beq.n	8009fe2 <_printf_common+0xb2>
 800a014:	f109 0901 	add.w	r9, r9, #1
 800a018:	e7d8      	b.n	8009fcc <_printf_common+0x9c>
	...

0800a01c <_printf_i>:
 800a01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a024:	460c      	mov	r4, r1
 800a026:	7e09      	ldrb	r1, [r1, #24]
 800a028:	b085      	sub	sp, #20
 800a02a:	296e      	cmp	r1, #110	; 0x6e
 800a02c:	4617      	mov	r7, r2
 800a02e:	4606      	mov	r6, r0
 800a030:	4698      	mov	r8, r3
 800a032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a034:	f000 80b3 	beq.w	800a19e <_printf_i+0x182>
 800a038:	d822      	bhi.n	800a080 <_printf_i+0x64>
 800a03a:	2963      	cmp	r1, #99	; 0x63
 800a03c:	d036      	beq.n	800a0ac <_printf_i+0x90>
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x3a>
 800a040:	2900      	cmp	r1, #0
 800a042:	f000 80b9 	beq.w	800a1b8 <_printf_i+0x19c>
 800a046:	2958      	cmp	r1, #88	; 0x58
 800a048:	f000 8083 	beq.w	800a152 <_printf_i+0x136>
 800a04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a054:	e032      	b.n	800a0bc <_printf_i+0xa0>
 800a056:	2964      	cmp	r1, #100	; 0x64
 800a058:	d001      	beq.n	800a05e <_printf_i+0x42>
 800a05a:	2969      	cmp	r1, #105	; 0x69
 800a05c:	d1f6      	bne.n	800a04c <_printf_i+0x30>
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	0605      	lsls	r5, r0, #24
 800a064:	f103 0104 	add.w	r1, r3, #4
 800a068:	d52a      	bpl.n	800a0c0 <_printf_i+0xa4>
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da03      	bge.n	800a07a <_printf_i+0x5e>
 800a072:	222d      	movs	r2, #45	; 0x2d
 800a074:	425b      	negs	r3, r3
 800a076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a07a:	486f      	ldr	r0, [pc, #444]	; (800a238 <_printf_i+0x21c>)
 800a07c:	220a      	movs	r2, #10
 800a07e:	e039      	b.n	800a0f4 <_printf_i+0xd8>
 800a080:	2973      	cmp	r1, #115	; 0x73
 800a082:	f000 809d 	beq.w	800a1c0 <_printf_i+0x1a4>
 800a086:	d808      	bhi.n	800a09a <_printf_i+0x7e>
 800a088:	296f      	cmp	r1, #111	; 0x6f
 800a08a:	d020      	beq.n	800a0ce <_printf_i+0xb2>
 800a08c:	2970      	cmp	r1, #112	; 0x70
 800a08e:	d1dd      	bne.n	800a04c <_printf_i+0x30>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	f043 0320 	orr.w	r3, r3, #32
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	e003      	b.n	800a0a2 <_printf_i+0x86>
 800a09a:	2975      	cmp	r1, #117	; 0x75
 800a09c:	d017      	beq.n	800a0ce <_printf_i+0xb2>
 800a09e:	2978      	cmp	r1, #120	; 0x78
 800a0a0:	d1d4      	bne.n	800a04c <_printf_i+0x30>
 800a0a2:	2378      	movs	r3, #120	; 0x78
 800a0a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0a8:	4864      	ldr	r0, [pc, #400]	; (800a23c <_printf_i+0x220>)
 800a0aa:	e055      	b.n	800a158 <_printf_i+0x13c>
 800a0ac:	6813      	ldr	r3, [r2, #0]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6011      	str	r1, [r2, #0]
 800a0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e08c      	b.n	800a1da <_printf_i+0x1be>
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6011      	str	r1, [r2, #0]
 800a0c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0c8:	bf18      	it	ne
 800a0ca:	b21b      	sxthne	r3, r3
 800a0cc:	e7cf      	b.n	800a06e <_printf_i+0x52>
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	6825      	ldr	r5, [r4, #0]
 800a0d2:	1d18      	adds	r0, r3, #4
 800a0d4:	6010      	str	r0, [r2, #0]
 800a0d6:	0628      	lsls	r0, r5, #24
 800a0d8:	d501      	bpl.n	800a0de <_printf_i+0xc2>
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	e002      	b.n	800a0e4 <_printf_i+0xc8>
 800a0de:	0668      	lsls	r0, r5, #25
 800a0e0:	d5fb      	bpl.n	800a0da <_printf_i+0xbe>
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	4854      	ldr	r0, [pc, #336]	; (800a238 <_printf_i+0x21c>)
 800a0e6:	296f      	cmp	r1, #111	; 0x6f
 800a0e8:	bf14      	ite	ne
 800a0ea:	220a      	movne	r2, #10
 800a0ec:	2208      	moveq	r2, #8
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0f4:	6865      	ldr	r5, [r4, #4]
 800a0f6:	60a5      	str	r5, [r4, #8]
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	f2c0 8095 	blt.w	800a228 <_printf_i+0x20c>
 800a0fe:	6821      	ldr	r1, [r4, #0]
 800a100:	f021 0104 	bic.w	r1, r1, #4
 800a104:	6021      	str	r1, [r4, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d13d      	bne.n	800a186 <_printf_i+0x16a>
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	f040 808e 	bne.w	800a22c <_printf_i+0x210>
 800a110:	4665      	mov	r5, ip
 800a112:	2a08      	cmp	r2, #8
 800a114:	d10b      	bne.n	800a12e <_printf_i+0x112>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	07db      	lsls	r3, r3, #31
 800a11a:	d508      	bpl.n	800a12e <_printf_i+0x112>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	6862      	ldr	r2, [r4, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	bfde      	ittt	le
 800a124:	2330      	movle	r3, #48	; 0x30
 800a126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a12a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a12e:	ebac 0305 	sub.w	r3, ip, r5
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	f8cd 8000 	str.w	r8, [sp]
 800a138:	463b      	mov	r3, r7
 800a13a:	aa03      	add	r2, sp, #12
 800a13c:	4621      	mov	r1, r4
 800a13e:	4630      	mov	r0, r6
 800a140:	f7ff fef6 	bl	8009f30 <_printf_common>
 800a144:	3001      	adds	r0, #1
 800a146:	d14d      	bne.n	800a1e4 <_printf_i+0x1c8>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	b005      	add	sp, #20
 800a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a152:	4839      	ldr	r0, [pc, #228]	; (800a238 <_printf_i+0x21c>)
 800a154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a158:	6813      	ldr	r3, [r2, #0]
 800a15a:	6821      	ldr	r1, [r4, #0]
 800a15c:	1d1d      	adds	r5, r3, #4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6015      	str	r5, [r2, #0]
 800a162:	060a      	lsls	r2, r1, #24
 800a164:	d50b      	bpl.n	800a17e <_printf_i+0x162>
 800a166:	07ca      	lsls	r2, r1, #31
 800a168:	bf44      	itt	mi
 800a16a:	f041 0120 	orrmi.w	r1, r1, #32
 800a16e:	6021      	strmi	r1, [r4, #0]
 800a170:	b91b      	cbnz	r3, 800a17a <_printf_i+0x15e>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	f022 0220 	bic.w	r2, r2, #32
 800a178:	6022      	str	r2, [r4, #0]
 800a17a:	2210      	movs	r2, #16
 800a17c:	e7b7      	b.n	800a0ee <_printf_i+0xd2>
 800a17e:	064d      	lsls	r5, r1, #25
 800a180:	bf48      	it	mi
 800a182:	b29b      	uxthmi	r3, r3
 800a184:	e7ef      	b.n	800a166 <_printf_i+0x14a>
 800a186:	4665      	mov	r5, ip
 800a188:	fbb3 f1f2 	udiv	r1, r3, r2
 800a18c:	fb02 3311 	mls	r3, r2, r1, r3
 800a190:	5cc3      	ldrb	r3, [r0, r3]
 800a192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a196:	460b      	mov	r3, r1
 800a198:	2900      	cmp	r1, #0
 800a19a:	d1f5      	bne.n	800a188 <_printf_i+0x16c>
 800a19c:	e7b9      	b.n	800a112 <_printf_i+0xf6>
 800a19e:	6813      	ldr	r3, [r2, #0]
 800a1a0:	6825      	ldr	r5, [r4, #0]
 800a1a2:	6961      	ldr	r1, [r4, #20]
 800a1a4:	1d18      	adds	r0, r3, #4
 800a1a6:	6010      	str	r0, [r2, #0]
 800a1a8:	0628      	lsls	r0, r5, #24
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	d501      	bpl.n	800a1b2 <_printf_i+0x196>
 800a1ae:	6019      	str	r1, [r3, #0]
 800a1b0:	e002      	b.n	800a1b8 <_printf_i+0x19c>
 800a1b2:	066a      	lsls	r2, r5, #25
 800a1b4:	d5fb      	bpl.n	800a1ae <_printf_i+0x192>
 800a1b6:	8019      	strh	r1, [r3, #0]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	4665      	mov	r5, ip
 800a1be:	e7b9      	b.n	800a134 <_printf_i+0x118>
 800a1c0:	6813      	ldr	r3, [r2, #0]
 800a1c2:	1d19      	adds	r1, r3, #4
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	681d      	ldr	r5, [r3, #0]
 800a1c8:	6862      	ldr	r2, [r4, #4]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7f6 f81f 	bl	8000210 <memchr>
 800a1d2:	b108      	cbz	r0, 800a1d8 <_printf_i+0x1bc>
 800a1d4:	1b40      	subs	r0, r0, r5
 800a1d6:	6060      	str	r0, [r4, #4]
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e2:	e7a7      	b.n	800a134 <_printf_i+0x118>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	47c0      	blx	r8
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d0aa      	beq.n	800a148 <_printf_i+0x12c>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	079b      	lsls	r3, r3, #30
 800a1f6:	d413      	bmi.n	800a220 <_printf_i+0x204>
 800a1f8:	68e0      	ldr	r0, [r4, #12]
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	4298      	cmp	r0, r3
 800a1fe:	bfb8      	it	lt
 800a200:	4618      	movlt	r0, r3
 800a202:	e7a3      	b.n	800a14c <_printf_i+0x130>
 800a204:	2301      	movs	r3, #1
 800a206:	464a      	mov	r2, r9
 800a208:	4639      	mov	r1, r7
 800a20a:	4630      	mov	r0, r6
 800a20c:	47c0      	blx	r8
 800a20e:	3001      	adds	r0, #1
 800a210:	d09a      	beq.n	800a148 <_printf_i+0x12c>
 800a212:	3501      	adds	r5, #1
 800a214:	68e3      	ldr	r3, [r4, #12]
 800a216:	9a03      	ldr	r2, [sp, #12]
 800a218:	1a9b      	subs	r3, r3, r2
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	dcf2      	bgt.n	800a204 <_printf_i+0x1e8>
 800a21e:	e7eb      	b.n	800a1f8 <_printf_i+0x1dc>
 800a220:	2500      	movs	r5, #0
 800a222:	f104 0919 	add.w	r9, r4, #25
 800a226:	e7f5      	b.n	800a214 <_printf_i+0x1f8>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1ac      	bne.n	800a186 <_printf_i+0x16a>
 800a22c:	7803      	ldrb	r3, [r0, #0]
 800a22e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a236:	e76c      	b.n	800a112 <_printf_i+0xf6>
 800a238:	0800a97c 	.word	0x0800a97c
 800a23c:	0800a98d 	.word	0x0800a98d

0800a240 <memmove>:
 800a240:	4288      	cmp	r0, r1
 800a242:	b510      	push	{r4, lr}
 800a244:	eb01 0302 	add.w	r3, r1, r2
 800a248:	d807      	bhi.n	800a25a <memmove+0x1a>
 800a24a:	1e42      	subs	r2, r0, #1
 800a24c:	4299      	cmp	r1, r3
 800a24e:	d00a      	beq.n	800a266 <memmove+0x26>
 800a250:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a254:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a258:	e7f8      	b.n	800a24c <memmove+0xc>
 800a25a:	4283      	cmp	r3, r0
 800a25c:	d9f5      	bls.n	800a24a <memmove+0xa>
 800a25e:	1881      	adds	r1, r0, r2
 800a260:	1ad2      	subs	r2, r2, r3
 800a262:	42d3      	cmn	r3, r2
 800a264:	d100      	bne.n	800a268 <memmove+0x28>
 800a266:	bd10      	pop	{r4, pc}
 800a268:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a26c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a270:	e7f7      	b.n	800a262 <memmove+0x22>

0800a272 <_realloc_r>:
 800a272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a274:	4607      	mov	r7, r0
 800a276:	4614      	mov	r4, r2
 800a278:	460e      	mov	r6, r1
 800a27a:	b921      	cbnz	r1, 800a286 <_realloc_r+0x14>
 800a27c:	4611      	mov	r1, r2
 800a27e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a282:	f7ff bbc1 	b.w	8009a08 <_malloc_r>
 800a286:	b922      	cbnz	r2, 800a292 <_realloc_r+0x20>
 800a288:	f7ff fb70 	bl	800996c <_free_r>
 800a28c:	4625      	mov	r5, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a292:	f000 f814 	bl	800a2be <_malloc_usable_size_r>
 800a296:	42a0      	cmp	r0, r4
 800a298:	d20f      	bcs.n	800a2ba <_realloc_r+0x48>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff fbb3 	bl	8009a08 <_malloc_r>
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d0f2      	beq.n	800a28e <_realloc_r+0x1c>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	f7ff fb4a 	bl	8009944 <memcpy>
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff fb5a 	bl	800996c <_free_r>
 800a2b8:	e7e9      	b.n	800a28e <_realloc_r+0x1c>
 800a2ba:	4635      	mov	r5, r6
 800a2bc:	e7e7      	b.n	800a28e <_realloc_r+0x1c>

0800a2be <_malloc_usable_size_r>:
 800a2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c2:	1f18      	subs	r0, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bfbc      	itt	lt
 800a2c8:	580b      	ldrlt	r3, [r1, r0]
 800a2ca:	18c0      	addlt	r0, r0, r3
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <_init>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr

0800a2dc <_fini>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr
